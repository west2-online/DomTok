// Code generated by thriftgo (0.3.18). DO NOT EDIT.

package model

import (
	"fmt"
	"strings"
)

type BaseResp struct {
	Code int64  `thrift:"code,1" frugal:"1,default,i64" json:"code"`
	Msg  string `thrift:"msg,2" frugal:"2,default,string" json:"msg"`
}

func NewBaseResp() *BaseResp {
	return &BaseResp{}
}

func (p *BaseResp) InitDefault() {
}

func (p *BaseResp) GetCode() (v int64) {
	return p.Code
}

func (p *BaseResp) GetMsg() (v string) {
	return p.Msg
}
func (p *BaseResp) SetCode(val int64) {
	p.Code = val
}
func (p *BaseResp) SetMsg(val string) {
	p.Msg = val
}

func (p *BaseResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BaseResp(%+v)", *p)
}

func (p *BaseResp) DeepEqual(ano *BaseResp) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Code) {
		return false
	}
	if !p.Field2DeepEqual(ano.Msg) {
		return false
	}
	return true
}

func (p *BaseResp) Field1DeepEqual(src int64) bool {

	if p.Code != src {
		return false
	}
	return true
}
func (p *BaseResp) Field2DeepEqual(src string) bool {

	if strings.Compare(p.Msg, src) != 0 {
		return false
	}
	return true
}

var fieldIDToName_BaseResp = map[int16]string{
	1: "code",
	2: "msg",
}

type UserInfo struct {
	UserId int64  `thrift:"userId,1" frugal:"1,default,i64" json:"userId"`
	Name   string `thrift:"name,2" frugal:"2,default,string" json:"name"`
}

func NewUserInfo() *UserInfo {
	return &UserInfo{}
}

func (p *UserInfo) InitDefault() {
}

func (p *UserInfo) GetUserId() (v int64) {
	return p.UserId
}

func (p *UserInfo) GetName() (v string) {
	return p.Name
}
func (p *UserInfo) SetUserId(val int64) {
	p.UserId = val
}
func (p *UserInfo) SetName(val string) {
	p.Name = val
}

func (p *UserInfo) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserInfo(%+v)", *p)
}

func (p *UserInfo) DeepEqual(ano *UserInfo) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.UserId) {
		return false
	}
	if !p.Field2DeepEqual(ano.Name) {
		return false
	}
	return true
}

func (p *UserInfo) Field1DeepEqual(src int64) bool {

	if p.UserId != src {
		return false
	}
	return true
}
func (p *UserInfo) Field2DeepEqual(src string) bool {

	if strings.Compare(p.Name, src) != 0 {
		return false
	}
	return true
}

var fieldIDToName_UserInfo = map[int16]string{
	1: "userId",
	2: "name",
}

type LoginData struct {
	UserId int64 `thrift:"userId,1" frugal:"1,default,i64" json:"userId"`
}

func NewLoginData() *LoginData {
	return &LoginData{}
}

func (p *LoginData) InitDefault() {
}

func (p *LoginData) GetUserId() (v int64) {
	return p.UserId
}
func (p *LoginData) SetUserId(val int64) {
	p.UserId = val
}

func (p *LoginData) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LoginData(%+v)", *p)
}

func (p *LoginData) DeepEqual(ano *LoginData) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.UserId) {
		return false
	}
	return true
}

func (p *LoginData) Field1DeepEqual(src int64) bool {

	if p.UserId != src {
		return false
	}
	return true
}

var fieldIDToName_LoginData = map[int16]string{
	1: "userId",
}

type CategoryInfo struct {
	CategoryID int64  `thrift:"categoryID,1,required" frugal:"1,required,i64" json:"categoryID"`
	Name       string `thrift:"name,2,required" frugal:"2,required,string" json:"name"`
}

func NewCategoryInfo() *CategoryInfo {
	return &CategoryInfo{}
}

func (p *CategoryInfo) InitDefault() {
}

func (p *CategoryInfo) GetCategoryID() (v int64) {
	return p.CategoryID
}

func (p *CategoryInfo) GetName() (v string) {
	return p.Name
}
func (p *CategoryInfo) SetCategoryID(val int64) {
	p.CategoryID = val
}
func (p *CategoryInfo) SetName(val string) {
	p.Name = val
}

func (p *CategoryInfo) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CategoryInfo(%+v)", *p)
}

func (p *CategoryInfo) DeepEqual(ano *CategoryInfo) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.CategoryID) {
		return false
	}
	if !p.Field2DeepEqual(ano.Name) {
		return false
	}
	return true
}

func (p *CategoryInfo) Field1DeepEqual(src int64) bool {

	if p.CategoryID != src {
		return false
	}
	return true
}
func (p *CategoryInfo) Field2DeepEqual(src string) bool {

	if strings.Compare(p.Name, src) != 0 {
		return false
	}
	return true
}

var fieldIDToName_CategoryInfo = map[int16]string{
	1: "categoryID",
	2: "name",
}

type Coupon struct {
	CouponID       int64    `thrift:"couponID,1,required" frugal:"1,required,i64" json:"couponID"`
	CreatorID      int64    `thrift:"creatorID,2,required" frugal:"2,required,i64" json:"creatorID"`
	DeadlineForGet int64    `thrift:"deadlineForGet,3,required" frugal:"3,required,i64" json:"deadlineForGet"`
	Name           string   `thrift:"name,4,required" frugal:"4,required,string" json:"name"`
	TypeInfo       int32    `thrift:"typeInfo,5,required" frugal:"5,required,i32" json:"typeInfo"`
	ConditionCost  float64  `thrift:"conditionCost,6,required" frugal:"6,required,double" json:"conditionCost"`
	DiscountAmount *float64 `thrift:"discountAmount,7,optional" frugal:"7,optional,double" json:"discountAmount,omitempty"`
	Discount       *float64 `thrift:"discount,8,optional" frugal:"8,optional,double" json:"discount,omitempty"`
	RangeType      int32    `thrift:"rangeType,9,required" frugal:"9,required,i32" json:"rangeType"`
	RangeId        int64    `thrift:"rangeId,10,required" frugal:"10,required,i64" json:"rangeId"`
	ExpireTime     int64    `thrift:"expireTime,11,required" frugal:"11,required,i64" json:"expireTime"`
	Description    string   `thrift:"description,12,required" frugal:"12,required,string" json:"description"`
	CreatedAt      int64    `thrift:"createdAt,13,required" frugal:"13,required,i64" json:"createdAt"`
	UpdatedAt      *int64   `thrift:"updatedAt,14,optional" frugal:"14,optional,i64" json:"updatedAt,omitempty"`
	DeletedAt      *int64   `thrift:"deletedAt,15,optional" frugal:"15,optional,i64" json:"deletedAt,omitempty"`
}

func NewCoupon() *Coupon {
	return &Coupon{}
}

func (p *Coupon) InitDefault() {
}

func (p *Coupon) GetCouponID() (v int64) {
	return p.CouponID
}

func (p *Coupon) GetCreatorID() (v int64) {
	return p.CreatorID
}

func (p *Coupon) GetDeadlineForGet() (v int64) {
	return p.DeadlineForGet
}

func (p *Coupon) GetName() (v string) {
	return p.Name
}

func (p *Coupon) GetTypeInfo() (v int32) {
	return p.TypeInfo
}

func (p *Coupon) GetConditionCost() (v float64) {
	return p.ConditionCost
}

var Coupon_DiscountAmount_DEFAULT float64

func (p *Coupon) GetDiscountAmount() (v float64) {
	if !p.IsSetDiscountAmount() {
		return Coupon_DiscountAmount_DEFAULT
	}
	return *p.DiscountAmount
}

var Coupon_Discount_DEFAULT float64

func (p *Coupon) GetDiscount() (v float64) {
	if !p.IsSetDiscount() {
		return Coupon_Discount_DEFAULT
	}
	return *p.Discount
}

func (p *Coupon) GetRangeType() (v int32) {
	return p.RangeType
}

func (p *Coupon) GetRangeId() (v int64) {
	return p.RangeId
}

func (p *Coupon) GetExpireTime() (v int64) {
	return p.ExpireTime
}

func (p *Coupon) GetDescription() (v string) {
	return p.Description
}

func (p *Coupon) GetCreatedAt() (v int64) {
	return p.CreatedAt
}

var Coupon_UpdatedAt_DEFAULT int64

func (p *Coupon) GetUpdatedAt() (v int64) {
	if !p.IsSetUpdatedAt() {
		return Coupon_UpdatedAt_DEFAULT
	}
	return *p.UpdatedAt
}

var Coupon_DeletedAt_DEFAULT int64

func (p *Coupon) GetDeletedAt() (v int64) {
	if !p.IsSetDeletedAt() {
		return Coupon_DeletedAt_DEFAULT
	}
	return *p.DeletedAt
}
func (p *Coupon) SetCouponID(val int64) {
	p.CouponID = val
}
func (p *Coupon) SetCreatorID(val int64) {
	p.CreatorID = val
}
func (p *Coupon) SetDeadlineForGet(val int64) {
	p.DeadlineForGet = val
}
func (p *Coupon) SetName(val string) {
	p.Name = val
}
func (p *Coupon) SetTypeInfo(val int32) {
	p.TypeInfo = val
}
func (p *Coupon) SetConditionCost(val float64) {
	p.ConditionCost = val
}
func (p *Coupon) SetDiscountAmount(val *float64) {
	p.DiscountAmount = val
}
func (p *Coupon) SetDiscount(val *float64) {
	p.Discount = val
}
func (p *Coupon) SetRangeType(val int32) {
	p.RangeType = val
}
func (p *Coupon) SetRangeId(val int64) {
	p.RangeId = val
}
func (p *Coupon) SetExpireTime(val int64) {
	p.ExpireTime = val
}
func (p *Coupon) SetDescription(val string) {
	p.Description = val
}
func (p *Coupon) SetCreatedAt(val int64) {
	p.CreatedAt = val
}
func (p *Coupon) SetUpdatedAt(val *int64) {
	p.UpdatedAt = val
}
func (p *Coupon) SetDeletedAt(val *int64) {
	p.DeletedAt = val
}

func (p *Coupon) IsSetDiscountAmount() bool {
	return p.DiscountAmount != nil
}

func (p *Coupon) IsSetDiscount() bool {
	return p.Discount != nil
}

func (p *Coupon) IsSetUpdatedAt() bool {
	return p.UpdatedAt != nil
}

func (p *Coupon) IsSetDeletedAt() bool {
	return p.DeletedAt != nil
}

func (p *Coupon) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Coupon(%+v)", *p)
}

func (p *Coupon) DeepEqual(ano *Coupon) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.CouponID) {
		return false
	}
	if !p.Field2DeepEqual(ano.CreatorID) {
		return false
	}
	if !p.Field3DeepEqual(ano.DeadlineForGet) {
		return false
	}
	if !p.Field4DeepEqual(ano.Name) {
		return false
	}
	if !p.Field5DeepEqual(ano.TypeInfo) {
		return false
	}
	if !p.Field6DeepEqual(ano.ConditionCost) {
		return false
	}
	if !p.Field7DeepEqual(ano.DiscountAmount) {
		return false
	}
	if !p.Field8DeepEqual(ano.Discount) {
		return false
	}
	if !p.Field9DeepEqual(ano.RangeType) {
		return false
	}
	if !p.Field10DeepEqual(ano.RangeId) {
		return false
	}
	if !p.Field11DeepEqual(ano.ExpireTime) {
		return false
	}
	if !p.Field12DeepEqual(ano.Description) {
		return false
	}
	if !p.Field13DeepEqual(ano.CreatedAt) {
		return false
	}
	if !p.Field14DeepEqual(ano.UpdatedAt) {
		return false
	}
	if !p.Field15DeepEqual(ano.DeletedAt) {
		return false
	}
	return true
}

func (p *Coupon) Field1DeepEqual(src int64) bool {

	if p.CouponID != src {
		return false
	}
	return true
}
func (p *Coupon) Field2DeepEqual(src int64) bool {

	if p.CreatorID != src {
		return false
	}
	return true
}
func (p *Coupon) Field3DeepEqual(src int64) bool {

	if p.DeadlineForGet != src {
		return false
	}
	return true
}
func (p *Coupon) Field4DeepEqual(src string) bool {

	if strings.Compare(p.Name, src) != 0 {
		return false
	}
	return true
}
func (p *Coupon) Field5DeepEqual(src int32) bool {

	if p.TypeInfo != src {
		return false
	}
	return true
}
func (p *Coupon) Field6DeepEqual(src float64) bool {

	if p.ConditionCost != src {
		return false
	}
	return true
}
func (p *Coupon) Field7DeepEqual(src *float64) bool {

	if p.DiscountAmount == src {
		return true
	} else if p.DiscountAmount == nil || src == nil {
		return false
	}
	if *p.DiscountAmount != *src {
		return false
	}
	return true
}
func (p *Coupon) Field8DeepEqual(src *float64) bool {

	if p.Discount == src {
		return true
	} else if p.Discount == nil || src == nil {
		return false
	}
	if *p.Discount != *src {
		return false
	}
	return true
}
func (p *Coupon) Field9DeepEqual(src int32) bool {

	if p.RangeType != src {
		return false
	}
	return true
}
func (p *Coupon) Field10DeepEqual(src int64) bool {

	if p.RangeId != src {
		return false
	}
	return true
}
func (p *Coupon) Field11DeepEqual(src int64) bool {

	if p.ExpireTime != src {
		return false
	}
	return true
}
func (p *Coupon) Field12DeepEqual(src string) bool {

	if strings.Compare(p.Description, src) != 0 {
		return false
	}
	return true
}
func (p *Coupon) Field13DeepEqual(src int64) bool {

	if p.CreatedAt != src {
		return false
	}
	return true
}
func (p *Coupon) Field14DeepEqual(src *int64) bool {

	if p.UpdatedAt == src {
		return true
	} else if p.UpdatedAt == nil || src == nil {
		return false
	}
	if *p.UpdatedAt != *src {
		return false
	}
	return true
}
func (p *Coupon) Field15DeepEqual(src *int64) bool {

	if p.DeletedAt == src {
		return true
	} else if p.DeletedAt == nil || src == nil {
		return false
	}
	if *p.DeletedAt != *src {
		return false
	}
	return true
}

var fieldIDToName_Coupon = map[int16]string{
	1:  "couponID",
	2:  "creatorID",
	3:  "deadlineForGet",
	4:  "name",
	5:  "typeInfo",
	6:  "conditionCost",
	7:  "discountAmount",
	8:  "discount",
	9:  "rangeType",
	10: "rangeId",
	11: "expireTime",
	12: "description",
	13: "createdAt",
	14: "updatedAt",
	15: "deletedAt",
}

type UserCoupon struct {
	CouponID           int64    `thrift:"couponID,1,required" frugal:"1,required,i64" json:"couponID"`
	CreatorID          int64    `thrift:"creatorID,2,required" frugal:"2,required,i64" json:"creatorID"`
	UserID             int64    `thrift:"userID,3,required" frugal:"3,required,i64" json:"userID"`
	Name               string   `thrift:"name,4,required" frugal:"4,required,string" json:"name"`
	TypeInfo           int32    `thrift:"typeInfo,5,required" frugal:"5,required,i32" json:"typeInfo"`
	ConditionCost      int64    `thrift:"conditionCost,6,required" frugal:"6,required,i64" json:"conditionCost"`
	DiscountAmount     *float64 `thrift:"discountAmount,7,optional" frugal:"7,optional,double" json:"discountAmount,omitempty"`
	Discount           *float64 `thrift:"discount,8,optional" frugal:"8,optional,double" json:"discount,omitempty"`
	RangeType          int64    `thrift:"rangeType,9,required" frugal:"9,required,i64" json:"rangeType"`
	RangeId            int64    `thrift:"rangeId,10,required" frugal:"10,required,i64" json:"rangeId"`
	ExpireAt           int64    `thrift:"expireAt,11,required" frugal:"11,required,i64" json:"expireAt"`
	Description        string   `thrift:"description,12,required" frugal:"12,required,string" json:"description"`
	RemainUserUseCount int64    `thrift:"remainUserUseCount,13,required" frugal:"13,required,i64" json:"remainUserUseCount"`
	CreatedAt          int64    `thrift:"createdAt,14,required" frugal:"14,required,i64" json:"createdAt"`
}

func NewUserCoupon() *UserCoupon {
	return &UserCoupon{}
}

func (p *UserCoupon) InitDefault() {
}

func (p *UserCoupon) GetCouponID() (v int64) {
	return p.CouponID
}

func (p *UserCoupon) GetCreatorID() (v int64) {
	return p.CreatorID
}

func (p *UserCoupon) GetUserID() (v int64) {
	return p.UserID
}

func (p *UserCoupon) GetName() (v string) {
	return p.Name
}

func (p *UserCoupon) GetTypeInfo() (v int32) {
	return p.TypeInfo
}

func (p *UserCoupon) GetConditionCost() (v int64) {
	return p.ConditionCost
}

var UserCoupon_DiscountAmount_DEFAULT float64

func (p *UserCoupon) GetDiscountAmount() (v float64) {
	if !p.IsSetDiscountAmount() {
		return UserCoupon_DiscountAmount_DEFAULT
	}
	return *p.DiscountAmount
}

var UserCoupon_Discount_DEFAULT float64

func (p *UserCoupon) GetDiscount() (v float64) {
	if !p.IsSetDiscount() {
		return UserCoupon_Discount_DEFAULT
	}
	return *p.Discount
}

func (p *UserCoupon) GetRangeType() (v int64) {
	return p.RangeType
}

func (p *UserCoupon) GetRangeId() (v int64) {
	return p.RangeId
}

func (p *UserCoupon) GetExpireAt() (v int64) {
	return p.ExpireAt
}

func (p *UserCoupon) GetDescription() (v string) {
	return p.Description
}

func (p *UserCoupon) GetRemainUserUseCount() (v int64) {
	return p.RemainUserUseCount
}

func (p *UserCoupon) GetCreatedAt() (v int64) {
	return p.CreatedAt
}
func (p *UserCoupon) SetCouponID(val int64) {
	p.CouponID = val
}
func (p *UserCoupon) SetCreatorID(val int64) {
	p.CreatorID = val
}
func (p *UserCoupon) SetUserID(val int64) {
	p.UserID = val
}
func (p *UserCoupon) SetName(val string) {
	p.Name = val
}
func (p *UserCoupon) SetTypeInfo(val int32) {
	p.TypeInfo = val
}
func (p *UserCoupon) SetConditionCost(val int64) {
	p.ConditionCost = val
}
func (p *UserCoupon) SetDiscountAmount(val *float64) {
	p.DiscountAmount = val
}
func (p *UserCoupon) SetDiscount(val *float64) {
	p.Discount = val
}
func (p *UserCoupon) SetRangeType(val int64) {
	p.RangeType = val
}
func (p *UserCoupon) SetRangeId(val int64) {
	p.RangeId = val
}
func (p *UserCoupon) SetExpireAt(val int64) {
	p.ExpireAt = val
}
func (p *UserCoupon) SetDescription(val string) {
	p.Description = val
}
func (p *UserCoupon) SetRemainUserUseCount(val int64) {
	p.RemainUserUseCount = val
}
func (p *UserCoupon) SetCreatedAt(val int64) {
	p.CreatedAt = val
}

func (p *UserCoupon) IsSetDiscountAmount() bool {
	return p.DiscountAmount != nil
}

func (p *UserCoupon) IsSetDiscount() bool {
	return p.Discount != nil
}

func (p *UserCoupon) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserCoupon(%+v)", *p)
}

func (p *UserCoupon) DeepEqual(ano *UserCoupon) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.CouponID) {
		return false
	}
	if !p.Field2DeepEqual(ano.CreatorID) {
		return false
	}
	if !p.Field3DeepEqual(ano.UserID) {
		return false
	}
	if !p.Field4DeepEqual(ano.Name) {
		return false
	}
	if !p.Field5DeepEqual(ano.TypeInfo) {
		return false
	}
	if !p.Field6DeepEqual(ano.ConditionCost) {
		return false
	}
	if !p.Field7DeepEqual(ano.DiscountAmount) {
		return false
	}
	if !p.Field8DeepEqual(ano.Discount) {
		return false
	}
	if !p.Field9DeepEqual(ano.RangeType) {
		return false
	}
	if !p.Field10DeepEqual(ano.RangeId) {
		return false
	}
	if !p.Field11DeepEqual(ano.ExpireAt) {
		return false
	}
	if !p.Field12DeepEqual(ano.Description) {
		return false
	}
	if !p.Field13DeepEqual(ano.RemainUserUseCount) {
		return false
	}
	if !p.Field14DeepEqual(ano.CreatedAt) {
		return false
	}
	return true
}

func (p *UserCoupon) Field1DeepEqual(src int64) bool {

	if p.CouponID != src {
		return false
	}
	return true
}
func (p *UserCoupon) Field2DeepEqual(src int64) bool {

	if p.CreatorID != src {
		return false
	}
	return true
}
func (p *UserCoupon) Field3DeepEqual(src int64) bool {

	if p.UserID != src {
		return false
	}
	return true
}
func (p *UserCoupon) Field4DeepEqual(src string) bool {

	if strings.Compare(p.Name, src) != 0 {
		return false
	}
	return true
}
func (p *UserCoupon) Field5DeepEqual(src int32) bool {

	if p.TypeInfo != src {
		return false
	}
	return true
}
func (p *UserCoupon) Field6DeepEqual(src int64) bool {

	if p.ConditionCost != src {
		return false
	}
	return true
}
func (p *UserCoupon) Field7DeepEqual(src *float64) bool {

	if p.DiscountAmount == src {
		return true
	} else if p.DiscountAmount == nil || src == nil {
		return false
	}
	if *p.DiscountAmount != *src {
		return false
	}
	return true
}
func (p *UserCoupon) Field8DeepEqual(src *float64) bool {

	if p.Discount == src {
		return true
	} else if p.Discount == nil || src == nil {
		return false
	}
	if *p.Discount != *src {
		return false
	}
	return true
}
func (p *UserCoupon) Field9DeepEqual(src int64) bool {

	if p.RangeType != src {
		return false
	}
	return true
}
func (p *UserCoupon) Field10DeepEqual(src int64) bool {

	if p.RangeId != src {
		return false
	}
	return true
}
func (p *UserCoupon) Field11DeepEqual(src int64) bool {

	if p.ExpireAt != src {
		return false
	}
	return true
}
func (p *UserCoupon) Field12DeepEqual(src string) bool {

	if strings.Compare(p.Description, src) != 0 {
		return false
	}
	return true
}
func (p *UserCoupon) Field13DeepEqual(src int64) bool {

	if p.RemainUserUseCount != src {
		return false
	}
	return true
}
func (p *UserCoupon) Field14DeepEqual(src int64) bool {

	if p.CreatedAt != src {
		return false
	}
	return true
}

var fieldIDToName_UserCoupon = map[int16]string{
	1:  "couponID",
	2:  "creatorID",
	3:  "userID",
	4:  "name",
	5:  "typeInfo",
	6:  "conditionCost",
	7:  "discountAmount",
	8:  "discount",
	9:  "rangeType",
	10: "rangeId",
	11: "expireAt",
	12: "description",
	13: "remainUserUseCount",
	14: "createdAt",
}

type AttrValue struct {
	SaleAttr  string `thrift:"saleAttr,1,required" frugal:"1,required,string" json:"saleAttr"`
	SaleValue string `thrift:"saleValue,2,required" frugal:"2,required,string" json:"saleValue"`
}

func NewAttrValue() *AttrValue {
	return &AttrValue{}
}

func (p *AttrValue) InitDefault() {
}

func (p *AttrValue) GetSaleAttr() (v string) {
	return p.SaleAttr
}

func (p *AttrValue) GetSaleValue() (v string) {
	return p.SaleValue
}
func (p *AttrValue) SetSaleAttr(val string) {
	p.SaleAttr = val
}
func (p *AttrValue) SetSaleValue(val string) {
	p.SaleValue = val
}

func (p *AttrValue) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AttrValue(%+v)", *p)
}

func (p *AttrValue) DeepEqual(ano *AttrValue) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.SaleAttr) {
		return false
	}
	if !p.Field2DeepEqual(ano.SaleValue) {
		return false
	}
	return true
}

func (p *AttrValue) Field1DeepEqual(src string) bool {

	if strings.Compare(p.SaleAttr, src) != 0 {
		return false
	}
	return true
}
func (p *AttrValue) Field2DeepEqual(src string) bool {

	if strings.Compare(p.SaleValue, src) != 0 {
		return false
	}
	return true
}

var fieldIDToName_AttrValue = map[int16]string{
	1: "saleAttr",
	2: "saleValue",
}

type SpuImage struct {
	ImageID   int64  `thrift:"imageID,1,required" frugal:"1,required,i64" json:"imageID"`
	SpuID     int64  `thrift:"spuID,2,required" frugal:"2,required,i64" json:"spuID"`
	Url       string `thrift:"url,3,required" frugal:"3,required,string" json:"url"`
	CreatedAt int64  `thrift:"createdAt,4,required" frugal:"4,required,i64" json:"createdAt"`
	DeletedAt *int64 `thrift:"deletedAt,5,optional" frugal:"5,optional,i64" json:"deletedAt,omitempty"`
}

func NewSpuImage() *SpuImage {
	return &SpuImage{}
}

func (p *SpuImage) InitDefault() {
}

func (p *SpuImage) GetImageID() (v int64) {
	return p.ImageID
}

func (p *SpuImage) GetSpuID() (v int64) {
	return p.SpuID
}

func (p *SpuImage) GetUrl() (v string) {
	return p.Url
}

func (p *SpuImage) GetCreatedAt() (v int64) {
	return p.CreatedAt
}

var SpuImage_DeletedAt_DEFAULT int64

func (p *SpuImage) GetDeletedAt() (v int64) {
	if !p.IsSetDeletedAt() {
		return SpuImage_DeletedAt_DEFAULT
	}
	return *p.DeletedAt
}
func (p *SpuImage) SetImageID(val int64) {
	p.ImageID = val
}
func (p *SpuImage) SetSpuID(val int64) {
	p.SpuID = val
}
func (p *SpuImage) SetUrl(val string) {
	p.Url = val
}
func (p *SpuImage) SetCreatedAt(val int64) {
	p.CreatedAt = val
}
func (p *SpuImage) SetDeletedAt(val *int64) {
	p.DeletedAt = val
}

func (p *SpuImage) IsSetDeletedAt() bool {
	return p.DeletedAt != nil
}

func (p *SpuImage) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SpuImage(%+v)", *p)
}

func (p *SpuImage) DeepEqual(ano *SpuImage) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.ImageID) {
		return false
	}
	if !p.Field2DeepEqual(ano.SpuID) {
		return false
	}
	if !p.Field3DeepEqual(ano.Url) {
		return false
	}
	if !p.Field4DeepEqual(ano.CreatedAt) {
		return false
	}
	if !p.Field5DeepEqual(ano.DeletedAt) {
		return false
	}
	return true
}

func (p *SpuImage) Field1DeepEqual(src int64) bool {

	if p.ImageID != src {
		return false
	}
	return true
}
func (p *SpuImage) Field2DeepEqual(src int64) bool {

	if p.SpuID != src {
		return false
	}
	return true
}
func (p *SpuImage) Field3DeepEqual(src string) bool {

	if strings.Compare(p.Url, src) != 0 {
		return false
	}
	return true
}
func (p *SpuImage) Field4DeepEqual(src int64) bool {

	if p.CreatedAt != src {
		return false
	}
	return true
}
func (p *SpuImage) Field5DeepEqual(src *int64) bool {

	if p.DeletedAt == src {
		return true
	} else if p.DeletedAt == nil || src == nil {
		return false
	}
	if *p.DeletedAt != *src {
		return false
	}
	return true
}

var fieldIDToName_SpuImage = map[int16]string{
	1: "imageID",
	2: "spuID",
	3: "url",
	4: "createdAt",
	5: "deletedAt",
}

type SkuImage struct {
	ImageID   int64  `thrift:"imageID,1,required" frugal:"1,required,i64" json:"imageID"`
	SkuID     int64  `thrift:"skuID,2,required" frugal:"2,required,i64" json:"skuID"`
	Url       string `thrift:"url,3,required" frugal:"3,required,string" json:"url"`
	CreatedAt int64  `thrift:"createdAt,4,required" frugal:"4,required,i64" json:"createdAt"`
	DeletedAt *int64 `thrift:"deletedAt,5,optional" frugal:"5,optional,i64" json:"deletedAt,omitempty"`
}

func NewSkuImage() *SkuImage {
	return &SkuImage{}
}

func (p *SkuImage) InitDefault() {
}

func (p *SkuImage) GetImageID() (v int64) {
	return p.ImageID
}

func (p *SkuImage) GetSkuID() (v int64) {
	return p.SkuID
}

func (p *SkuImage) GetUrl() (v string) {
	return p.Url
}

func (p *SkuImage) GetCreatedAt() (v int64) {
	return p.CreatedAt
}

var SkuImage_DeletedAt_DEFAULT int64

func (p *SkuImage) GetDeletedAt() (v int64) {
	if !p.IsSetDeletedAt() {
		return SkuImage_DeletedAt_DEFAULT
	}
	return *p.DeletedAt
}
func (p *SkuImage) SetImageID(val int64) {
	p.ImageID = val
}
func (p *SkuImage) SetSkuID(val int64) {
	p.SkuID = val
}
func (p *SkuImage) SetUrl(val string) {
	p.Url = val
}
func (p *SkuImage) SetCreatedAt(val int64) {
	p.CreatedAt = val
}
func (p *SkuImage) SetDeletedAt(val *int64) {
	p.DeletedAt = val
}

func (p *SkuImage) IsSetDeletedAt() bool {
	return p.DeletedAt != nil
}

func (p *SkuImage) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SkuImage(%+v)", *p)
}

func (p *SkuImage) DeepEqual(ano *SkuImage) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.ImageID) {
		return false
	}
	if !p.Field2DeepEqual(ano.SkuID) {
		return false
	}
	if !p.Field3DeepEqual(ano.Url) {
		return false
	}
	if !p.Field4DeepEqual(ano.CreatedAt) {
		return false
	}
	if !p.Field5DeepEqual(ano.DeletedAt) {
		return false
	}
	return true
}

func (p *SkuImage) Field1DeepEqual(src int64) bool {

	if p.ImageID != src {
		return false
	}
	return true
}
func (p *SkuImage) Field2DeepEqual(src int64) bool {

	if p.SkuID != src {
		return false
	}
	return true
}
func (p *SkuImage) Field3DeepEqual(src string) bool {

	if strings.Compare(p.Url, src) != 0 {
		return false
	}
	return true
}
func (p *SkuImage) Field4DeepEqual(src int64) bool {

	if p.CreatedAt != src {
		return false
	}
	return true
}
func (p *SkuImage) Field5DeepEqual(src *int64) bool {

	if p.DeletedAt == src {
		return true
	} else if p.DeletedAt == nil || src == nil {
		return false
	}
	if *p.DeletedAt != *src {
		return false
	}
	return true
}

var fieldIDToName_SkuImage = map[int16]string{
	1: "imageID",
	2: "skuID",
	3: "url",
	4: "createdAt",
	5: "deletedAt",
}

type Spu struct {
	SpuID            int64   `thrift:"spuID,1,required" frugal:"1,required,i64" json:"spuID"`
	Name             string  `thrift:"name,2,required" frugal:"2,required,string" json:"name"`
	CreatorID        int64   `thrift:"creatorID,3,required" frugal:"3,required,i64" json:"creatorID"`
	Description      string  `thrift:"description,4,required" frugal:"4,required,string" json:"description"`
	CategoryID       int64   `thrift:"categoryID,5,required" frugal:"5,required,i64" json:"categoryID"`
	GoodsHeadDrawing string  `thrift:"goodsHeadDrawing,6,required" frugal:"6,required,string" json:"goodsHeadDrawing"`
	Price            float64 `thrift:"price,7,required" frugal:"7,required,double" json:"price"`
	ForSale          int32   `thrift:"forSale,8,required" frugal:"8,required,i32" json:"forSale"`
	Shipping         float64 `thrift:"shipping,9,required" frugal:"9,required,double" json:"shipping"`
	CreatedAt        int64   `thrift:"createdAt,10,required" frugal:"10,required,i64" json:"createdAt"`
	UpdatedAt        int64   `thrift:"updatedAt,11,required" frugal:"11,required,i64" json:"updatedAt"`
	DeletedAt        *int64  `thrift:"deletedAt,12,optional" frugal:"12,optional,i64" json:"deletedAt,omitempty"`
}

func NewSpu() *Spu {
	return &Spu{}
}

func (p *Spu) InitDefault() {
}

func (p *Spu) GetSpuID() (v int64) {
	return p.SpuID
}

func (p *Spu) GetName() (v string) {
	return p.Name
}

func (p *Spu) GetCreatorID() (v int64) {
	return p.CreatorID
}

func (p *Spu) GetDescription() (v string) {
	return p.Description
}

func (p *Spu) GetCategoryID() (v int64) {
	return p.CategoryID
}

func (p *Spu) GetGoodsHeadDrawing() (v string) {
	return p.GoodsHeadDrawing
}

func (p *Spu) GetPrice() (v float64) {
	return p.Price
}

func (p *Spu) GetForSale() (v int32) {
	return p.ForSale
}

func (p *Spu) GetShipping() (v float64) {
	return p.Shipping
}

func (p *Spu) GetCreatedAt() (v int64) {
	return p.CreatedAt
}

func (p *Spu) GetUpdatedAt() (v int64) {
	return p.UpdatedAt
}

var Spu_DeletedAt_DEFAULT int64

func (p *Spu) GetDeletedAt() (v int64) {
	if !p.IsSetDeletedAt() {
		return Spu_DeletedAt_DEFAULT
	}
	return *p.DeletedAt
}
func (p *Spu) SetSpuID(val int64) {
	p.SpuID = val
}
func (p *Spu) SetName(val string) {
	p.Name = val
}
func (p *Spu) SetCreatorID(val int64) {
	p.CreatorID = val
}
func (p *Spu) SetDescription(val string) {
	p.Description = val
}
func (p *Spu) SetCategoryID(val int64) {
	p.CategoryID = val
}
func (p *Spu) SetGoodsHeadDrawing(val string) {
	p.GoodsHeadDrawing = val
}
func (p *Spu) SetPrice(val float64) {
	p.Price = val
}
func (p *Spu) SetForSale(val int32) {
	p.ForSale = val
}
func (p *Spu) SetShipping(val float64) {
	p.Shipping = val
}
func (p *Spu) SetCreatedAt(val int64) {
	p.CreatedAt = val
}
func (p *Spu) SetUpdatedAt(val int64) {
	p.UpdatedAt = val
}
func (p *Spu) SetDeletedAt(val *int64) {
	p.DeletedAt = val
}

func (p *Spu) IsSetDeletedAt() bool {
	return p.DeletedAt != nil
}

func (p *Spu) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Spu(%+v)", *p)
}

func (p *Spu) DeepEqual(ano *Spu) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.SpuID) {
		return false
	}
	if !p.Field2DeepEqual(ano.Name) {
		return false
	}
	if !p.Field3DeepEqual(ano.CreatorID) {
		return false
	}
	if !p.Field4DeepEqual(ano.Description) {
		return false
	}
	if !p.Field5DeepEqual(ano.CategoryID) {
		return false
	}
	if !p.Field6DeepEqual(ano.GoodsHeadDrawing) {
		return false
	}
	if !p.Field7DeepEqual(ano.Price) {
		return false
	}
	if !p.Field8DeepEqual(ano.ForSale) {
		return false
	}
	if !p.Field9DeepEqual(ano.Shipping) {
		return false
	}
	if !p.Field10DeepEqual(ano.CreatedAt) {
		return false
	}
	if !p.Field11DeepEqual(ano.UpdatedAt) {
		return false
	}
	if !p.Field12DeepEqual(ano.DeletedAt) {
		return false
	}
	return true
}

func (p *Spu) Field1DeepEqual(src int64) bool {

	if p.SpuID != src {
		return false
	}
	return true
}
func (p *Spu) Field2DeepEqual(src string) bool {

	if strings.Compare(p.Name, src) != 0 {
		return false
	}
	return true
}
func (p *Spu) Field3DeepEqual(src int64) bool {

	if p.CreatorID != src {
		return false
	}
	return true
}
func (p *Spu) Field4DeepEqual(src string) bool {

	if strings.Compare(p.Description, src) != 0 {
		return false
	}
	return true
}
func (p *Spu) Field5DeepEqual(src int64) bool {

	if p.CategoryID != src {
		return false
	}
	return true
}
func (p *Spu) Field6DeepEqual(src string) bool {

	if strings.Compare(p.GoodsHeadDrawing, src) != 0 {
		return false
	}
	return true
}
func (p *Spu) Field7DeepEqual(src float64) bool {

	if p.Price != src {
		return false
	}
	return true
}
func (p *Spu) Field8DeepEqual(src int32) bool {

	if p.ForSale != src {
		return false
	}
	return true
}
func (p *Spu) Field9DeepEqual(src float64) bool {

	if p.Shipping != src {
		return false
	}
	return true
}
func (p *Spu) Field10DeepEqual(src int64) bool {

	if p.CreatedAt != src {
		return false
	}
	return true
}
func (p *Spu) Field11DeepEqual(src int64) bool {

	if p.UpdatedAt != src {
		return false
	}
	return true
}
func (p *Spu) Field12DeepEqual(src *int64) bool {

	if p.DeletedAt == src {
		return true
	} else if p.DeletedAt == nil || src == nil {
		return false
	}
	if *p.DeletedAt != *src {
		return false
	}
	return true
}

var fieldIDToName_Spu = map[int16]string{
	1:  "spuID",
	2:  "name",
	3:  "creatorID",
	4:  "description",
	5:  "categoryID",
	6:  "goodsHeadDrawing",
	7:  "price",
	8:  "forSale",
	9:  "shipping",
	10: "createdAt",
	11: "updatedAt",
	12: "deletedAt",
}

type Sku struct {
	SkuID            int64        `thrift:"skuID,1,required" frugal:"1,required,i64" json:"skuID"`
	CreatorID        int64        `thrift:"creatorID,2,required" frugal:"2,required,i64" json:"creatorID"`
	Price            float64      `thrift:"price,3,required" frugal:"3,required,double" json:"price"`
	Name             string       `thrift:"name,4,required" frugal:"4,required,string" json:"name"`
	Description      string       `thrift:"description,5,required" frugal:"5,required,string" json:"description"`
	ForSale          int32        `thrift:"forSale,6,required" frugal:"6,required,i32" json:"forSale"`
	Stock            int64        `thrift:"stock,7,required" frugal:"7,required,i64" json:"stock"`
	StyleHeadDrawing string       `thrift:"styleHeadDrawing,8,required" frugal:"8,required,string" json:"styleHeadDrawing"`
	CreatedAt        int64        `thrift:"createdAt,9,required" frugal:"9,required,i64" json:"createdAt"`
	UpdatedAt        int64        `thrift:"updatedAt,10,required" frugal:"10,required,i64" json:"updatedAt"`
	DeletedAt        *int64       `thrift:"deletedAt,11,optional" frugal:"11,optional,i64" json:"deletedAt,omitempty"`
	SpuID            int64        `thrift:"spuID,12,required" frugal:"12,required,i64" json:"spuID"`
	SaleAttr         []*AttrValue `thrift:"saleAttr,13,optional" frugal:"13,optional,list<AttrValue>" json:"saleAttr,omitempty"`
	HistoryID        int64        `thrift:"historyID,14,required" frugal:"14,required,i64" json:"historyID"`
	LockStock        int64        `thrift:"lockStock,15,required" frugal:"15,required,i64" json:"lockStock"`
}

func NewSku() *Sku {
	return &Sku{}
}

func (p *Sku) InitDefault() {
}

func (p *Sku) GetSkuID() (v int64) {
	return p.SkuID
}

func (p *Sku) GetCreatorID() (v int64) {
	return p.CreatorID
}

func (p *Sku) GetPrice() (v float64) {
	return p.Price
}

func (p *Sku) GetName() (v string) {
	return p.Name
}

func (p *Sku) GetDescription() (v string) {
	return p.Description
}

func (p *Sku) GetForSale() (v int32) {
	return p.ForSale
}

func (p *Sku) GetStock() (v int64) {
	return p.Stock
}

func (p *Sku) GetStyleHeadDrawing() (v string) {
	return p.StyleHeadDrawing
}

func (p *Sku) GetCreatedAt() (v int64) {
	return p.CreatedAt
}

func (p *Sku) GetUpdatedAt() (v int64) {
	return p.UpdatedAt
}

var Sku_DeletedAt_DEFAULT int64

func (p *Sku) GetDeletedAt() (v int64) {
	if !p.IsSetDeletedAt() {
		return Sku_DeletedAt_DEFAULT
	}
	return *p.DeletedAt
}

func (p *Sku) GetSpuID() (v int64) {
	return p.SpuID
}

var Sku_SaleAttr_DEFAULT []*AttrValue

func (p *Sku) GetSaleAttr() (v []*AttrValue) {
	if !p.IsSetSaleAttr() {
		return Sku_SaleAttr_DEFAULT
	}
	return p.SaleAttr
}

func (p *Sku) GetHistoryID() (v int64) {
	return p.HistoryID
}

func (p *Sku) GetLockStock() (v int64) {
	return p.LockStock
}
func (p *Sku) SetSkuID(val int64) {
	p.SkuID = val
}
func (p *Sku) SetCreatorID(val int64) {
	p.CreatorID = val
}
func (p *Sku) SetPrice(val float64) {
	p.Price = val
}
func (p *Sku) SetName(val string) {
	p.Name = val
}
func (p *Sku) SetDescription(val string) {
	p.Description = val
}
func (p *Sku) SetForSale(val int32) {
	p.ForSale = val
}
func (p *Sku) SetStock(val int64) {
	p.Stock = val
}
func (p *Sku) SetStyleHeadDrawing(val string) {
	p.StyleHeadDrawing = val
}
func (p *Sku) SetCreatedAt(val int64) {
	p.CreatedAt = val
}
func (p *Sku) SetUpdatedAt(val int64) {
	p.UpdatedAt = val
}
func (p *Sku) SetDeletedAt(val *int64) {
	p.DeletedAt = val
}
func (p *Sku) SetSpuID(val int64) {
	p.SpuID = val
}
func (p *Sku) SetSaleAttr(val []*AttrValue) {
	p.SaleAttr = val
}
func (p *Sku) SetHistoryID(val int64) {
	p.HistoryID = val
}
func (p *Sku) SetLockStock(val int64) {
	p.LockStock = val
}

func (p *Sku) IsSetDeletedAt() bool {
	return p.DeletedAt != nil
}

func (p *Sku) IsSetSaleAttr() bool {
	return p.SaleAttr != nil
}

func (p *Sku) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Sku(%+v)", *p)
}

func (p *Sku) DeepEqual(ano *Sku) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.SkuID) {
		return false
	}
	if !p.Field2DeepEqual(ano.CreatorID) {
		return false
	}
	if !p.Field3DeepEqual(ano.Price) {
		return false
	}
	if !p.Field4DeepEqual(ano.Name) {
		return false
	}
	if !p.Field5DeepEqual(ano.Description) {
		return false
	}
	if !p.Field6DeepEqual(ano.ForSale) {
		return false
	}
	if !p.Field7DeepEqual(ano.Stock) {
		return false
	}
	if !p.Field8DeepEqual(ano.StyleHeadDrawing) {
		return false
	}
	if !p.Field9DeepEqual(ano.CreatedAt) {
		return false
	}
	if !p.Field10DeepEqual(ano.UpdatedAt) {
		return false
	}
	if !p.Field11DeepEqual(ano.DeletedAt) {
		return false
	}
	if !p.Field12DeepEqual(ano.SpuID) {
		return false
	}
	if !p.Field13DeepEqual(ano.SaleAttr) {
		return false
	}
	if !p.Field14DeepEqual(ano.HistoryID) {
		return false
	}
	if !p.Field15DeepEqual(ano.LockStock) {
		return false
	}
	return true
}

func (p *Sku) Field1DeepEqual(src int64) bool {

	if p.SkuID != src {
		return false
	}
	return true
}
func (p *Sku) Field2DeepEqual(src int64) bool {

	if p.CreatorID != src {
		return false
	}
	return true
}
func (p *Sku) Field3DeepEqual(src float64) bool {

	if p.Price != src {
		return false
	}
	return true
}
func (p *Sku) Field4DeepEqual(src string) bool {

	if strings.Compare(p.Name, src) != 0 {
		return false
	}
	return true
}
func (p *Sku) Field5DeepEqual(src string) bool {

	if strings.Compare(p.Description, src) != 0 {
		return false
	}
	return true
}
func (p *Sku) Field6DeepEqual(src int32) bool {

	if p.ForSale != src {
		return false
	}
	return true
}
func (p *Sku) Field7DeepEqual(src int64) bool {

	if p.Stock != src {
		return false
	}
	return true
}
func (p *Sku) Field8DeepEqual(src string) bool {

	if strings.Compare(p.StyleHeadDrawing, src) != 0 {
		return false
	}
	return true
}
func (p *Sku) Field9DeepEqual(src int64) bool {

	if p.CreatedAt != src {
		return false
	}
	return true
}
func (p *Sku) Field10DeepEqual(src int64) bool {

	if p.UpdatedAt != src {
		return false
	}
	return true
}
func (p *Sku) Field11DeepEqual(src *int64) bool {

	if p.DeletedAt == src {
		return true
	} else if p.DeletedAt == nil || src == nil {
		return false
	}
	if *p.DeletedAt != *src {
		return false
	}
	return true
}
func (p *Sku) Field12DeepEqual(src int64) bool {

	if p.SpuID != src {
		return false
	}
	return true
}
func (p *Sku) Field13DeepEqual(src []*AttrValue) bool {

	if len(p.SaleAttr) != len(src) {
		return false
	}
	for i, v := range p.SaleAttr {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *Sku) Field14DeepEqual(src int64) bool {

	if p.HistoryID != src {
		return false
	}
	return true
}
func (p *Sku) Field15DeepEqual(src int64) bool {

	if p.LockStock != src {
		return false
	}
	return true
}

var fieldIDToName_Sku = map[int16]string{
	1:  "skuID",
	2:  "creatorID",
	3:  "price",
	4:  "name",
	5:  "description",
	6:  "forSale",
	7:  "stock",
	8:  "styleHeadDrawing",
	9:  "createdAt",
	10: "updatedAt",
	11: "deletedAt",
	12: "spuID",
	13: "saleAttr",
	14: "historyID",
	15: "lockStock",
}

type SkuInfo struct {
	SkuID            int64   `thrift:"skuID,1,required" frugal:"1,required,i64" json:"skuID"`
	CreatorID        int64   `thrift:"creatorID,2,required" frugal:"2,required,i64" json:"creatorID"`
	Price            float64 `thrift:"price,3,required" frugal:"3,required,double" json:"price"`
	Name             string  `thrift:"name,4,required" frugal:"4,required,string" json:"name"`
	ForSale          int32   `thrift:"forSale,5,required" frugal:"5,required,i32" json:"forSale"`
	LockStock        int64   `thrift:"lockStock,6,required" frugal:"6,required,i64" json:"lockStock"`
	StyleHeadDrawing string  `thrift:"styleHeadDrawing,7,required" frugal:"7,required,string" json:"styleHeadDrawing"`
	SpuID            int64   `thrift:"spuID,8,required" frugal:"8,required,i64" json:"spuID"`
	HistoryID        int64   `thrift:"historyID,9,required" frugal:"9,required,i64" json:"historyID"`
}

func NewSkuInfo() *SkuInfo {
	return &SkuInfo{}
}

func (p *SkuInfo) InitDefault() {
}

func (p *SkuInfo) GetSkuID() (v int64) {
	return p.SkuID
}

func (p *SkuInfo) GetCreatorID() (v int64) {
	return p.CreatorID
}

func (p *SkuInfo) GetPrice() (v float64) {
	return p.Price
}

func (p *SkuInfo) GetName() (v string) {
	return p.Name
}

func (p *SkuInfo) GetForSale() (v int32) {
	return p.ForSale
}

func (p *SkuInfo) GetLockStock() (v int64) {
	return p.LockStock
}

func (p *SkuInfo) GetStyleHeadDrawing() (v string) {
	return p.StyleHeadDrawing
}

func (p *SkuInfo) GetSpuID() (v int64) {
	return p.SpuID
}

func (p *SkuInfo) GetHistoryID() (v int64) {
	return p.HistoryID
}
func (p *SkuInfo) SetSkuID(val int64) {
	p.SkuID = val
}
func (p *SkuInfo) SetCreatorID(val int64) {
	p.CreatorID = val
}
func (p *SkuInfo) SetPrice(val float64) {
	p.Price = val
}
func (p *SkuInfo) SetName(val string) {
	p.Name = val
}
func (p *SkuInfo) SetForSale(val int32) {
	p.ForSale = val
}
func (p *SkuInfo) SetLockStock(val int64) {
	p.LockStock = val
}
func (p *SkuInfo) SetStyleHeadDrawing(val string) {
	p.StyleHeadDrawing = val
}
func (p *SkuInfo) SetSpuID(val int64) {
	p.SpuID = val
}
func (p *SkuInfo) SetHistoryID(val int64) {
	p.HistoryID = val
}

func (p *SkuInfo) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SkuInfo(%+v)", *p)
}

func (p *SkuInfo) DeepEqual(ano *SkuInfo) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.SkuID) {
		return false
	}
	if !p.Field2DeepEqual(ano.CreatorID) {
		return false
	}
	if !p.Field3DeepEqual(ano.Price) {
		return false
	}
	if !p.Field4DeepEqual(ano.Name) {
		return false
	}
	if !p.Field5DeepEqual(ano.ForSale) {
		return false
	}
	if !p.Field6DeepEqual(ano.LockStock) {
		return false
	}
	if !p.Field7DeepEqual(ano.StyleHeadDrawing) {
		return false
	}
	if !p.Field8DeepEqual(ano.SpuID) {
		return false
	}
	if !p.Field9DeepEqual(ano.HistoryID) {
		return false
	}
	return true
}

func (p *SkuInfo) Field1DeepEqual(src int64) bool {

	if p.SkuID != src {
		return false
	}
	return true
}
func (p *SkuInfo) Field2DeepEqual(src int64) bool {

	if p.CreatorID != src {
		return false
	}
	return true
}
func (p *SkuInfo) Field3DeepEqual(src float64) bool {

	if p.Price != src {
		return false
	}
	return true
}
func (p *SkuInfo) Field4DeepEqual(src string) bool {

	if strings.Compare(p.Name, src) != 0 {
		return false
	}
	return true
}
func (p *SkuInfo) Field5DeepEqual(src int32) bool {

	if p.ForSale != src {
		return false
	}
	return true
}
func (p *SkuInfo) Field6DeepEqual(src int64) bool {

	if p.LockStock != src {
		return false
	}
	return true
}
func (p *SkuInfo) Field7DeepEqual(src string) bool {

	if strings.Compare(p.StyleHeadDrawing, src) != 0 {
		return false
	}
	return true
}
func (p *SkuInfo) Field8DeepEqual(src int64) bool {

	if p.SpuID != src {
		return false
	}
	return true
}
func (p *SkuInfo) Field9DeepEqual(src int64) bool {

	if p.HistoryID != src {
		return false
	}
	return true
}

var fieldIDToName_SkuInfo = map[int16]string{
	1: "skuID",
	2: "creatorID",
	3: "price",
	4: "name",
	5: "forSale",
	6: "lockStock",
	7: "styleHeadDrawing",
	8: "spuID",
	9: "historyID",
}

type PriceHistory struct {
	HistoryID   int64  `thrift:"historyID,1,required" frugal:"1,required,i64" json:"historyID"`
	SkuID       int64  `thrift:"skuID,2,required" frugal:"2,required,i64" json:"skuID"`
	Price       int64  `thrift:"price,3,required" frugal:"3,required,i64" json:"price"`
	CreatedAt   int64  `thrift:"createdAt,4,required" frugal:"4,required,i64" json:"createdAt"`
	PrevVersion *int64 `thrift:"prevVersion,5,optional" frugal:"5,optional,i64" json:"prevVersion,omitempty"`
}

func NewPriceHistory() *PriceHistory {
	return &PriceHistory{}
}

func (p *PriceHistory) InitDefault() {
}

func (p *PriceHistory) GetHistoryID() (v int64) {
	return p.HistoryID
}

func (p *PriceHistory) GetSkuID() (v int64) {
	return p.SkuID
}

func (p *PriceHistory) GetPrice() (v int64) {
	return p.Price
}

func (p *PriceHistory) GetCreatedAt() (v int64) {
	return p.CreatedAt
}

var PriceHistory_PrevVersion_DEFAULT int64

func (p *PriceHistory) GetPrevVersion() (v int64) {
	if !p.IsSetPrevVersion() {
		return PriceHistory_PrevVersion_DEFAULT
	}
	return *p.PrevVersion
}
func (p *PriceHistory) SetHistoryID(val int64) {
	p.HistoryID = val
}
func (p *PriceHistory) SetSkuID(val int64) {
	p.SkuID = val
}
func (p *PriceHistory) SetPrice(val int64) {
	p.Price = val
}
func (p *PriceHistory) SetCreatedAt(val int64) {
	p.CreatedAt = val
}
func (p *PriceHistory) SetPrevVersion(val *int64) {
	p.PrevVersion = val
}

func (p *PriceHistory) IsSetPrevVersion() bool {
	return p.PrevVersion != nil
}

func (p *PriceHistory) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PriceHistory(%+v)", *p)
}

func (p *PriceHistory) DeepEqual(ano *PriceHistory) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.HistoryID) {
		return false
	}
	if !p.Field2DeepEqual(ano.SkuID) {
		return false
	}
	if !p.Field3DeepEqual(ano.Price) {
		return false
	}
	if !p.Field4DeepEqual(ano.CreatedAt) {
		return false
	}
	if !p.Field5DeepEqual(ano.PrevVersion) {
		return false
	}
	return true
}

func (p *PriceHistory) Field1DeepEqual(src int64) bool {

	if p.HistoryID != src {
		return false
	}
	return true
}
func (p *PriceHistory) Field2DeepEqual(src int64) bool {

	if p.SkuID != src {
		return false
	}
	return true
}
func (p *PriceHistory) Field3DeepEqual(src int64) bool {

	if p.Price != src {
		return false
	}
	return true
}
func (p *PriceHistory) Field4DeepEqual(src int64) bool {

	if p.CreatedAt != src {
		return false
	}
	return true
}
func (p *PriceHistory) Field5DeepEqual(src *int64) bool {

	if p.PrevVersion == src {
		return true
	} else if p.PrevVersion == nil || src == nil {
		return false
	}
	if *p.PrevVersion != *src {
		return false
	}
	return true
}

var fieldIDToName_PriceHistory = map[int16]string{
	1: "historyID",
	2: "skuID",
	3: "price",
	4: "createdAt",
	5: "prevVersion",
}

type OrderGoods struct {
	MerchantID       int64   `thrift:"MerchantID,1,required" frugal:"1,required,i64" json:"MerchantID"`
	GoodsID          int64   `thrift:"GoodsID,2,required" frugal:"2,required,i64" json:"GoodsID"`
	GoodsName        string  `thrift:"GoodsName,3,required" frugal:"3,required,string" json:"GoodsName"`
	GoodsHeadDrawing string  `thrift:"GoodsHeadDrawing,4,required" frugal:"4,required,string" json:"GoodsHeadDrawing"`
	StyleID          int64   `thrift:"StyleID,5,required" frugal:"5,required,i64" json:"StyleID"`
	StyleName        string  `thrift:"StyleName,6,required" frugal:"6,required,string" json:"StyleName"`
	StyleHeadDrawing string  `thrift:"StyleHeadDrawing,7,required" frugal:"7,required,string" json:"StyleHeadDrawing"`
	OriginCast       float64 `thrift:"OriginCast,8,required" frugal:"8,required,double" json:"OriginCast"`
	SaleCast         float64 `thrift:"SaleCast,9,required" frugal:"9,required,double" json:"SaleCast"`
	PurchaseQuantity int64   `thrift:"PurchaseQuantity,10,required" frugal:"10,required,i64" json:"PurchaseQuantity"`
	PaymentAmount    float64 `thrift:"PaymentAmount,11,required" frugal:"11,required,double" json:"PaymentAmount"`
	FreightAmount    float64 `thrift:"FreightAmount,12,required" frugal:"12,required,double" json:"FreightAmount"`
	SettlementAmount float64 `thrift:"SettlementAmount,13,required" frugal:"13,required,double" json:"SettlementAmount"`
	DiscountAmount   float64 `thrift:"DiscountAmount,14,required" frugal:"14,required,double" json:"DiscountAmount"`
	SingleCast       float64 `thrift:"SingleCast,15,required" frugal:"15,required,double" json:"SingleCast"`
	CouponID         int64   `thrift:"CouponID,16" frugal:"16,default,i64" json:"CouponID"`
}

func NewOrderGoods() *OrderGoods {
	return &OrderGoods{}
}

func (p *OrderGoods) InitDefault() {
}

func (p *OrderGoods) GetMerchantID() (v int64) {
	return p.MerchantID
}

func (p *OrderGoods) GetGoodsID() (v int64) {
	return p.GoodsID
}

func (p *OrderGoods) GetGoodsName() (v string) {
	return p.GoodsName
}

func (p *OrderGoods) GetGoodsHeadDrawing() (v string) {
	return p.GoodsHeadDrawing
}

func (p *OrderGoods) GetStyleID() (v int64) {
	return p.StyleID
}

func (p *OrderGoods) GetStyleName() (v string) {
	return p.StyleName
}

func (p *OrderGoods) GetStyleHeadDrawing() (v string) {
	return p.StyleHeadDrawing
}

func (p *OrderGoods) GetOriginCast() (v float64) {
	return p.OriginCast
}

func (p *OrderGoods) GetSaleCast() (v float64) {
	return p.SaleCast
}

func (p *OrderGoods) GetPurchaseQuantity() (v int64) {
	return p.PurchaseQuantity
}

func (p *OrderGoods) GetPaymentAmount() (v float64) {
	return p.PaymentAmount
}

func (p *OrderGoods) GetFreightAmount() (v float64) {
	return p.FreightAmount
}

func (p *OrderGoods) GetSettlementAmount() (v float64) {
	return p.SettlementAmount
}

func (p *OrderGoods) GetDiscountAmount() (v float64) {
	return p.DiscountAmount
}

func (p *OrderGoods) GetSingleCast() (v float64) {
	return p.SingleCast
}

func (p *OrderGoods) GetCouponID() (v int64) {
	return p.CouponID
}
func (p *OrderGoods) SetMerchantID(val int64) {
	p.MerchantID = val
}
func (p *OrderGoods) SetGoodsID(val int64) {
	p.GoodsID = val
}
func (p *OrderGoods) SetGoodsName(val string) {
	p.GoodsName = val
}
func (p *OrderGoods) SetGoodsHeadDrawing(val string) {
	p.GoodsHeadDrawing = val
}
func (p *OrderGoods) SetStyleID(val int64) {
	p.StyleID = val
}
func (p *OrderGoods) SetStyleName(val string) {
	p.StyleName = val
}
func (p *OrderGoods) SetStyleHeadDrawing(val string) {
	p.StyleHeadDrawing = val
}
func (p *OrderGoods) SetOriginCast(val float64) {
	p.OriginCast = val
}
func (p *OrderGoods) SetSaleCast(val float64) {
	p.SaleCast = val
}
func (p *OrderGoods) SetPurchaseQuantity(val int64) {
	p.PurchaseQuantity = val
}
func (p *OrderGoods) SetPaymentAmount(val float64) {
	p.PaymentAmount = val
}
func (p *OrderGoods) SetFreightAmount(val float64) {
	p.FreightAmount = val
}
func (p *OrderGoods) SetSettlementAmount(val float64) {
	p.SettlementAmount = val
}
func (p *OrderGoods) SetDiscountAmount(val float64) {
	p.DiscountAmount = val
}
func (p *OrderGoods) SetSingleCast(val float64) {
	p.SingleCast = val
}
func (p *OrderGoods) SetCouponID(val int64) {
	p.CouponID = val
}

func (p *OrderGoods) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("OrderGoods(%+v)", *p)
}

func (p *OrderGoods) DeepEqual(ano *OrderGoods) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.MerchantID) {
		return false
	}
	if !p.Field2DeepEqual(ano.GoodsID) {
		return false
	}
	if !p.Field3DeepEqual(ano.GoodsName) {
		return false
	}
	if !p.Field4DeepEqual(ano.GoodsHeadDrawing) {
		return false
	}
	if !p.Field5DeepEqual(ano.StyleID) {
		return false
	}
	if !p.Field6DeepEqual(ano.StyleName) {
		return false
	}
	if !p.Field7DeepEqual(ano.StyleHeadDrawing) {
		return false
	}
	if !p.Field8DeepEqual(ano.OriginCast) {
		return false
	}
	if !p.Field9DeepEqual(ano.SaleCast) {
		return false
	}
	if !p.Field10DeepEqual(ano.PurchaseQuantity) {
		return false
	}
	if !p.Field11DeepEqual(ano.PaymentAmount) {
		return false
	}
	if !p.Field12DeepEqual(ano.FreightAmount) {
		return false
	}
	if !p.Field13DeepEqual(ano.SettlementAmount) {
		return false
	}
	if !p.Field14DeepEqual(ano.DiscountAmount) {
		return false
	}
	if !p.Field15DeepEqual(ano.SingleCast) {
		return false
	}
	if !p.Field16DeepEqual(ano.CouponID) {
		return false
	}
	return true
}

func (p *OrderGoods) Field1DeepEqual(src int64) bool {

	if p.MerchantID != src {
		return false
	}
	return true
}
func (p *OrderGoods) Field2DeepEqual(src int64) bool {

	if p.GoodsID != src {
		return false
	}
	return true
}
func (p *OrderGoods) Field3DeepEqual(src string) bool {

	if strings.Compare(p.GoodsName, src) != 0 {
		return false
	}
	return true
}
func (p *OrderGoods) Field4DeepEqual(src string) bool {

	if strings.Compare(p.GoodsHeadDrawing, src) != 0 {
		return false
	}
	return true
}
func (p *OrderGoods) Field5DeepEqual(src int64) bool {

	if p.StyleID != src {
		return false
	}
	return true
}
func (p *OrderGoods) Field6DeepEqual(src string) bool {

	if strings.Compare(p.StyleName, src) != 0 {
		return false
	}
	return true
}
func (p *OrderGoods) Field7DeepEqual(src string) bool {

	if strings.Compare(p.StyleHeadDrawing, src) != 0 {
		return false
	}
	return true
}
func (p *OrderGoods) Field8DeepEqual(src float64) bool {

	if p.OriginCast != src {
		return false
	}
	return true
}
func (p *OrderGoods) Field9DeepEqual(src float64) bool {

	if p.SaleCast != src {
		return false
	}
	return true
}
func (p *OrderGoods) Field10DeepEqual(src int64) bool {

	if p.PurchaseQuantity != src {
		return false
	}
	return true
}
func (p *OrderGoods) Field11DeepEqual(src float64) bool {

	if p.PaymentAmount != src {
		return false
	}
	return true
}
func (p *OrderGoods) Field12DeepEqual(src float64) bool {

	if p.FreightAmount != src {
		return false
	}
	return true
}
func (p *OrderGoods) Field13DeepEqual(src float64) bool {

	if p.SettlementAmount != src {
		return false
	}
	return true
}
func (p *OrderGoods) Field14DeepEqual(src float64) bool {

	if p.DiscountAmount != src {
		return false
	}
	return true
}
func (p *OrderGoods) Field15DeepEqual(src float64) bool {

	if p.SingleCast != src {
		return false
	}
	return true
}
func (p *OrderGoods) Field16DeepEqual(src int64) bool {

	if p.CouponID != src {
		return false
	}
	return true
}

var fieldIDToName_OrderGoods = map[int16]string{
	1:  "MerchantID",
	2:  "GoodsID",
	3:  "GoodsName",
	4:  "GoodsHeadDrawing",
	5:  "StyleID",
	6:  "StyleName",
	7:  "StyleHeadDrawing",
	8:  "OriginCast",
	9:  "SaleCast",
	10: "PurchaseQuantity",
	11: "PaymentAmount",
	12: "FreightAmount",
	13: "SettlementAmount",
	14: "DiscountAmount",
	15: "SingleCast",
	16: "CouponID",
}

type BaseOrderGoods struct {
	MerchantID       int64 `thrift:"MerchantID,1,required" frugal:"1,required,i64" json:"MerchantID"`
	GoodsID          int64 `thrift:"GoodsID,2,required" frugal:"2,required,i64" json:"GoodsID"`
	StyleID          int64 `thrift:"StyleID,3,required" frugal:"3,required,i64" json:"StyleID"`
	PurchaseQuantity int64 `thrift:"PurchaseQuantity,4,required" frugal:"4,required,i64" json:"PurchaseQuantity"`
	CouponID         int64 `thrift:"CouponID,5" frugal:"5,default,i64" json:"CouponID"`
}

func NewBaseOrderGoods() *BaseOrderGoods {
	return &BaseOrderGoods{}
}

func (p *BaseOrderGoods) InitDefault() {
}

func (p *BaseOrderGoods) GetMerchantID() (v int64) {
	return p.MerchantID
}

func (p *BaseOrderGoods) GetGoodsID() (v int64) {
	return p.GoodsID
}

func (p *BaseOrderGoods) GetStyleID() (v int64) {
	return p.StyleID
}

func (p *BaseOrderGoods) GetPurchaseQuantity() (v int64) {
	return p.PurchaseQuantity
}

func (p *BaseOrderGoods) GetCouponID() (v int64) {
	return p.CouponID
}
func (p *BaseOrderGoods) SetMerchantID(val int64) {
	p.MerchantID = val
}
func (p *BaseOrderGoods) SetGoodsID(val int64) {
	p.GoodsID = val
}
func (p *BaseOrderGoods) SetStyleID(val int64) {
	p.StyleID = val
}
func (p *BaseOrderGoods) SetPurchaseQuantity(val int64) {
	p.PurchaseQuantity = val
}
func (p *BaseOrderGoods) SetCouponID(val int64) {
	p.CouponID = val
}

func (p *BaseOrderGoods) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BaseOrderGoods(%+v)", *p)
}

func (p *BaseOrderGoods) DeepEqual(ano *BaseOrderGoods) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.MerchantID) {
		return false
	}
	if !p.Field2DeepEqual(ano.GoodsID) {
		return false
	}
	if !p.Field3DeepEqual(ano.StyleID) {
		return false
	}
	if !p.Field4DeepEqual(ano.PurchaseQuantity) {
		return false
	}
	if !p.Field5DeepEqual(ano.CouponID) {
		return false
	}
	return true
}

func (p *BaseOrderGoods) Field1DeepEqual(src int64) bool {

	if p.MerchantID != src {
		return false
	}
	return true
}
func (p *BaseOrderGoods) Field2DeepEqual(src int64) bool {

	if p.GoodsID != src {
		return false
	}
	return true
}
func (p *BaseOrderGoods) Field3DeepEqual(src int64) bool {

	if p.StyleID != src {
		return false
	}
	return true
}
func (p *BaseOrderGoods) Field4DeepEqual(src int64) bool {

	if p.PurchaseQuantity != src {
		return false
	}
	return true
}
func (p *BaseOrderGoods) Field5DeepEqual(src int64) bool {

	if p.CouponID != src {
		return false
	}
	return true
}

var fieldIDToName_BaseOrderGoods = map[int16]string{
	1: "MerchantID",
	2: "GoodsID",
	3: "StyleID",
	4: "PurchaseQuantity",
	5: "CouponID",
}

type CreditCardInfo struct {
	MaskedCreditCardNumber    string `thrift:"maskedCreditCardNumber,1,required" frugal:"1,required,string" json:"maskedCreditCardNumber"`
	CreditCardExpirationYear  int64  `thrift:"creditCardExpirationYear,2,required" frugal:"2,required,i64" json:"creditCardExpirationYear"`
	CreditCardExpirationMonth int64  `thrift:"creditCardExpirationMonth,3,required" frugal:"3,required,i64" json:"creditCardExpirationMonth"`
	CreditCardCvv             int64  `thrift:"creditCardCvv,4,required" frugal:"4,required,i64" json:"creditCardCvv"`
}

func NewCreditCardInfo() *CreditCardInfo {
	return &CreditCardInfo{}
}

func (p *CreditCardInfo) InitDefault() {
}

func (p *CreditCardInfo) GetMaskedCreditCardNumber() (v string) {
	return p.MaskedCreditCardNumber
}

func (p *CreditCardInfo) GetCreditCardExpirationYear() (v int64) {
	return p.CreditCardExpirationYear
}

func (p *CreditCardInfo) GetCreditCardExpirationMonth() (v int64) {
	return p.CreditCardExpirationMonth
}

func (p *CreditCardInfo) GetCreditCardCvv() (v int64) {
	return p.CreditCardCvv
}
func (p *CreditCardInfo) SetMaskedCreditCardNumber(val string) {
	p.MaskedCreditCardNumber = val
}
func (p *CreditCardInfo) SetCreditCardExpirationYear(val int64) {
	p.CreditCardExpirationYear = val
}
func (p *CreditCardInfo) SetCreditCardExpirationMonth(val int64) {
	p.CreditCardExpirationMonth = val
}
func (p *CreditCardInfo) SetCreditCardCvv(val int64) {
	p.CreditCardCvv = val
}

func (p *CreditCardInfo) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreditCardInfo(%+v)", *p)
}

func (p *CreditCardInfo) DeepEqual(ano *CreditCardInfo) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.MaskedCreditCardNumber) {
		return false
	}
	if !p.Field2DeepEqual(ano.CreditCardExpirationYear) {
		return false
	}
	if !p.Field3DeepEqual(ano.CreditCardExpirationMonth) {
		return false
	}
	if !p.Field4DeepEqual(ano.CreditCardCvv) {
		return false
	}
	return true
}

func (p *CreditCardInfo) Field1DeepEqual(src string) bool {

	if strings.Compare(p.MaskedCreditCardNumber, src) != 0 {
		return false
	}
	return true
}
func (p *CreditCardInfo) Field2DeepEqual(src int64) bool {

	if p.CreditCardExpirationYear != src {
		return false
	}
	return true
}
func (p *CreditCardInfo) Field3DeepEqual(src int64) bool {

	if p.CreditCardExpirationMonth != src {
		return false
	}
	return true
}
func (p *CreditCardInfo) Field4DeepEqual(src int64) bool {

	if p.CreditCardCvv != src {
		return false
	}
	return true
}

var fieldIDToName_CreditCardInfo = map[int16]string{
	1: "maskedCreditCardNumber",
	2: "creditCardExpirationYear",
	3: "creditCardExpirationMonth",
	4: "creditCardCvv",
}
