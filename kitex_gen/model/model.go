/*
Copyright 2024 The west2-online Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by thriftgo (0.3.18). DO NOT EDIT.

package model

import (
	"fmt"
	"strings"
)

type BaseResp struct {
	Code int64  `thrift:"code,1" frugal:"1,default,i64" json:"code"`
	Msg  string `thrift:"msg,2" frugal:"2,default,string" json:"msg"`
}

func NewBaseResp() *BaseResp {
	return &BaseResp{}
}

func (p *BaseResp) InitDefault() {
}

func (p *BaseResp) GetCode() (v int64) {
	return p.Code
}

func (p *BaseResp) GetMsg() (v string) {
	return p.Msg
}
func (p *BaseResp) SetCode(val int64) {
	p.Code = val
}
func (p *BaseResp) SetMsg(val string) {
	p.Msg = val
}

func (p *BaseResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BaseResp(%+v)", *p)
}

func (p *BaseResp) DeepEqual(ano *BaseResp) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Code) {
		return false
	}
	if !p.Field2DeepEqual(ano.Msg) {
		return false
	}
	return true
}

func (p *BaseResp) Field1DeepEqual(src int64) bool {

	if p.Code != src {
		return false
	}
	return true
}
func (p *BaseResp) Field2DeepEqual(src string) bool {

	if strings.Compare(p.Msg, src) != 0 {
		return false
	}
	return true
}

var fieldIDToName_BaseResp = map[int16]string{
	1: "code",
	2: "msg",
}

type UserInfo struct {
	UserId int64  `thrift:"userId,1" frugal:"1,default,i64" json:"userId"`
	Name   string `thrift:"name,2" frugal:"2,default,string" json:"name"`
}

func NewUserInfo() *UserInfo {
	return &UserInfo{}
}

func (p *UserInfo) InitDefault() {
}

func (p *UserInfo) GetUserId() (v int64) {
	return p.UserId
}

func (p *UserInfo) GetName() (v string) {
	return p.Name
}
func (p *UserInfo) SetUserId(val int64) {
	p.UserId = val
}
func (p *UserInfo) SetName(val string) {
	p.Name = val
}

func (p *UserInfo) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserInfo(%+v)", *p)
}

func (p *UserInfo) DeepEqual(ano *UserInfo) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.UserId) {
		return false
	}
	if !p.Field2DeepEqual(ano.Name) {
		return false
	}
	return true
}

func (p *UserInfo) Field1DeepEqual(src int64) bool {

	if p.UserId != src {
		return false
	}
	return true
}
func (p *UserInfo) Field2DeepEqual(src string) bool {

	if strings.Compare(p.Name, src) != 0 {
		return false
	}
	return true
}

var fieldIDToName_UserInfo = map[int16]string{
	1: "userId",
	2: "name",
}

type LoginData struct {
	UserId int64 `thrift:"userId,1" frugal:"1,default,i64" json:"userId"`
}

func NewLoginData() *LoginData {
	return &LoginData{}
}

func (p *LoginData) InitDefault() {
}

func (p *LoginData) GetUserId() (v int64) {
	return p.UserId
}
func (p *LoginData) SetUserId(val int64) {
	p.UserId = val
}

func (p *LoginData) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LoginData(%+v)", *p)
}

func (p *LoginData) DeepEqual(ano *LoginData) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.UserId) {
		return false
	}
	return true
}

func (p *LoginData) Field1DeepEqual(src int64) bool {

	if p.UserId != src {
		return false
	}
	return true
}

var fieldIDToName_LoginData = map[int16]string{
	1: "userId",
}

type CategoryInfo struct {
	CategoryID int64  `thrift:"categoryID,1,required" frugal:"1,required,i64" json:"categoryID"`
	Name       string `thrift:"name,2,required" frugal:"2,required,string" json:"name"`
}

func NewCategoryInfo() *CategoryInfo {
	return &CategoryInfo{}
}

func (p *CategoryInfo) InitDefault() {
}

func (p *CategoryInfo) GetCategoryID() (v int64) {
	return p.CategoryID
}

func (p *CategoryInfo) GetName() (v string) {
	return p.Name
}
func (p *CategoryInfo) SetCategoryID(val int64) {
	p.CategoryID = val
}
func (p *CategoryInfo) SetName(val string) {
	p.Name = val
}

func (p *CategoryInfo) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CategoryInfo(%+v)", *p)
}

func (p *CategoryInfo) DeepEqual(ano *CategoryInfo) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.CategoryID) {
		return false
	}
	if !p.Field2DeepEqual(ano.Name) {
		return false
	}
	return true
}

func (p *CategoryInfo) Field1DeepEqual(src int64) bool {

	if p.CategoryID != src {
		return false
	}
	return true
}
func (p *CategoryInfo) Field2DeepEqual(src string) bool {

	if strings.Compare(p.Name, src) != 0 {
		return false
	}
	return true
}

var fieldIDToName_CategoryInfo = map[int16]string{
	1: "categoryID",
	2: "name",
}

type Coupon struct {
	CouponID       int64    `thrift:"couponID,1,required" frugal:"1,required,i64" json:"couponID"`
	CreatorID      int64    `thrift:"creatorID,2,required" frugal:"2,required,i64" json:"creatorID"`
	DeadlineForGet int64    `thrift:"deadlineForGet,3,required" frugal:"3,required,i64" json:"deadlineForGet"`
	Name           string   `thrift:"name,4,required" frugal:"4,required,string" json:"name"`
	TypeInfo       int32    `thrift:"typeInfo,5,required" frugal:"5,required,i32" json:"typeInfo"`
	ConditionCost  float64  `thrift:"conditionCost,6,required" frugal:"6,required,double" json:"conditionCost"`
	DiscountAmount *float64 `thrift:"discountAmount,7,optional" frugal:"7,optional,double" json:"discountAmount,omitempty"`
	Discount       *float64 `thrift:"discount,8,optional" frugal:"8,optional,double" json:"discount,omitempty"`
	RangeType      int32    `thrift:"rangeType,9,required" frugal:"9,required,i32" json:"rangeType"`
	RangeId        int64    `thrift:"rangeId,10,required" frugal:"10,required,i64" json:"rangeId"`
	ExpireTime     int64    `thrift:"expireTime,11,required" frugal:"11,required,i64" json:"expireTime"`
	Description    string   `thrift:"description,12,required" frugal:"12,required,string" json:"description"`
	CreatedAt      int64    `thrift:"createdAt,13,required" frugal:"13,required,i64" json:"createdAt"`
	UpdatedAt      *int64   `thrift:"updatedAt,14,optional" frugal:"14,optional,i64" json:"updatedAt,omitempty"`
	DeletedAt      *int64   `thrift:"deletedAt,15,optional" frugal:"15,optional,i64" json:"deletedAt,omitempty"`
}

func NewCoupon() *Coupon {
	return &Coupon{}
}

func (p *Coupon) InitDefault() {
}

func (p *Coupon) GetCouponID() (v int64) {
	return p.CouponID
}

func (p *Coupon) GetCreatorID() (v int64) {
	return p.CreatorID
}

func (p *Coupon) GetDeadlineForGet() (v int64) {
	return p.DeadlineForGet
}

func (p *Coupon) GetName() (v string) {
	return p.Name
}

func (p *Coupon) GetTypeInfo() (v int32) {
	return p.TypeInfo
}

func (p *Coupon) GetConditionCost() (v float64) {
	return p.ConditionCost
}

var Coupon_DiscountAmount_DEFAULT float64

func (p *Coupon) GetDiscountAmount() (v float64) {
	if !p.IsSetDiscountAmount() {
		return Coupon_DiscountAmount_DEFAULT
	}
	return *p.DiscountAmount
}

var Coupon_Discount_DEFAULT float64

func (p *Coupon) GetDiscount() (v float64) {
	if !p.IsSetDiscount() {
		return Coupon_Discount_DEFAULT
	}
	return *p.Discount
}

func (p *Coupon) GetRangeType() (v int32) {
	return p.RangeType
}

func (p *Coupon) GetRangeId() (v int64) {
	return p.RangeId
}

func (p *Coupon) GetExpireTime() (v int64) {
	return p.ExpireTime
}

func (p *Coupon) GetDescription() (v string) {
	return p.Description
}

func (p *Coupon) GetCreatedAt() (v int64) {
	return p.CreatedAt
}

var Coupon_UpdatedAt_DEFAULT int64

func (p *Coupon) GetUpdatedAt() (v int64) {
	if !p.IsSetUpdatedAt() {
		return Coupon_UpdatedAt_DEFAULT
	}
	return *p.UpdatedAt
}

var Coupon_DeletedAt_DEFAULT int64

func (p *Coupon) GetDeletedAt() (v int64) {
	if !p.IsSetDeletedAt() {
		return Coupon_DeletedAt_DEFAULT
	}
	return *p.DeletedAt
}
func (p *Coupon) SetCouponID(val int64) {
	p.CouponID = val
}
func (p *Coupon) SetCreatorID(val int64) {
	p.CreatorID = val
}
func (p *Coupon) SetDeadlineForGet(val int64) {
	p.DeadlineForGet = val
}
func (p *Coupon) SetName(val string) {
	p.Name = val
}
func (p *Coupon) SetTypeInfo(val int32) {
	p.TypeInfo = val
}
func (p *Coupon) SetConditionCost(val float64) {
	p.ConditionCost = val
}
func (p *Coupon) SetDiscountAmount(val *float64) {
	p.DiscountAmount = val
}
func (p *Coupon) SetDiscount(val *float64) {
	p.Discount = val
}
func (p *Coupon) SetRangeType(val int32) {
	p.RangeType = val
}
func (p *Coupon) SetRangeId(val int64) {
	p.RangeId = val
}
func (p *Coupon) SetExpireTime(val int64) {
	p.ExpireTime = val
}
func (p *Coupon) SetDescription(val string) {
	p.Description = val
}
func (p *Coupon) SetCreatedAt(val int64) {
	p.CreatedAt = val
}
func (p *Coupon) SetUpdatedAt(val *int64) {
	p.UpdatedAt = val
}
func (p *Coupon) SetDeletedAt(val *int64) {
	p.DeletedAt = val
}

func (p *Coupon) IsSetDiscountAmount() bool {
	return p.DiscountAmount != nil
}

func (p *Coupon) IsSetDiscount() bool {
	return p.Discount != nil
}

func (p *Coupon) IsSetUpdatedAt() bool {
	return p.UpdatedAt != nil
}

func (p *Coupon) IsSetDeletedAt() bool {
	return p.DeletedAt != nil
}

func (p *Coupon) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Coupon(%+v)", *p)
}

func (p *Coupon) DeepEqual(ano *Coupon) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.CouponID) {
		return false
	}
	if !p.Field2DeepEqual(ano.CreatorID) {
		return false
	}
	if !p.Field3DeepEqual(ano.DeadlineForGet) {
		return false
	}
	if !p.Field4DeepEqual(ano.Name) {
		return false
	}
	if !p.Field5DeepEqual(ano.TypeInfo) {
		return false
	}
	if !p.Field6DeepEqual(ano.ConditionCost) {
		return false
	}
	if !p.Field7DeepEqual(ano.DiscountAmount) {
		return false
	}
	if !p.Field8DeepEqual(ano.Discount) {
		return false
	}
	if !p.Field9DeepEqual(ano.RangeType) {
		return false
	}
	if !p.Field10DeepEqual(ano.RangeId) {
		return false
	}
	if !p.Field11DeepEqual(ano.ExpireTime) {
		return false
	}
	if !p.Field12DeepEqual(ano.Description) {
		return false
	}
	if !p.Field13DeepEqual(ano.CreatedAt) {
		return false
	}
	if !p.Field14DeepEqual(ano.UpdatedAt) {
		return false
	}
	if !p.Field15DeepEqual(ano.DeletedAt) {
		return false
	}
	return true
}

func (p *Coupon) Field1DeepEqual(src int64) bool {

	if p.CouponID != src {
		return false
	}
	return true
}
func (p *Coupon) Field2DeepEqual(src int64) bool {

	if p.CreatorID != src {
		return false
	}
	return true
}
func (p *Coupon) Field3DeepEqual(src int64) bool {

	if p.DeadlineForGet != src {
		return false
	}
	return true
}
func (p *Coupon) Field4DeepEqual(src string) bool {

	if strings.Compare(p.Name, src) != 0 {
		return false
	}
	return true
}
func (p *Coupon) Field5DeepEqual(src int32) bool {

	if p.TypeInfo != src {
		return false
	}
	return true
}
func (p *Coupon) Field6DeepEqual(src float64) bool {

	if p.ConditionCost != src {
		return false
	}
	return true
}
func (p *Coupon) Field7DeepEqual(src *float64) bool {

	if p.DiscountAmount == src {
		return true
	} else if p.DiscountAmount == nil || src == nil {
		return false
	}
	if *p.DiscountAmount != *src {
		return false
	}
	return true
}
func (p *Coupon) Field8DeepEqual(src *float64) bool {

	if p.Discount == src {
		return true
	} else if p.Discount == nil || src == nil {
		return false
	}
	if *p.Discount != *src {
		return false
	}
	return true
}
func (p *Coupon) Field9DeepEqual(src int32) bool {

	if p.RangeType != src {
		return false
	}
	return true
}
func (p *Coupon) Field10DeepEqual(src int64) bool {

	if p.RangeId != src {
		return false
	}
	return true
}
func (p *Coupon) Field11DeepEqual(src int64) bool {

	if p.ExpireTime != src {
		return false
	}
	return true
}
func (p *Coupon) Field12DeepEqual(src string) bool {

	if strings.Compare(p.Description, src) != 0 {
		return false
	}
	return true
}
func (p *Coupon) Field13DeepEqual(src int64) bool {

	if p.CreatedAt != src {
		return false
	}
	return true
}
func (p *Coupon) Field14DeepEqual(src *int64) bool {

	if p.UpdatedAt == src {
		return true
	} else if p.UpdatedAt == nil || src == nil {
		return false
	}
	if *p.UpdatedAt != *src {
		return false
	}
	return true
}
func (p *Coupon) Field15DeepEqual(src *int64) bool {

	if p.DeletedAt == src {
		return true
	} else if p.DeletedAt == nil || src == nil {
		return false
	}
	if *p.DeletedAt != *src {
		return false
	}
	return true
}

var fieldIDToName_Coupon = map[int16]string{
	1:  "couponID",
	2:  "creatorID",
	3:  "deadlineForGet",
	4:  "name",
	5:  "typeInfo",
	6:  "conditionCost",
	7:  "discountAmount",
	8:  "discount",
	9:  "rangeType",
	10: "rangeId",
	11: "expireTime",
	12: "description",
	13: "createdAt",
	14: "updatedAt",
	15: "deletedAt",
}

type UserCoupon struct {
	CouponID           int64    `thrift:"couponID,1,required" frugal:"1,required,i64" json:"couponID"`
	CreatorID          int64    `thrift:"creatorID,2,required" frugal:"2,required,i64" json:"creatorID"`
	UserID             int64    `thrift:"userID,3,required" frugal:"3,required,i64" json:"userID"`
	Name               string   `thrift:"name,4,required" frugal:"4,required,string" json:"name"`
	TypeInfo           int32    `thrift:"typeInfo,5,required" frugal:"5,required,i32" json:"typeInfo"`
	ConditionCost      int64    `thrift:"conditionCost,6,required" frugal:"6,required,i64" json:"conditionCost"`
	DiscountAmount     *float64 `thrift:"discountAmount,7,optional" frugal:"7,optional,double" json:"discountAmount,omitempty"`
	Discount           *float64 `thrift:"discount,8,optional" frugal:"8,optional,double" json:"discount,omitempty"`
	RangeType          int64    `thrift:"rangeType,9,required" frugal:"9,required,i64" json:"rangeType"`
	RangeId            int64    `thrift:"rangeId,10,required" frugal:"10,required,i64" json:"rangeId"`
	ExpireAt           int64    `thrift:"expireAt,11,required" frugal:"11,required,i64" json:"expireAt"`
	Description        string   `thrift:"description,12,required" frugal:"12,required,string" json:"description"`
	RemainUserUseCount int64    `thrift:"remainUserUseCount,13,required" frugal:"13,required,i64" json:"remainUserUseCount"`
	CreatedAt          int64    `thrift:"createdAt,14,required" frugal:"14,required,i64" json:"createdAt"`
}

func NewUserCoupon() *UserCoupon {
	return &UserCoupon{}
}

func (p *UserCoupon) InitDefault() {
}

func (p *UserCoupon) GetCouponID() (v int64) {
	return p.CouponID
}

func (p *UserCoupon) GetCreatorID() (v int64) {
	return p.CreatorID
}

func (p *UserCoupon) GetUserID() (v int64) {
	return p.UserID
}

func (p *UserCoupon) GetName() (v string) {
	return p.Name
}

func (p *UserCoupon) GetTypeInfo() (v int32) {
	return p.TypeInfo
}

func (p *UserCoupon) GetConditionCost() (v int64) {
	return p.ConditionCost
}

var UserCoupon_DiscountAmount_DEFAULT float64

func (p *UserCoupon) GetDiscountAmount() (v float64) {
	if !p.IsSetDiscountAmount() {
		return UserCoupon_DiscountAmount_DEFAULT
	}
	return *p.DiscountAmount
}

var UserCoupon_Discount_DEFAULT float64

func (p *UserCoupon) GetDiscount() (v float64) {
	if !p.IsSetDiscount() {
		return UserCoupon_Discount_DEFAULT
	}
	return *p.Discount
}

func (p *UserCoupon) GetRangeType() (v int64) {
	return p.RangeType
}

func (p *UserCoupon) GetRangeId() (v int64) {
	return p.RangeId
}

func (p *UserCoupon) GetExpireAt() (v int64) {
	return p.ExpireAt
}

func (p *UserCoupon) GetDescription() (v string) {
	return p.Description
}

func (p *UserCoupon) GetRemainUserUseCount() (v int64) {
	return p.RemainUserUseCount
}

func (p *UserCoupon) GetCreatedAt() (v int64) {
	return p.CreatedAt
}
func (p *UserCoupon) SetCouponID(val int64) {
	p.CouponID = val
}
func (p *UserCoupon) SetCreatorID(val int64) {
	p.CreatorID = val
}
func (p *UserCoupon) SetUserID(val int64) {
	p.UserID = val
}
func (p *UserCoupon) SetName(val string) {
	p.Name = val
}
func (p *UserCoupon) SetTypeInfo(val int32) {
	p.TypeInfo = val
}
func (p *UserCoupon) SetConditionCost(val int64) {
	p.ConditionCost = val
}
func (p *UserCoupon) SetDiscountAmount(val *float64) {
	p.DiscountAmount = val
}
func (p *UserCoupon) SetDiscount(val *float64) {
	p.Discount = val
}
func (p *UserCoupon) SetRangeType(val int64) {
	p.RangeType = val
}
func (p *UserCoupon) SetRangeId(val int64) {
	p.RangeId = val
}
func (p *UserCoupon) SetExpireAt(val int64) {
	p.ExpireAt = val
}
func (p *UserCoupon) SetDescription(val string) {
	p.Description = val
}
func (p *UserCoupon) SetRemainUserUseCount(val int64) {
	p.RemainUserUseCount = val
}
func (p *UserCoupon) SetCreatedAt(val int64) {
	p.CreatedAt = val
}

func (p *UserCoupon) IsSetDiscountAmount() bool {
	return p.DiscountAmount != nil
}

func (p *UserCoupon) IsSetDiscount() bool {
	return p.Discount != nil
}

func (p *UserCoupon) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserCoupon(%+v)", *p)
}

func (p *UserCoupon) DeepEqual(ano *UserCoupon) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.CouponID) {
		return false
	}
	if !p.Field2DeepEqual(ano.CreatorID) {
		return false
	}
	if !p.Field3DeepEqual(ano.UserID) {
		return false
	}
	if !p.Field4DeepEqual(ano.Name) {
		return false
	}
	if !p.Field5DeepEqual(ano.TypeInfo) {
		return false
	}
	if !p.Field6DeepEqual(ano.ConditionCost) {
		return false
	}
	if !p.Field7DeepEqual(ano.DiscountAmount) {
		return false
	}
	if !p.Field8DeepEqual(ano.Discount) {
		return false
	}
	if !p.Field9DeepEqual(ano.RangeType) {
		return false
	}
	if !p.Field10DeepEqual(ano.RangeId) {
		return false
	}
	if !p.Field11DeepEqual(ano.ExpireAt) {
		return false
	}
	if !p.Field12DeepEqual(ano.Description) {
		return false
	}
	if !p.Field13DeepEqual(ano.RemainUserUseCount) {
		return false
	}
	if !p.Field14DeepEqual(ano.CreatedAt) {
		return false
	}
	return true
}

func (p *UserCoupon) Field1DeepEqual(src int64) bool {

	if p.CouponID != src {
		return false
	}
	return true
}
func (p *UserCoupon) Field2DeepEqual(src int64) bool {

	if p.CreatorID != src {
		return false
	}
	return true
}
func (p *UserCoupon) Field3DeepEqual(src int64) bool {

	if p.UserID != src {
		return false
	}
	return true
}
func (p *UserCoupon) Field4DeepEqual(src string) bool {

	if strings.Compare(p.Name, src) != 0 {
		return false
	}
	return true
}
func (p *UserCoupon) Field5DeepEqual(src int32) bool {

	if p.TypeInfo != src {
		return false
	}
	return true
}
func (p *UserCoupon) Field6DeepEqual(src int64) bool {

	if p.ConditionCost != src {
		return false
	}
	return true
}
func (p *UserCoupon) Field7DeepEqual(src *float64) bool {

	if p.DiscountAmount == src {
		return true
	} else if p.DiscountAmount == nil || src == nil {
		return false
	}
	if *p.DiscountAmount != *src {
		return false
	}
	return true
}
func (p *UserCoupon) Field8DeepEqual(src *float64) bool {

	if p.Discount == src {
		return true
	} else if p.Discount == nil || src == nil {
		return false
	}
	if *p.Discount != *src {
		return false
	}
	return true
}
func (p *UserCoupon) Field9DeepEqual(src int64) bool {

	if p.RangeType != src {
		return false
	}
	return true
}
func (p *UserCoupon) Field10DeepEqual(src int64) bool {

	if p.RangeId != src {
		return false
	}
	return true
}
func (p *UserCoupon) Field11DeepEqual(src int64) bool {

	if p.ExpireAt != src {
		return false
	}
	return true
}
func (p *UserCoupon) Field12DeepEqual(src string) bool {

	if strings.Compare(p.Description, src) != 0 {
		return false
	}
	return true
}
func (p *UserCoupon) Field13DeepEqual(src int64) bool {

	if p.RemainUserUseCount != src {
		return false
	}
	return true
}
func (p *UserCoupon) Field14DeepEqual(src int64) bool {

	if p.CreatedAt != src {
		return false
	}
	return true
}

var fieldIDToName_UserCoupon = map[int16]string{
	1:  "couponID",
	2:  "creatorID",
	3:  "userID",
	4:  "name",
	5:  "typeInfo",
	6:  "conditionCost",
	7:  "discountAmount",
	8:  "discount",
	9:  "rangeType",
	10: "rangeId",
	11: "expireAt",
	12: "description",
	13: "remainUserUseCount",
	14: "createdAt",
}

type AttrValue struct {
	SaleAttr  string `thrift:"saleAttr,1,required" frugal:"1,required,string" json:"saleAttr"`
	SaleValue string `thrift:"saleValue,2,required" frugal:"2,required,string" json:"saleValue"`
}

func NewAttrValue() *AttrValue {
	return &AttrValue{}
}

func (p *AttrValue) InitDefault() {
}

func (p *AttrValue) GetSaleAttr() (v string) {
	return p.SaleAttr
}

func (p *AttrValue) GetSaleValue() (v string) {
	return p.SaleValue
}
func (p *AttrValue) SetSaleAttr(val string) {
	p.SaleAttr = val
}
func (p *AttrValue) SetSaleValue(val string) {
	p.SaleValue = val
}

func (p *AttrValue) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AttrValue(%+v)", *p)
}

func (p *AttrValue) DeepEqual(ano *AttrValue) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.SaleAttr) {
		return false
	}
	if !p.Field2DeepEqual(ano.SaleValue) {
		return false
	}
	return true
}

func (p *AttrValue) Field1DeepEqual(src string) bool {

	if strings.Compare(p.SaleAttr, src) != 0 {
		return false
	}
	return true
}
func (p *AttrValue) Field2DeepEqual(src string) bool {

	if strings.Compare(p.SaleValue, src) != 0 {
		return false
	}
	return true
}

var fieldIDToName_AttrValue = map[int16]string{
	1: "saleAttr",
	2: "saleValue",
}

type SpuImage struct {
	ImageID   int64  `thrift:"imageID,1,required" frugal:"1,required,i64" json:"imageID"`
	SpuID     int64  `thrift:"spuID,2,required" frugal:"2,required,i64" json:"spuID"`
	Url       string `thrift:"url,3,required" frugal:"3,required,string" json:"url"`
	CreatedAt int64  `thrift:"createdAt,4,required" frugal:"4,required,i64" json:"createdAt"`
	DeletedAt *int64 `thrift:"deletedAt,5,optional" frugal:"5,optional,i64" json:"deletedAt,omitempty"`
	UpdatedAt int64  `thrift:"updatedAt,6,required" frugal:"6,required,i64" json:"updatedAt"`
}

func NewSpuImage() *SpuImage {
	return &SpuImage{}
}

func (p *SpuImage) InitDefault() {
}

func (p *SpuImage) GetImageID() (v int64) {
	return p.ImageID
}

func (p *SpuImage) GetSpuID() (v int64) {
	return p.SpuID
}

func (p *SpuImage) GetUrl() (v string) {
	return p.Url
}

func (p *SpuImage) GetCreatedAt() (v int64) {
	return p.CreatedAt
}

var SpuImage_DeletedAt_DEFAULT int64

func (p *SpuImage) GetDeletedAt() (v int64) {
	if !p.IsSetDeletedAt() {
		return SpuImage_DeletedAt_DEFAULT
	}
	return *p.DeletedAt
}

func (p *SpuImage) GetUpdatedAt() (v int64) {
	return p.UpdatedAt
}
func (p *SpuImage) SetImageID(val int64) {
	p.ImageID = val
}
func (p *SpuImage) SetSpuID(val int64) {
	p.SpuID = val
}
func (p *SpuImage) SetUrl(val string) {
	p.Url = val
}
func (p *SpuImage) SetCreatedAt(val int64) {
	p.CreatedAt = val
}
func (p *SpuImage) SetDeletedAt(val *int64) {
	p.DeletedAt = val
}
func (p *SpuImage) SetUpdatedAt(val int64) {
	p.UpdatedAt = val
}

func (p *SpuImage) IsSetDeletedAt() bool {
	return p.DeletedAt != nil
}

func (p *SpuImage) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SpuImage(%+v)", *p)
}

func (p *SpuImage) DeepEqual(ano *SpuImage) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.ImageID) {
		return false
	}
	if !p.Field2DeepEqual(ano.SpuID) {
		return false
	}
	if !p.Field3DeepEqual(ano.Url) {
		return false
	}
	if !p.Field4DeepEqual(ano.CreatedAt) {
		return false
	}
	if !p.Field5DeepEqual(ano.DeletedAt) {
		return false
	}
	if !p.Field6DeepEqual(ano.UpdatedAt) {
		return false
	}
	return true
}

func (p *SpuImage) Field1DeepEqual(src int64) bool {

	if p.ImageID != src {
		return false
	}
	return true
}
func (p *SpuImage) Field2DeepEqual(src int64) bool {

	if p.SpuID != src {
		return false
	}
	return true
}
func (p *SpuImage) Field3DeepEqual(src string) bool {

	if strings.Compare(p.Url, src) != 0 {
		return false
	}
	return true
}
func (p *SpuImage) Field4DeepEqual(src int64) bool {

	if p.CreatedAt != src {
		return false
	}
	return true
}
func (p *SpuImage) Field5DeepEqual(src *int64) bool {

	if p.DeletedAt == src {
		return true
	} else if p.DeletedAt == nil || src == nil {
		return false
	}
	if *p.DeletedAt != *src {
		return false
	}
	return true
}
func (p *SpuImage) Field6DeepEqual(src int64) bool {

	if p.UpdatedAt != src {
		return false
	}
	return true
}

var fieldIDToName_SpuImage = map[int16]string{
	1: "imageID",
	2: "spuID",
	3: "url",
	4: "createdAt",
	5: "deletedAt",
	6: "updatedAt",
}

type SkuImage struct {
	ImageID   int64  `thrift:"imageID,1,required" frugal:"1,required,i64" json:"imageID"`
	SkuID     int64  `thrift:"skuID,2,required" frugal:"2,required,i64" json:"skuID"`
	Url       string `thrift:"url,3,required" frugal:"3,required,string" json:"url"`
	CreatedAt int64  `thrift:"createdAt,4,required" frugal:"4,required,i64" json:"createdAt"`
	DeletedAt *int64 `thrift:"deletedAt,5,optional" frugal:"5,optional,i64" json:"deletedAt,omitempty"`
}

func NewSkuImage() *SkuImage {
	return &SkuImage{}
}

func (p *SkuImage) InitDefault() {
}

func (p *SkuImage) GetImageID() (v int64) {
	return p.ImageID
}

func (p *SkuImage) GetSkuID() (v int64) {
	return p.SkuID
}

func (p *SkuImage) GetUrl() (v string) {
	return p.Url
}

func (p *SkuImage) GetCreatedAt() (v int64) {
	return p.CreatedAt
}

var SkuImage_DeletedAt_DEFAULT int64

func (p *SkuImage) GetDeletedAt() (v int64) {
	if !p.IsSetDeletedAt() {
		return SkuImage_DeletedAt_DEFAULT
	}
	return *p.DeletedAt
}
func (p *SkuImage) SetImageID(val int64) {
	p.ImageID = val
}
func (p *SkuImage) SetSkuID(val int64) {
	p.SkuID = val
}
func (p *SkuImage) SetUrl(val string) {
	p.Url = val
}
func (p *SkuImage) SetCreatedAt(val int64) {
	p.CreatedAt = val
}
func (p *SkuImage) SetDeletedAt(val *int64) {
	p.DeletedAt = val
}

func (p *SkuImage) IsSetDeletedAt() bool {
	return p.DeletedAt != nil
}

func (p *SkuImage) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SkuImage(%+v)", *p)
}

func (p *SkuImage) DeepEqual(ano *SkuImage) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.ImageID) {
		return false
	}
	if !p.Field2DeepEqual(ano.SkuID) {
		return false
	}
	if !p.Field3DeepEqual(ano.Url) {
		return false
	}
	if !p.Field4DeepEqual(ano.CreatedAt) {
		return false
	}
	if !p.Field5DeepEqual(ano.DeletedAt) {
		return false
	}
	return true
}

func (p *SkuImage) Field1DeepEqual(src int64) bool {

	if p.ImageID != src {
		return false
	}
	return true
}
func (p *SkuImage) Field2DeepEqual(src int64) bool {

	if p.SkuID != src {
		return false
	}
	return true
}
func (p *SkuImage) Field3DeepEqual(src string) bool {

	if strings.Compare(p.Url, src) != 0 {
		return false
	}
	return true
}
func (p *SkuImage) Field4DeepEqual(src int64) bool {

	if p.CreatedAt != src {
		return false
	}
	return true
}
func (p *SkuImage) Field5DeepEqual(src *int64) bool {

	if p.DeletedAt == src {
		return true
	} else if p.DeletedAt == nil || src == nil {
		return false
	}
	if *p.DeletedAt != *src {
		return false
	}
	return true
}

var fieldIDToName_SkuImage = map[int16]string{
	1: "imageID",
	2: "skuID",
	3: "url",
	4: "createdAt",
	5: "deletedAt",
}

type Spu struct {
	SpuID            int64   `thrift:"spuID,1,required" frugal:"1,required,i64" json:"spuID"`
	Name             string  `thrift:"name,2,required" frugal:"2,required,string" json:"name"`
	CreatorID        int64   `thrift:"creatorID,3,required" frugal:"3,required,i64" json:"creatorID"`
	Description      string  `thrift:"description,4,required" frugal:"4,required,string" json:"description"`
	CategoryID       int64   `thrift:"categoryID,5,required" frugal:"5,required,i64" json:"categoryID"`
	GoodsHeadDrawing string  `thrift:"goodsHeadDrawing,6,required" frugal:"6,required,string" json:"goodsHeadDrawing"`
	Price            float64 `thrift:"price,7,required" frugal:"7,required,double" json:"price"`
	ForSale          int32   `thrift:"forSale,8,required" frugal:"8,required,i32" json:"forSale"`
	Shipping         float64 `thrift:"shipping,9,required" frugal:"9,required,double" json:"shipping"`
	CreatedAt        int64   `thrift:"createdAt,10,required" frugal:"10,required,i64" json:"createdAt"`
	UpdatedAt        int64   `thrift:"updatedAt,11,required" frugal:"11,required,i64" json:"updatedAt"`
	DeletedAt        *int64  `thrift:"deletedAt,12,optional" frugal:"12,optional,i64" json:"deletedAt,omitempty"`
}

func NewSpu() *Spu {
	return &Spu{}
}

func (p *Spu) InitDefault() {
}

func (p *Spu) GetSpuID() (v int64) {
	return p.SpuID
}

func (p *Spu) GetName() (v string) {
	return p.Name
}

func (p *Spu) GetCreatorID() (v int64) {
	return p.CreatorID
}

func (p *Spu) GetDescription() (v string) {
	return p.Description
}

func (p *Spu) GetCategoryID() (v int64) {
	return p.CategoryID
}

func (p *Spu) GetGoodsHeadDrawing() (v string) {
	return p.GoodsHeadDrawing
}

func (p *Spu) GetPrice() (v float64) {
	return p.Price
}

func (p *Spu) GetForSale() (v int32) {
	return p.ForSale
}

func (p *Spu) GetShipping() (v float64) {
	return p.Shipping
}

func (p *Spu) GetCreatedAt() (v int64) {
	return p.CreatedAt
}

func (p *Spu) GetUpdatedAt() (v int64) {
	return p.UpdatedAt
}

var Spu_DeletedAt_DEFAULT int64

func (p *Spu) GetDeletedAt() (v int64) {
	if !p.IsSetDeletedAt() {
		return Spu_DeletedAt_DEFAULT
	}
	return *p.DeletedAt
}
func (p *Spu) SetSpuID(val int64) {
	p.SpuID = val
}
func (p *Spu) SetName(val string) {
	p.Name = val
}
func (p *Spu) SetCreatorID(val int64) {
	p.CreatorID = val
}
func (p *Spu) SetDescription(val string) {
	p.Description = val
}
func (p *Spu) SetCategoryID(val int64) {
	p.CategoryID = val
}
func (p *Spu) SetGoodsHeadDrawing(val string) {
	p.GoodsHeadDrawing = val
}
func (p *Spu) SetPrice(val float64) {
	p.Price = val
}
func (p *Spu) SetForSale(val int32) {
	p.ForSale = val
}
func (p *Spu) SetShipping(val float64) {
	p.Shipping = val
}
func (p *Spu) SetCreatedAt(val int64) {
	p.CreatedAt = val
}
func (p *Spu) SetUpdatedAt(val int64) {
	p.UpdatedAt = val
}
func (p *Spu) SetDeletedAt(val *int64) {
	p.DeletedAt = val
}

func (p *Spu) IsSetDeletedAt() bool {
	return p.DeletedAt != nil
}

func (p *Spu) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Spu(%+v)", *p)
}

func (p *Spu) DeepEqual(ano *Spu) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.SpuID) {
		return false
	}
	if !p.Field2DeepEqual(ano.Name) {
		return false
	}
	if !p.Field3DeepEqual(ano.CreatorID) {
		return false
	}
	if !p.Field4DeepEqual(ano.Description) {
		return false
	}
	if !p.Field5DeepEqual(ano.CategoryID) {
		return false
	}
	if !p.Field6DeepEqual(ano.GoodsHeadDrawing) {
		return false
	}
	if !p.Field7DeepEqual(ano.Price) {
		return false
	}
	if !p.Field8DeepEqual(ano.ForSale) {
		return false
	}
	if !p.Field9DeepEqual(ano.Shipping) {
		return false
	}
	if !p.Field10DeepEqual(ano.CreatedAt) {
		return false
	}
	if !p.Field11DeepEqual(ano.UpdatedAt) {
		return false
	}
	if !p.Field12DeepEqual(ano.DeletedAt) {
		return false
	}
	return true
}

func (p *Spu) Field1DeepEqual(src int64) bool {

	if p.SpuID != src {
		return false
	}
	return true
}
func (p *Spu) Field2DeepEqual(src string) bool {

	if strings.Compare(p.Name, src) != 0 {
		return false
	}
	return true
}
func (p *Spu) Field3DeepEqual(src int64) bool {

	if p.CreatorID != src {
		return false
	}
	return true
}
func (p *Spu) Field4DeepEqual(src string) bool {

	if strings.Compare(p.Description, src) != 0 {
		return false
	}
	return true
}
func (p *Spu) Field5DeepEqual(src int64) bool {

	if p.CategoryID != src {
		return false
	}
	return true
}
func (p *Spu) Field6DeepEqual(src string) bool {

	if strings.Compare(p.GoodsHeadDrawing, src) != 0 {
		return false
	}
	return true
}
func (p *Spu) Field7DeepEqual(src float64) bool {

	if p.Price != src {
		return false
	}
	return true
}
func (p *Spu) Field8DeepEqual(src int32) bool {

	if p.ForSale != src {
		return false
	}
	return true
}
func (p *Spu) Field9DeepEqual(src float64) bool {

	if p.Shipping != src {
		return false
	}
	return true
}
func (p *Spu) Field10DeepEqual(src int64) bool {

	if p.CreatedAt != src {
		return false
	}
	return true
}
func (p *Spu) Field11DeepEqual(src int64) bool {

	if p.UpdatedAt != src {
		return false
	}
	return true
}
func (p *Spu) Field12DeepEqual(src *int64) bool {

	if p.DeletedAt == src {
		return true
	} else if p.DeletedAt == nil || src == nil {
		return false
	}
	if *p.DeletedAt != *src {
		return false
	}
	return true
}

var fieldIDToName_Spu = map[int16]string{
	1:  "spuID",
	2:  "name",
	3:  "creatorID",
	4:  "description",
	5:  "categoryID",
	6:  "goodsHeadDrawing",
	7:  "price",
	8:  "forSale",
	9:  "shipping",
	10: "createdAt",
	11: "updatedAt",
	12: "deletedAt",
}

type Sku struct {
	SkuID            int64        `thrift:"skuID,1,required" frugal:"1,required,i64" json:"skuID"`
	CreatorID        int64        `thrift:"creatorID,2,required" frugal:"2,required,i64" json:"creatorID"`
	Price            float64      `thrift:"price,3,required" frugal:"3,required,double" json:"price"`
	Name             string       `thrift:"name,4,required" frugal:"4,required,string" json:"name"`
	Description      string       `thrift:"description,5,required" frugal:"5,required,string" json:"description"`
	ForSale          int32        `thrift:"forSale,6,required" frugal:"6,required,i32" json:"forSale"`
	Stock            int64        `thrift:"stock,7,required" frugal:"7,required,i64" json:"stock"`
	StyleHeadDrawing string       `thrift:"styleHeadDrawing,8,required" frugal:"8,required,string" json:"styleHeadDrawing"`
	CreatedAt        int64        `thrift:"createdAt,9,required" frugal:"9,required,i64" json:"createdAt"`
	UpdatedAt        int64        `thrift:"updatedAt,10,required" frugal:"10,required,i64" json:"updatedAt"`
	DeletedAt        *int64       `thrift:"deletedAt,11,optional" frugal:"11,optional,i64" json:"deletedAt,omitempty"`
	SpuID            int64        `thrift:"spuID,12,required" frugal:"12,required,i64" json:"spuID"`
	SaleAttr         []*AttrValue `thrift:"saleAttr,13,optional" frugal:"13,optional,list<AttrValue>" json:"saleAttr,omitempty"`
	HistoryID        int64        `thrift:"historyID,14,required" frugal:"14,required,i64" json:"historyID"`
	LockStock        int64        `thrift:"lockStock,15,required" frugal:"15,required,i64" json:"lockStock"`
}

func NewSku() *Sku {
	return &Sku{}
}

func (p *Sku) InitDefault() {
}

func (p *Sku) GetSkuID() (v int64) {
	return p.SkuID
}

func (p *Sku) GetCreatorID() (v int64) {
	return p.CreatorID
}

func (p *Sku) GetPrice() (v float64) {
	return p.Price
}

func (p *Sku) GetName() (v string) {
	return p.Name
}

func (p *Sku) GetDescription() (v string) {
	return p.Description
}

func (p *Sku) GetForSale() (v int32) {
	return p.ForSale
}

func (p *Sku) GetStock() (v int64) {
	return p.Stock
}

func (p *Sku) GetStyleHeadDrawing() (v string) {
	return p.StyleHeadDrawing
}

func (p *Sku) GetCreatedAt() (v int64) {
	return p.CreatedAt
}

func (p *Sku) GetUpdatedAt() (v int64) {
	return p.UpdatedAt
}

var Sku_DeletedAt_DEFAULT int64

func (p *Sku) GetDeletedAt() (v int64) {
	if !p.IsSetDeletedAt() {
		return Sku_DeletedAt_DEFAULT
	}
	return *p.DeletedAt
}

func (p *Sku) GetSpuID() (v int64) {
	return p.SpuID
}

var Sku_SaleAttr_DEFAULT []*AttrValue

func (p *Sku) GetSaleAttr() (v []*AttrValue) {
	if !p.IsSetSaleAttr() {
		return Sku_SaleAttr_DEFAULT
	}
	return p.SaleAttr
}

func (p *Sku) GetHistoryID() (v int64) {
	return p.HistoryID
}

func (p *Sku) GetLockStock() (v int64) {
	return p.LockStock
}
func (p *Sku) SetSkuID(val int64) {
	p.SkuID = val
}
func (p *Sku) SetCreatorID(val int64) {
	p.CreatorID = val
}
func (p *Sku) SetPrice(val float64) {
	p.Price = val
}
func (p *Sku) SetName(val string) {
	p.Name = val
}
func (p *Sku) SetDescription(val string) {
	p.Description = val
}
func (p *Sku) SetForSale(val int32) {
	p.ForSale = val
}
func (p *Sku) SetStock(val int64) {
	p.Stock = val
}
func (p *Sku) SetStyleHeadDrawing(val string) {
	p.StyleHeadDrawing = val
}
func (p *Sku) SetCreatedAt(val int64) {
	p.CreatedAt = val
}
func (p *Sku) SetUpdatedAt(val int64) {
	p.UpdatedAt = val
}
func (p *Sku) SetDeletedAt(val *int64) {
	p.DeletedAt = val
}
func (p *Sku) SetSpuID(val int64) {
	p.SpuID = val
}
func (p *Sku) SetSaleAttr(val []*AttrValue) {
	p.SaleAttr = val
}
func (p *Sku) SetHistoryID(val int64) {
	p.HistoryID = val
}
func (p *Sku) SetLockStock(val int64) {
	p.LockStock = val
}

func (p *Sku) IsSetDeletedAt() bool {
	return p.DeletedAt != nil
}

func (p *Sku) IsSetSaleAttr() bool {
	return p.SaleAttr != nil
}

func (p *Sku) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Sku(%+v)", *p)
}

func (p *Sku) DeepEqual(ano *Sku) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.SkuID) {
		return false
	}
	if !p.Field2DeepEqual(ano.CreatorID) {
		return false
	}
	if !p.Field3DeepEqual(ano.Price) {
		return false
	}
	if !p.Field4DeepEqual(ano.Name) {
		return false
	}
	if !p.Field5DeepEqual(ano.Description) {
		return false
	}
	if !p.Field6DeepEqual(ano.ForSale) {
		return false
	}
	if !p.Field7DeepEqual(ano.Stock) {
		return false
	}
	if !p.Field8DeepEqual(ano.StyleHeadDrawing) {
		return false
	}
	if !p.Field9DeepEqual(ano.CreatedAt) {
		return false
	}
	if !p.Field10DeepEqual(ano.UpdatedAt) {
		return false
	}
	if !p.Field11DeepEqual(ano.DeletedAt) {
		return false
	}
	if !p.Field12DeepEqual(ano.SpuID) {
		return false
	}
	if !p.Field13DeepEqual(ano.SaleAttr) {
		return false
	}
	if !p.Field14DeepEqual(ano.HistoryID) {
		return false
	}
	if !p.Field15DeepEqual(ano.LockStock) {
		return false
	}
	return true
}

func (p *Sku) Field1DeepEqual(src int64) bool {

	if p.SkuID != src {
		return false
	}
	return true
}
func (p *Sku) Field2DeepEqual(src int64) bool {

	if p.CreatorID != src {
		return false
	}
	return true
}
func (p *Sku) Field3DeepEqual(src float64) bool {

	if p.Price != src {
		return false
	}
	return true
}
func (p *Sku) Field4DeepEqual(src string) bool {

	if strings.Compare(p.Name, src) != 0 {
		return false
	}
	return true
}
func (p *Sku) Field5DeepEqual(src string) bool {

	if strings.Compare(p.Description, src) != 0 {
		return false
	}
	return true
}
func (p *Sku) Field6DeepEqual(src int32) bool {

	if p.ForSale != src {
		return false
	}
	return true
}
func (p *Sku) Field7DeepEqual(src int64) bool {

	if p.Stock != src {
		return false
	}
	return true
}
func (p *Sku) Field8DeepEqual(src string) bool {

	if strings.Compare(p.StyleHeadDrawing, src) != 0 {
		return false
	}
	return true
}
func (p *Sku) Field9DeepEqual(src int64) bool {

	if p.CreatedAt != src {
		return false
	}
	return true
}
func (p *Sku) Field10DeepEqual(src int64) bool {

	if p.UpdatedAt != src {
		return false
	}
	return true
}
func (p *Sku) Field11DeepEqual(src *int64) bool {

	if p.DeletedAt == src {
		return true
	} else if p.DeletedAt == nil || src == nil {
		return false
	}
	if *p.DeletedAt != *src {
		return false
	}
	return true
}
func (p *Sku) Field12DeepEqual(src int64) bool {

	if p.SpuID != src {
		return false
	}
	return true
}
func (p *Sku) Field13DeepEqual(src []*AttrValue) bool {

	if len(p.SaleAttr) != len(src) {
		return false
	}
	for i, v := range p.SaleAttr {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *Sku) Field14DeepEqual(src int64) bool {

	if p.HistoryID != src {
		return false
	}
	return true
}
func (p *Sku) Field15DeepEqual(src int64) bool {

	if p.LockStock != src {
		return false
	}
	return true
}

var fieldIDToName_Sku = map[int16]string{
	1:  "skuID",
	2:  "creatorID",
	3:  "price",
	4:  "name",
	5:  "description",
	6:  "forSale",
	7:  "stock",
	8:  "styleHeadDrawing",
	9:  "createdAt",
	10: "updatedAt",
	11: "deletedAt",
	12: "spuID",
	13: "saleAttr",
	14: "historyID",
	15: "lockStock",
}

type SkuInfo struct {
	SkuID            int64   `thrift:"skuID,1,required" frugal:"1,required,i64" json:"skuID"`
	CreatorID        int64   `thrift:"creatorID,2,required" frugal:"2,required,i64" json:"creatorID"`
	Price            float64 `thrift:"price,3,required" frugal:"3,required,double" json:"price"`
	Name             string  `thrift:"name,4,required" frugal:"4,required,string" json:"name"`
	ForSale          int32   `thrift:"forSale,5,required" frugal:"5,required,i32" json:"forSale"`
	LockStock        int64   `thrift:"lockStock,6,required" frugal:"6,required,i64" json:"lockStock"`
	StyleHeadDrawing string  `thrift:"styleHeadDrawing,7,required" frugal:"7,required,string" json:"styleHeadDrawing"`
	SpuID            int64   `thrift:"spuID,8,required" frugal:"8,required,i64" json:"spuID"`
	HistoryID        int64   `thrift:"historyID,9,required" frugal:"9,required,i64" json:"historyID"`
}

func NewSkuInfo() *SkuInfo {
	return &SkuInfo{}
}

func (p *SkuInfo) InitDefault() {
}

func (p *SkuInfo) GetSkuID() (v int64) {
	return p.SkuID
}

func (p *SkuInfo) GetCreatorID() (v int64) {
	return p.CreatorID
}

func (p *SkuInfo) GetPrice() (v float64) {
	return p.Price
}

func (p *SkuInfo) GetName() (v string) {
	return p.Name
}

func (p *SkuInfo) GetForSale() (v int32) {
	return p.ForSale
}

func (p *SkuInfo) GetLockStock() (v int64) {
	return p.LockStock
}

func (p *SkuInfo) GetStyleHeadDrawing() (v string) {
	return p.StyleHeadDrawing
}

func (p *SkuInfo) GetSpuID() (v int64) {
	return p.SpuID
}

func (p *SkuInfo) GetHistoryID() (v int64) {
	return p.HistoryID
}
func (p *SkuInfo) SetSkuID(val int64) {
	p.SkuID = val
}
func (p *SkuInfo) SetCreatorID(val int64) {
	p.CreatorID = val
}
func (p *SkuInfo) SetPrice(val float64) {
	p.Price = val
}
func (p *SkuInfo) SetName(val string) {
	p.Name = val
}
func (p *SkuInfo) SetForSale(val int32) {
	p.ForSale = val
}
func (p *SkuInfo) SetLockStock(val int64) {
	p.LockStock = val
}
func (p *SkuInfo) SetStyleHeadDrawing(val string) {
	p.StyleHeadDrawing = val
}
func (p *SkuInfo) SetSpuID(val int64) {
	p.SpuID = val
}
func (p *SkuInfo) SetHistoryID(val int64) {
	p.HistoryID = val
}

func (p *SkuInfo) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SkuInfo(%+v)", *p)
}

func (p *SkuInfo) DeepEqual(ano *SkuInfo) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.SkuID) {
		return false
	}
	if !p.Field2DeepEqual(ano.CreatorID) {
		return false
	}
	if !p.Field3DeepEqual(ano.Price) {
		return false
	}
	if !p.Field4DeepEqual(ano.Name) {
		return false
	}
	if !p.Field5DeepEqual(ano.ForSale) {
		return false
	}
	if !p.Field6DeepEqual(ano.LockStock) {
		return false
	}
	if !p.Field7DeepEqual(ano.StyleHeadDrawing) {
		return false
	}
	if !p.Field8DeepEqual(ano.SpuID) {
		return false
	}
	if !p.Field9DeepEqual(ano.HistoryID) {
		return false
	}
	return true
}

func (p *SkuInfo) Field1DeepEqual(src int64) bool {

	if p.SkuID != src {
		return false
	}
	return true
}
func (p *SkuInfo) Field2DeepEqual(src int64) bool {

	if p.CreatorID != src {
		return false
	}
	return true
}
func (p *SkuInfo) Field3DeepEqual(src float64) bool {

	if p.Price != src {
		return false
	}
	return true
}
func (p *SkuInfo) Field4DeepEqual(src string) bool {

	if strings.Compare(p.Name, src) != 0 {
		return false
	}
	return true
}
func (p *SkuInfo) Field5DeepEqual(src int32) bool {

	if p.ForSale != src {
		return false
	}
	return true
}
func (p *SkuInfo) Field6DeepEqual(src int64) bool {

	if p.LockStock != src {
		return false
	}
	return true
}
func (p *SkuInfo) Field7DeepEqual(src string) bool {

	if strings.Compare(p.StyleHeadDrawing, src) != 0 {
		return false
	}
	return true
}
func (p *SkuInfo) Field8DeepEqual(src int64) bool {

	if p.SpuID != src {
		return false
	}
	return true
}
func (p *SkuInfo) Field9DeepEqual(src int64) bool {

	if p.HistoryID != src {
		return false
	}
	return true
}

var fieldIDToName_SkuInfo = map[int16]string{
	1: "skuID",
	2: "creatorID",
	3: "price",
	4: "name",
	5: "forSale",
	6: "lockStock",
	7: "styleHeadDrawing",
	8: "spuID",
	9: "historyID",
}

type SkuVersion struct {
	SkuID     int64 `thrift:"skuID,1,required" frugal:"1,required,i64" json:"skuID"`
	VersionID int64 `thrift:"versionID,2,required" frugal:"2,required,i64" json:"versionID"`
}

func NewSkuVersion() *SkuVersion {
	return &SkuVersion{}
}

func (p *SkuVersion) InitDefault() {
}

func (p *SkuVersion) GetSkuID() (v int64) {
	return p.SkuID
}

func (p *SkuVersion) GetVersionID() (v int64) {
	return p.VersionID
}
func (p *SkuVersion) SetSkuID(val int64) {
	p.SkuID = val
}
func (p *SkuVersion) SetVersionID(val int64) {
	p.VersionID = val
}

func (p *SkuVersion) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SkuVersion(%+v)", *p)
}

func (p *SkuVersion) DeepEqual(ano *SkuVersion) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.SkuID) {
		return false
	}
	if !p.Field2DeepEqual(ano.VersionID) {
		return false
	}
	return true
}

func (p *SkuVersion) Field1DeepEqual(src int64) bool {

	if p.SkuID != src {
		return false
	}
	return true
}
func (p *SkuVersion) Field2DeepEqual(src int64) bool {

	if p.VersionID != src {
		return false
	}
	return true
}

var fieldIDToName_SkuVersion = map[int16]string{
	1: "skuID",
	2: "versionID",
}

type PriceHistory struct {
	HistoryID   int64  `thrift:"historyID,1,required" frugal:"1,required,i64" json:"historyID"`
	SkuID       int64  `thrift:"skuID,2,required" frugal:"2,required,i64" json:"skuID"`
	Price       int64  `thrift:"price,3,required" frugal:"3,required,i64" json:"price"`
	CreatedAt   int64  `thrift:"createdAt,4,required" frugal:"4,required,i64" json:"createdAt"`
	PrevVersion *int64 `thrift:"prevVersion,5,optional" frugal:"5,optional,i64" json:"prevVersion,omitempty"`
}

func NewPriceHistory() *PriceHistory {
	return &PriceHistory{}
}

func (p *PriceHistory) InitDefault() {
}

func (p *PriceHistory) GetHistoryID() (v int64) {
	return p.HistoryID
}

func (p *PriceHistory) GetSkuID() (v int64) {
	return p.SkuID
}

func (p *PriceHistory) GetPrice() (v int64) {
	return p.Price
}

func (p *PriceHistory) GetCreatedAt() (v int64) {
	return p.CreatedAt
}

var PriceHistory_PrevVersion_DEFAULT int64

func (p *PriceHistory) GetPrevVersion() (v int64) {
	if !p.IsSetPrevVersion() {
		return PriceHistory_PrevVersion_DEFAULT
	}
	return *p.PrevVersion
}
func (p *PriceHistory) SetHistoryID(val int64) {
	p.HistoryID = val
}
func (p *PriceHistory) SetSkuID(val int64) {
	p.SkuID = val
}
func (p *PriceHistory) SetPrice(val int64) {
	p.Price = val
}
func (p *PriceHistory) SetCreatedAt(val int64) {
	p.CreatedAt = val
}
func (p *PriceHistory) SetPrevVersion(val *int64) {
	p.PrevVersion = val
}

func (p *PriceHistory) IsSetPrevVersion() bool {
	return p.PrevVersion != nil
}

func (p *PriceHistory) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PriceHistory(%+v)", *p)
}

func (p *PriceHistory) DeepEqual(ano *PriceHistory) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.HistoryID) {
		return false
	}
	if !p.Field2DeepEqual(ano.SkuID) {
		return false
	}
	if !p.Field3DeepEqual(ano.Price) {
		return false
	}
	if !p.Field4DeepEqual(ano.CreatedAt) {
		return false
	}
	if !p.Field5DeepEqual(ano.PrevVersion) {
		return false
	}
	return true
}

func (p *PriceHistory) Field1DeepEqual(src int64) bool {

	if p.HistoryID != src {
		return false
	}
	return true
}
func (p *PriceHistory) Field2DeepEqual(src int64) bool {

	if p.SkuID != src {
		return false
	}
	return true
}
func (p *PriceHistory) Field3DeepEqual(src int64) bool {

	if p.Price != src {
		return false
	}
	return true
}
func (p *PriceHistory) Field4DeepEqual(src int64) bool {

	if p.CreatedAt != src {
		return false
	}
	return true
}
func (p *PriceHistory) Field5DeepEqual(src *int64) bool {

	if p.PrevVersion == src {
		return true
	} else if p.PrevVersion == nil || src == nil {
		return false
	}
	if *p.PrevVersion != *src {
		return false
	}
	return true
}

var fieldIDToName_PriceHistory = map[int16]string{
	1: "historyID",
	2: "skuID",
	3: "price",
	4: "createdAt",
	5: "prevVersion",
}

type SkuBuyInfo struct {
	SkuID int64 `thrift:"skuID,1,required" frugal:"1,required,i64" json:"skuID"`
	Count int64 `thrift:"count,2,required" frugal:"2,required,i64" json:"count"`
}

func NewSkuBuyInfo() *SkuBuyInfo {
	return &SkuBuyInfo{}
}

func (p *SkuBuyInfo) InitDefault() {
}

func (p *SkuBuyInfo) GetSkuID() (v int64) {
	return p.SkuID
}

func (p *SkuBuyInfo) GetCount() (v int64) {
	return p.Count
}
func (p *SkuBuyInfo) SetSkuID(val int64) {
	p.SkuID = val
}
func (p *SkuBuyInfo) SetCount(val int64) {
	p.Count = val
}

func (p *SkuBuyInfo) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SkuBuyInfo(%+v)", *p)
}

func (p *SkuBuyInfo) DeepEqual(ano *SkuBuyInfo) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.SkuID) {
		return false
	}
	if !p.Field2DeepEqual(ano.Count) {
		return false
	}
	return true
}

func (p *SkuBuyInfo) Field1DeepEqual(src int64) bool {

	if p.SkuID != src {
		return false
	}
	return true
}
func (p *SkuBuyInfo) Field2DeepEqual(src int64) bool {

	if p.Count != src {
		return false
	}
	return true
}

var fieldIDToName_SkuBuyInfo = map[int16]string{
	1: "skuID",
	2: "count",
}

type Order struct {
	Id                    int64   `thrift:"id,1,required" frugal:"1,required,i64" json:"id"`
	Status                string  `thrift:"status,2,required" frugal:"2,required,string" json:"status"`
	Uid                   int64   `thrift:"uid,3,required" frugal:"3,required,i64" json:"uid"`
	TotalAmountOfGoods    float64 `thrift:"totalAmountOfGoods,4,required" frugal:"4,required,double" json:"totalAmountOfGoods"`
	TotalAmountOfFreight  float64 `thrift:"totalAmountOfFreight,5,required" frugal:"5,required,double" json:"totalAmountOfFreight"`
	TotalAmountOfDiscount float64 `thrift:"totalAmountOfDiscount,6,required" frugal:"6,required,double" json:"totalAmountOfDiscount"`
	PaymentAmount         float64 `thrift:"paymentAmount,7,required" frugal:"7,required,double" json:"paymentAmount"`
	PaymentStatus         string  `thrift:"paymentStatus,8,required" frugal:"8,required,string" json:"paymentStatus"`
	PaymentAt             int64   `thrift:"paymentAt,9,required" frugal:"9,required,i64" json:"paymentAt"`
	PaymentStyle          string  `thrift:"paymentStyle,10,required" frugal:"10,required,string" json:"paymentStyle"`
	OrderedAt             int64   `thrift:"orderedAt,11,required" frugal:"11,required,i64" json:"orderedAt"`
	DeletedAt             int64   `thrift:"deletedAt,12,required" frugal:"12,required,i64" json:"deletedAt"`
	DeliveryAt            int64   `thrift:"deliveryAt,13,required" frugal:"13,required,i64" json:"deliveryAt"`
	AddressID             int64   `thrift:"addressID,14,required" frugal:"14,required,i64" json:"addressID"`
	AddressInfo           string  `thrift:"addressInfo,15,required" frugal:"15,required,string" json:"addressInfo"`
}

func NewOrder() *Order {
	return &Order{}
}

func (p *Order) InitDefault() {
}

func (p *Order) GetId() (v int64) {
	return p.Id
}

func (p *Order) GetStatus() (v string) {
	return p.Status
}

func (p *Order) GetUid() (v int64) {
	return p.Uid
}

func (p *Order) GetTotalAmountOfGoods() (v float64) {
	return p.TotalAmountOfGoods
}

func (p *Order) GetTotalAmountOfFreight() (v float64) {
	return p.TotalAmountOfFreight
}

func (p *Order) GetTotalAmountOfDiscount() (v float64) {
	return p.TotalAmountOfDiscount
}

func (p *Order) GetPaymentAmount() (v float64) {
	return p.PaymentAmount
}

func (p *Order) GetPaymentStatus() (v string) {
	return p.PaymentStatus
}

func (p *Order) GetPaymentAt() (v int64) {
	return p.PaymentAt
}

func (p *Order) GetPaymentStyle() (v string) {
	return p.PaymentStyle
}

func (p *Order) GetOrderedAt() (v int64) {
	return p.OrderedAt
}

func (p *Order) GetDeletedAt() (v int64) {
	return p.DeletedAt
}

func (p *Order) GetDeliveryAt() (v int64) {
	return p.DeliveryAt
}

func (p *Order) GetAddressID() (v int64) {
	return p.AddressID
}

func (p *Order) GetAddressInfo() (v string) {
	return p.AddressInfo
}
func (p *Order) SetId(val int64) {
	p.Id = val
}
func (p *Order) SetStatus(val string) {
	p.Status = val
}
func (p *Order) SetUid(val int64) {
	p.Uid = val
}
func (p *Order) SetTotalAmountOfGoods(val float64) {
	p.TotalAmountOfGoods = val
}
func (p *Order) SetTotalAmountOfFreight(val float64) {
	p.TotalAmountOfFreight = val
}
func (p *Order) SetTotalAmountOfDiscount(val float64) {
	p.TotalAmountOfDiscount = val
}
func (p *Order) SetPaymentAmount(val float64) {
	p.PaymentAmount = val
}
func (p *Order) SetPaymentStatus(val string) {
	p.PaymentStatus = val
}
func (p *Order) SetPaymentAt(val int64) {
	p.PaymentAt = val
}
func (p *Order) SetPaymentStyle(val string) {
	p.PaymentStyle = val
}
func (p *Order) SetOrderedAt(val int64) {
	p.OrderedAt = val
}
func (p *Order) SetDeletedAt(val int64) {
	p.DeletedAt = val
}
func (p *Order) SetDeliveryAt(val int64) {
	p.DeliveryAt = val
}
func (p *Order) SetAddressID(val int64) {
	p.AddressID = val
}
func (p *Order) SetAddressInfo(val string) {
	p.AddressInfo = val
}

func (p *Order) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Order(%+v)", *p)
}

func (p *Order) DeepEqual(ano *Order) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Id) {
		return false
	}
	if !p.Field2DeepEqual(ano.Status) {
		return false
	}
	if !p.Field3DeepEqual(ano.Uid) {
		return false
	}
	if !p.Field4DeepEqual(ano.TotalAmountOfGoods) {
		return false
	}
	if !p.Field5DeepEqual(ano.TotalAmountOfFreight) {
		return false
	}
	if !p.Field6DeepEqual(ano.TotalAmountOfDiscount) {
		return false
	}
	if !p.Field7DeepEqual(ano.PaymentAmount) {
		return false
	}
	if !p.Field8DeepEqual(ano.PaymentStatus) {
		return false
	}
	if !p.Field9DeepEqual(ano.PaymentAt) {
		return false
	}
	if !p.Field10DeepEqual(ano.PaymentStyle) {
		return false
	}
	if !p.Field11DeepEqual(ano.OrderedAt) {
		return false
	}
	if !p.Field12DeepEqual(ano.DeletedAt) {
		return false
	}
	if !p.Field13DeepEqual(ano.DeliveryAt) {
		return false
	}
	if !p.Field14DeepEqual(ano.AddressID) {
		return false
	}
	if !p.Field15DeepEqual(ano.AddressInfo) {
		return false
	}
	return true
}

func (p *Order) Field1DeepEqual(src int64) bool {

	if p.Id != src {
		return false
	}
	return true
}
func (p *Order) Field2DeepEqual(src string) bool {

	if strings.Compare(p.Status, src) != 0 {
		return false
	}
	return true
}
func (p *Order) Field3DeepEqual(src int64) bool {

	if p.Uid != src {
		return false
	}
	return true
}
func (p *Order) Field4DeepEqual(src float64) bool {

	if p.TotalAmountOfGoods != src {
		return false
	}
	return true
}
func (p *Order) Field5DeepEqual(src float64) bool {

	if p.TotalAmountOfFreight != src {
		return false
	}
	return true
}
func (p *Order) Field6DeepEqual(src float64) bool {

	if p.TotalAmountOfDiscount != src {
		return false
	}
	return true
}
func (p *Order) Field7DeepEqual(src float64) bool {

	if p.PaymentAmount != src {
		return false
	}
	return true
}
func (p *Order) Field8DeepEqual(src string) bool {

	if strings.Compare(p.PaymentStatus, src) != 0 {
		return false
	}
	return true
}
func (p *Order) Field9DeepEqual(src int64) bool {

	if p.PaymentAt != src {
		return false
	}
	return true
}
func (p *Order) Field10DeepEqual(src string) bool {

	if strings.Compare(p.PaymentStyle, src) != 0 {
		return false
	}
	return true
}
func (p *Order) Field11DeepEqual(src int64) bool {

	if p.OrderedAt != src {
		return false
	}
	return true
}
func (p *Order) Field12DeepEqual(src int64) bool {

	if p.DeletedAt != src {
		return false
	}
	return true
}
func (p *Order) Field13DeepEqual(src int64) bool {

	if p.DeliveryAt != src {
		return false
	}
	return true
}
func (p *Order) Field14DeepEqual(src int64) bool {

	if p.AddressID != src {
		return false
	}
	return true
}
func (p *Order) Field15DeepEqual(src string) bool {

	if strings.Compare(p.AddressInfo, src) != 0 {
		return false
	}
	return true
}

var fieldIDToName_Order = map[int16]string{
	1:  "id",
	2:  "status",
	3:  "uid",
	4:  "totalAmountOfGoods",
	5:  "totalAmountOfFreight",
	6:  "totalAmountOfDiscount",
	7:  "paymentAmount",
	8:  "paymentStatus",
	9:  "paymentAt",
	10: "paymentStyle",
	11: "orderedAt",
	12: "deletedAt",
	13: "deliveryAt",
	14: "addressID",
	15: "addressInfo",
}

type BaseOrder struct {
	Id                 int64   `thrift:"id,1,required" frugal:"1,required,i64" json:"id"`
	Status             string  `thrift:"status,2,required" frugal:"2,required,string" json:"status"`
	TotalAmountOfGoods float64 `thrift:"totalAmountOfGoods,3,required" frugal:"3,required,double" json:"totalAmountOfGoods"`
	PaymentAmount      float64 `thrift:"paymentAmount,4,required" frugal:"4,required,double" json:"paymentAmount"`
	PaymentStatus      string  `thrift:"paymentStatus,5,required" frugal:"5,required,string" json:"paymentStatus"`
}

func NewBaseOrder() *BaseOrder {
	return &BaseOrder{}
}

func (p *BaseOrder) InitDefault() {
}

func (p *BaseOrder) GetId() (v int64) {
	return p.Id
}

func (p *BaseOrder) GetStatus() (v string) {
	return p.Status
}

func (p *BaseOrder) GetTotalAmountOfGoods() (v float64) {
	return p.TotalAmountOfGoods
}

func (p *BaseOrder) GetPaymentAmount() (v float64) {
	return p.PaymentAmount
}

func (p *BaseOrder) GetPaymentStatus() (v string) {
	return p.PaymentStatus
}
func (p *BaseOrder) SetId(val int64) {
	p.Id = val
}
func (p *BaseOrder) SetStatus(val string) {
	p.Status = val
}
func (p *BaseOrder) SetTotalAmountOfGoods(val float64) {
	p.TotalAmountOfGoods = val
}
func (p *BaseOrder) SetPaymentAmount(val float64) {
	p.PaymentAmount = val
}
func (p *BaseOrder) SetPaymentStatus(val string) {
	p.PaymentStatus = val
}

func (p *BaseOrder) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BaseOrder(%+v)", *p)
}

func (p *BaseOrder) DeepEqual(ano *BaseOrder) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Id) {
		return false
	}
	if !p.Field2DeepEqual(ano.Status) {
		return false
	}
	if !p.Field3DeepEqual(ano.TotalAmountOfGoods) {
		return false
	}
	if !p.Field4DeepEqual(ano.PaymentAmount) {
		return false
	}
	if !p.Field5DeepEqual(ano.PaymentStatus) {
		return false
	}
	return true
}

func (p *BaseOrder) Field1DeepEqual(src int64) bool {

	if p.Id != src {
		return false
	}
	return true
}
func (p *BaseOrder) Field2DeepEqual(src string) bool {

	if strings.Compare(p.Status, src) != 0 {
		return false
	}
	return true
}
func (p *BaseOrder) Field3DeepEqual(src float64) bool {

	if p.TotalAmountOfGoods != src {
		return false
	}
	return true
}
func (p *BaseOrder) Field4DeepEqual(src float64) bool {

	if p.PaymentAmount != src {
		return false
	}
	return true
}
func (p *BaseOrder) Field5DeepEqual(src string) bool {

	if strings.Compare(p.PaymentStatus, src) != 0 {
		return false
	}
	return true
}

var fieldIDToName_BaseOrder = map[int16]string{
	1: "id",
	2: "status",
	3: "totalAmountOfGoods",
	4: "paymentAmount",
	5: "paymentStatus",
}

type OrderWithGoods struct {
	Order *Order        `thrift:"order,1,required" frugal:"1,required,Order" json:"order"`
	Goods []*OrderGoods `thrift:"goods,2,required" frugal:"2,required,list<OrderGoods>" json:"goods"`
}

func NewOrderWithGoods() *OrderWithGoods {
	return &OrderWithGoods{}
}

func (p *OrderWithGoods) InitDefault() {
}

var OrderWithGoods_Order_DEFAULT *Order

func (p *OrderWithGoods) GetOrder() (v *Order) {
	if !p.IsSetOrder() {
		return OrderWithGoods_Order_DEFAULT
	}
	return p.Order
}

func (p *OrderWithGoods) GetGoods() (v []*OrderGoods) {
	return p.Goods
}
func (p *OrderWithGoods) SetOrder(val *Order) {
	p.Order = val
}
func (p *OrderWithGoods) SetGoods(val []*OrderGoods) {
	p.Goods = val
}

func (p *OrderWithGoods) IsSetOrder() bool {
	return p.Order != nil
}

func (p *OrderWithGoods) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("OrderWithGoods(%+v)", *p)
}

func (p *OrderWithGoods) DeepEqual(ano *OrderWithGoods) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Order) {
		return false
	}
	if !p.Field2DeepEqual(ano.Goods) {
		return false
	}
	return true
}

func (p *OrderWithGoods) Field1DeepEqual(src *Order) bool {

	if !p.Order.DeepEqual(src) {
		return false
	}
	return true
}
func (p *OrderWithGoods) Field2DeepEqual(src []*OrderGoods) bool {

	if len(p.Goods) != len(src) {
		return false
	}
	for i, v := range p.Goods {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}

var fieldIDToName_OrderWithGoods = map[int16]string{
	1: "order",
	2: "goods",
}

type BaseOrderWithGoods struct {
	Order *BaseOrder        `thrift:"order,1,required" frugal:"1,required,BaseOrder" json:"order"`
	Goods []*BaseOrderGoods `thrift:"goods,2,required" frugal:"2,required,list<BaseOrderGoods>" json:"goods"`
}

func NewBaseOrderWithGoods() *BaseOrderWithGoods {
	return &BaseOrderWithGoods{}
}

func (p *BaseOrderWithGoods) InitDefault() {
}

var BaseOrderWithGoods_Order_DEFAULT *BaseOrder

func (p *BaseOrderWithGoods) GetOrder() (v *BaseOrder) {
	if !p.IsSetOrder() {
		return BaseOrderWithGoods_Order_DEFAULT
	}
	return p.Order
}

func (p *BaseOrderWithGoods) GetGoods() (v []*BaseOrderGoods) {
	return p.Goods
}
func (p *BaseOrderWithGoods) SetOrder(val *BaseOrder) {
	p.Order = val
}
func (p *BaseOrderWithGoods) SetGoods(val []*BaseOrderGoods) {
	p.Goods = val
}

func (p *BaseOrderWithGoods) IsSetOrder() bool {
	return p.Order != nil
}

func (p *BaseOrderWithGoods) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BaseOrderWithGoods(%+v)", *p)
}

func (p *BaseOrderWithGoods) DeepEqual(ano *BaseOrderWithGoods) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Order) {
		return false
	}
	if !p.Field2DeepEqual(ano.Goods) {
		return false
	}
	return true
}

func (p *BaseOrderWithGoods) Field1DeepEqual(src *BaseOrder) bool {

	if !p.Order.DeepEqual(src) {
		return false
	}
	return true
}
func (p *BaseOrderWithGoods) Field2DeepEqual(src []*BaseOrderGoods) bool {

	if len(p.Goods) != len(src) {
		return false
	}
	for i, v := range p.Goods {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}

var fieldIDToName_BaseOrderWithGoods = map[int16]string{
	1: "order",
	2: "goods",
}

type OrderGoods struct {
	MerchantID       int64   `thrift:"merchantID,1,required" frugal:"1,required,i64" json:"merchantID"`
	GoodsID          int64   `thrift:"goodsID,2,required" frugal:"2,required,i64" json:"goodsID"`
	GoodsName        string  `thrift:"goodsName,3,required" frugal:"3,required,string" json:"goodsName"`
	GoodsHeadDrawing string  `thrift:"goodsHeadDrawing,4,required" frugal:"4,required,string" json:"goodsHeadDrawing"`
	StyleID          int64   `thrift:"styleID,5,required" frugal:"5,required,i64" json:"styleID"`
	StyleName        string  `thrift:"styleName,6,required" frugal:"6,required,string" json:"styleName"`
	StyleHeadDrawing string  `thrift:"styleHeadDrawing,7,required" frugal:"7,required,string" json:"styleHeadDrawing"`
	OriginCast       float64 `thrift:"originCast,8,required" frugal:"8,required,double" json:"originCast"`
	SaleCast         float64 `thrift:"saleCast,9,required" frugal:"9,required,double" json:"saleCast"`
	PurchaseQuantity int64   `thrift:"purchaseQuantity,10,required" frugal:"10,required,i64" json:"purchaseQuantity"`
	PaymentAmount    float64 `thrift:"paymentAmount,11,required" frugal:"11,required,double" json:"paymentAmount"`
	FreightAmount    float64 `thrift:"freightAmount,12,required" frugal:"12,required,double" json:"freightAmount"`
	SettlementAmount float64 `thrift:"settlementAmount,13,required" frugal:"13,required,double" json:"settlementAmount"`
	DiscountAmount   float64 `thrift:"discountAmount,14,required" frugal:"14,required,double" json:"discountAmount"`
	SingleCast       float64 `thrift:"singleCast,15,required" frugal:"15,required,double" json:"singleCast"`
	CouponID         int64   `thrift:"couponID,16" frugal:"16,default,i64" json:"couponID"`
	OrderID          int64   `thrift:"orderID,17,required" frugal:"17,required,i64" json:"orderID"`
	GoodsVersion     int32   `thrift:"goodsVersion,18,required" frugal:"18,required,i32" json:"goodsVersion"`
}

func NewOrderGoods() *OrderGoods {
	return &OrderGoods{}
}

func (p *OrderGoods) InitDefault() {
}

func (p *OrderGoods) GetMerchantID() (v int64) {
	return p.MerchantID
}

func (p *OrderGoods) GetGoodsID() (v int64) {
	return p.GoodsID
}

func (p *OrderGoods) GetGoodsName() (v string) {
	return p.GoodsName
}

func (p *OrderGoods) GetGoodsHeadDrawing() (v string) {
	return p.GoodsHeadDrawing
}

func (p *OrderGoods) GetStyleID() (v int64) {
	return p.StyleID
}

func (p *OrderGoods) GetStyleName() (v string) {
	return p.StyleName
}

func (p *OrderGoods) GetStyleHeadDrawing() (v string) {
	return p.StyleHeadDrawing
}

func (p *OrderGoods) GetOriginCast() (v float64) {
	return p.OriginCast
}

func (p *OrderGoods) GetSaleCast() (v float64) {
	return p.SaleCast
}

func (p *OrderGoods) GetPurchaseQuantity() (v int64) {
	return p.PurchaseQuantity
}

func (p *OrderGoods) GetPaymentAmount() (v float64) {
	return p.PaymentAmount
}

func (p *OrderGoods) GetFreightAmount() (v float64) {
	return p.FreightAmount
}

func (p *OrderGoods) GetSettlementAmount() (v float64) {
	return p.SettlementAmount
}

func (p *OrderGoods) GetDiscountAmount() (v float64) {
	return p.DiscountAmount
}

func (p *OrderGoods) GetSingleCast() (v float64) {
	return p.SingleCast
}

func (p *OrderGoods) GetCouponID() (v int64) {
	return p.CouponID
}

func (p *OrderGoods) GetOrderID() (v int64) {
	return p.OrderID
}

func (p *OrderGoods) GetGoodsVersion() (v int32) {
	return p.GoodsVersion
}
func (p *OrderGoods) SetMerchantID(val int64) {
	p.MerchantID = val
}
func (p *OrderGoods) SetGoodsID(val int64) {
	p.GoodsID = val
}
func (p *OrderGoods) SetGoodsName(val string) {
	p.GoodsName = val
}
func (p *OrderGoods) SetGoodsHeadDrawing(val string) {
	p.GoodsHeadDrawing = val
}
func (p *OrderGoods) SetStyleID(val int64) {
	p.StyleID = val
}
func (p *OrderGoods) SetStyleName(val string) {
	p.StyleName = val
}
func (p *OrderGoods) SetStyleHeadDrawing(val string) {
	p.StyleHeadDrawing = val
}
func (p *OrderGoods) SetOriginCast(val float64) {
	p.OriginCast = val
}
func (p *OrderGoods) SetSaleCast(val float64) {
	p.SaleCast = val
}
func (p *OrderGoods) SetPurchaseQuantity(val int64) {
	p.PurchaseQuantity = val
}
func (p *OrderGoods) SetPaymentAmount(val float64) {
	p.PaymentAmount = val
}
func (p *OrderGoods) SetFreightAmount(val float64) {
	p.FreightAmount = val
}
func (p *OrderGoods) SetSettlementAmount(val float64) {
	p.SettlementAmount = val
}
func (p *OrderGoods) SetDiscountAmount(val float64) {
	p.DiscountAmount = val
}
func (p *OrderGoods) SetSingleCast(val float64) {
	p.SingleCast = val
}
func (p *OrderGoods) SetCouponID(val int64) {
	p.CouponID = val
}
func (p *OrderGoods) SetOrderID(val int64) {
	p.OrderID = val
}
func (p *OrderGoods) SetGoodsVersion(val int32) {
	p.GoodsVersion = val
}

func (p *OrderGoods) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("OrderGoods(%+v)", *p)
}

func (p *OrderGoods) DeepEqual(ano *OrderGoods) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.MerchantID) {
		return false
	}
	if !p.Field2DeepEqual(ano.GoodsID) {
		return false
	}
	if !p.Field3DeepEqual(ano.GoodsName) {
		return false
	}
	if !p.Field4DeepEqual(ano.GoodsHeadDrawing) {
		return false
	}
	if !p.Field5DeepEqual(ano.StyleID) {
		return false
	}
	if !p.Field6DeepEqual(ano.StyleName) {
		return false
	}
	if !p.Field7DeepEqual(ano.StyleHeadDrawing) {
		return false
	}
	if !p.Field8DeepEqual(ano.OriginCast) {
		return false
	}
	if !p.Field9DeepEqual(ano.SaleCast) {
		return false
	}
	if !p.Field10DeepEqual(ano.PurchaseQuantity) {
		return false
	}
	if !p.Field11DeepEqual(ano.PaymentAmount) {
		return false
	}
	if !p.Field12DeepEqual(ano.FreightAmount) {
		return false
	}
	if !p.Field13DeepEqual(ano.SettlementAmount) {
		return false
	}
	if !p.Field14DeepEqual(ano.DiscountAmount) {
		return false
	}
	if !p.Field15DeepEqual(ano.SingleCast) {
		return false
	}
	if !p.Field16DeepEqual(ano.CouponID) {
		return false
	}
	if !p.Field17DeepEqual(ano.OrderID) {
		return false
	}
	if !p.Field18DeepEqual(ano.GoodsVersion) {
		return false
	}
	return true
}

func (p *OrderGoods) Field1DeepEqual(src int64) bool {

	if p.MerchantID != src {
		return false
	}
	return true
}
func (p *OrderGoods) Field2DeepEqual(src int64) bool {

	if p.GoodsID != src {
		return false
	}
	return true
}
func (p *OrderGoods) Field3DeepEqual(src string) bool {

	if strings.Compare(p.GoodsName, src) != 0 {
		return false
	}
	return true
}
func (p *OrderGoods) Field4DeepEqual(src string) bool {

	if strings.Compare(p.GoodsHeadDrawing, src) != 0 {
		return false
	}
	return true
}
func (p *OrderGoods) Field5DeepEqual(src int64) bool {

	if p.StyleID != src {
		return false
	}
	return true
}
func (p *OrderGoods) Field6DeepEqual(src string) bool {

	if strings.Compare(p.StyleName, src) != 0 {
		return false
	}
	return true
}
func (p *OrderGoods) Field7DeepEqual(src string) bool {

	if strings.Compare(p.StyleHeadDrawing, src) != 0 {
		return false
	}
	return true
}
func (p *OrderGoods) Field8DeepEqual(src float64) bool {

	if p.OriginCast != src {
		return false
	}
	return true
}
func (p *OrderGoods) Field9DeepEqual(src float64) bool {

	if p.SaleCast != src {
		return false
	}
	return true
}
func (p *OrderGoods) Field10DeepEqual(src int64) bool {

	if p.PurchaseQuantity != src {
		return false
	}
	return true
}
func (p *OrderGoods) Field11DeepEqual(src float64) bool {

	if p.PaymentAmount != src {
		return false
	}
	return true
}
func (p *OrderGoods) Field12DeepEqual(src float64) bool {

	if p.FreightAmount != src {
		return false
	}
	return true
}
func (p *OrderGoods) Field13DeepEqual(src float64) bool {

	if p.SettlementAmount != src {
		return false
	}
	return true
}
func (p *OrderGoods) Field14DeepEqual(src float64) bool {

	if p.DiscountAmount != src {
		return false
	}
	return true
}
func (p *OrderGoods) Field15DeepEqual(src float64) bool {

	if p.SingleCast != src {
		return false
	}
	return true
}
func (p *OrderGoods) Field16DeepEqual(src int64) bool {

	if p.CouponID != src {
		return false
	}
	return true
}
func (p *OrderGoods) Field17DeepEqual(src int64) bool {

	if p.OrderID != src {
		return false
	}
	return true
}
func (p *OrderGoods) Field18DeepEqual(src int32) bool {

	if p.GoodsVersion != src {
		return false
	}
	return true
}

var fieldIDToName_OrderGoods = map[int16]string{
	1:  "merchantID",
	2:  "goodsID",
	3:  "goodsName",
	4:  "goodsHeadDrawing",
	5:  "styleID",
	6:  "styleName",
	7:  "styleHeadDrawing",
	8:  "originCast",
	9:  "saleCast",
	10: "purchaseQuantity",
	11: "paymentAmount",
	12: "freightAmount",
	13: "settlementAmount",
	14: "discountAmount",
	15: "singleCast",
	16: "couponID",
	17: "orderID",
	18: "goodsVersion",
}

type BaseOrderGoods struct {
	MerchantName     string `thrift:"merchantName,1,required" frugal:"1,required,string" json:"merchantName"`
	GoodsName        int64  `thrift:"goodsName,2,required" frugal:"2,required,i64" json:"goodsName"`
	StyleName        int64  `thrift:"styleName,3,required" frugal:"3,required,i64" json:"styleName"`
	PurchaseQuantity int64  `thrift:"purchaseQuantity,4,required" frugal:"4,required,i64" json:"purchaseQuantity"`
	StyleHeadDrawing string `thrift:"styleHeadDrawing,5,required" frugal:"5,required,string" json:"styleHeadDrawing"`
	CouponID         int64  `thrift:"couponID,6" frugal:"6,default,i64" json:"couponID"`
}

func NewBaseOrderGoods() *BaseOrderGoods {
	return &BaseOrderGoods{}
}

func (p *BaseOrderGoods) InitDefault() {
}

func (p *BaseOrderGoods) GetMerchantName() (v string) {
	return p.MerchantName
}

func (p *BaseOrderGoods) GetGoodsName() (v int64) {
	return p.GoodsName
}

func (p *BaseOrderGoods) GetStyleName() (v int64) {
	return p.StyleName
}

func (p *BaseOrderGoods) GetPurchaseQuantity() (v int64) {
	return p.PurchaseQuantity
}

func (p *BaseOrderGoods) GetStyleHeadDrawing() (v string) {
	return p.StyleHeadDrawing
}

func (p *BaseOrderGoods) GetCouponID() (v int64) {
	return p.CouponID
}
func (p *BaseOrderGoods) SetMerchantName(val string) {
	p.MerchantName = val
}
func (p *BaseOrderGoods) SetGoodsName(val int64) {
	p.GoodsName = val
}
func (p *BaseOrderGoods) SetStyleName(val int64) {
	p.StyleName = val
}
func (p *BaseOrderGoods) SetPurchaseQuantity(val int64) {
	p.PurchaseQuantity = val
}
func (p *BaseOrderGoods) SetStyleHeadDrawing(val string) {
	p.StyleHeadDrawing = val
}
func (p *BaseOrderGoods) SetCouponID(val int64) {
	p.CouponID = val
}

func (p *BaseOrderGoods) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BaseOrderGoods(%+v)", *p)
}

func (p *BaseOrderGoods) DeepEqual(ano *BaseOrderGoods) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.MerchantName) {
		return false
	}
	if !p.Field2DeepEqual(ano.GoodsName) {
		return false
	}
	if !p.Field3DeepEqual(ano.StyleName) {
		return false
	}
	if !p.Field4DeepEqual(ano.PurchaseQuantity) {
		return false
	}
	if !p.Field5DeepEqual(ano.StyleHeadDrawing) {
		return false
	}
	if !p.Field6DeepEqual(ano.CouponID) {
		return false
	}
	return true
}

func (p *BaseOrderGoods) Field1DeepEqual(src string) bool {

	if strings.Compare(p.MerchantName, src) != 0 {
		return false
	}
	return true
}
func (p *BaseOrderGoods) Field2DeepEqual(src int64) bool {

	if p.GoodsName != src {
		return false
	}
	return true
}
func (p *BaseOrderGoods) Field3DeepEqual(src int64) bool {

	if p.StyleName != src {
		return false
	}
	return true
}
func (p *BaseOrderGoods) Field4DeepEqual(src int64) bool {

	if p.PurchaseQuantity != src {
		return false
	}
	return true
}
func (p *BaseOrderGoods) Field5DeepEqual(src string) bool {

	if strings.Compare(p.StyleHeadDrawing, src) != 0 {
		return false
	}
	return true
}
func (p *BaseOrderGoods) Field6DeepEqual(src int64) bool {

	if p.CouponID != src {
		return false
	}
	return true
}

var fieldIDToName_BaseOrderGoods = map[int16]string{
	1: "merchantName",
	2: "goodsName",
	3: "styleName",
	4: "purchaseQuantity",
	5: "styleHeadDrawing",
	6: "couponID",
}

type CreditCardInfo struct {
	MaskedCreditCardNumber    string `thrift:"maskedCreditCardNumber,1,required" frugal:"1,required,string" json:"maskedCreditCardNumber"`
	CreditCardExpirationYear  int64  `thrift:"creditCardExpirationYear,2,required" frugal:"2,required,i64" json:"creditCardExpirationYear"`
	CreditCardExpirationMonth int64  `thrift:"creditCardExpirationMonth,3,required" frugal:"3,required,i64" json:"creditCardExpirationMonth"`
	CreditCardCvv             int64  `thrift:"creditCardCvv,4,required" frugal:"4,required,i64" json:"creditCardCvv"`
}

func NewCreditCardInfo() *CreditCardInfo {
	return &CreditCardInfo{}
}

func (p *CreditCardInfo) InitDefault() {
}

func (p *CreditCardInfo) GetMaskedCreditCardNumber() (v string) {
	return p.MaskedCreditCardNumber
}

func (p *CreditCardInfo) GetCreditCardExpirationYear() (v int64) {
	return p.CreditCardExpirationYear
}

func (p *CreditCardInfo) GetCreditCardExpirationMonth() (v int64) {
	return p.CreditCardExpirationMonth
}

func (p *CreditCardInfo) GetCreditCardCvv() (v int64) {
	return p.CreditCardCvv
}
func (p *CreditCardInfo) SetMaskedCreditCardNumber(val string) {
	p.MaskedCreditCardNumber = val
}
func (p *CreditCardInfo) SetCreditCardExpirationYear(val int64) {
	p.CreditCardExpirationYear = val
}
func (p *CreditCardInfo) SetCreditCardExpirationMonth(val int64) {
	p.CreditCardExpirationMonth = val
}
func (p *CreditCardInfo) SetCreditCardCvv(val int64) {
	p.CreditCardCvv = val
}

func (p *CreditCardInfo) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreditCardInfo(%+v)", *p)
}

func (p *CreditCardInfo) DeepEqual(ano *CreditCardInfo) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.MaskedCreditCardNumber) {
		return false
	}
	if !p.Field2DeepEqual(ano.CreditCardExpirationYear) {
		return false
	}
	if !p.Field3DeepEqual(ano.CreditCardExpirationMonth) {
		return false
	}
	if !p.Field4DeepEqual(ano.CreditCardCvv) {
		return false
	}
	return true
}

func (p *CreditCardInfo) Field1DeepEqual(src string) bool {

	if strings.Compare(p.MaskedCreditCardNumber, src) != 0 {
		return false
	}
	return true
}
func (p *CreditCardInfo) Field2DeepEqual(src int64) bool {

	if p.CreditCardExpirationYear != src {
		return false
	}
	return true
}
func (p *CreditCardInfo) Field3DeepEqual(src int64) bool {

	if p.CreditCardExpirationMonth != src {
		return false
	}
	return true
}
func (p *CreditCardInfo) Field4DeepEqual(src int64) bool {

	if p.CreditCardCvv != src {
		return false
	}
	return true
}

var fieldIDToName_CreditCardInfo = map[int16]string{
	1: "maskedCreditCardNumber",
	2: "creditCardExpirationYear",
	3: "creditCardExpirationMonth",
	4: "creditCardCvv",
}

type PaymentTokenInfo struct {
	PaymentToken               string `thrift:"paymentToken,1,required" frugal:"1,required,string" json:"paymentToken"`
	PaymentTokenExpirationTime int64  `thrift:"paymentTokenExpirationTime,2,required" frugal:"2,required,i64" json:"paymentTokenExpirationTime"`
}

func NewPaymentTokenInfo() *PaymentTokenInfo {
	return &PaymentTokenInfo{}
}

func (p *PaymentTokenInfo) InitDefault() {
}

func (p *PaymentTokenInfo) GetPaymentToken() (v string) {
	return p.PaymentToken
}

func (p *PaymentTokenInfo) GetPaymentTokenExpirationTime() (v int64) {
	return p.PaymentTokenExpirationTime
}
func (p *PaymentTokenInfo) SetPaymentToken(val string) {
	p.PaymentToken = val
}
func (p *PaymentTokenInfo) SetPaymentTokenExpirationTime(val int64) {
	p.PaymentTokenExpirationTime = val
}

func (p *PaymentTokenInfo) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PaymentTokenInfo(%+v)", *p)
}

func (p *PaymentTokenInfo) DeepEqual(ano *PaymentTokenInfo) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.PaymentToken) {
		return false
	}
	if !p.Field2DeepEqual(ano.PaymentTokenExpirationTime) {
		return false
	}
	return true
}

func (p *PaymentTokenInfo) Field1DeepEqual(src string) bool {

	if strings.Compare(p.PaymentToken, src) != 0 {
		return false
	}
	return true
}
func (p *PaymentTokenInfo) Field2DeepEqual(src int64) bool {

	if p.PaymentTokenExpirationTime != src {
		return false
	}
	return true
}

var fieldIDToName_PaymentTokenInfo = map[int16]string{
	1: "paymentToken",
	2: "paymentTokenExpirationTime",
}

type RefundResponseInfo struct {
	RefundID int64 `thrift:"refundID,1,required" frugal:"1,required,i64" json:"refundID"`
	Status   int64 `thrift:"status,2,required" frugal:"2,required,i64" json:"status"`
}

func NewRefundResponseInfo() *RefundResponseInfo {
	return &RefundResponseInfo{}
}

func (p *RefundResponseInfo) InitDefault() {
}

func (p *RefundResponseInfo) GetRefundID() (v int64) {
	return p.RefundID
}

func (p *RefundResponseInfo) GetStatus() (v int64) {
	return p.Status
}
func (p *RefundResponseInfo) SetRefundID(val int64) {
	p.RefundID = val
}
func (p *RefundResponseInfo) SetStatus(val int64) {
	p.Status = val
}

func (p *RefundResponseInfo) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RefundResponseInfo(%+v)", *p)
}

func (p *RefundResponseInfo) DeepEqual(ano *RefundResponseInfo) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.RefundID) {
		return false
	}
	if !p.Field2DeepEqual(ano.Status) {
		return false
	}
	return true
}

func (p *RefundResponseInfo) Field1DeepEqual(src int64) bool {

	if p.RefundID != src {
		return false
	}
	return true
}
func (p *RefundResponseInfo) Field2DeepEqual(src int64) bool {

	if p.Status != src {
		return false
	}
	return true
}

var fieldIDToName_RefundResponseInfo = map[int16]string{
	1: "refundID",
	2: "status",
}
