// Code generated by Kitex v0.12.1. DO NOT EDIT.

package paymentservice

import (
	"context"
	client "github.com/cloudwego/kitex/client"
	callopt "github.com/cloudwego/kitex/client/callopt"
	payment "github.com/west2-online/DomTok/kitex_gen/payment"
)

// Client is designed to provide IDL-compatible methods with call-option parameter for kitex framework.
type Client interface {
	ProcessPayment(ctx context.Context, request *payment.PaymentRequest, callOptions ...callopt.Option) (r *payment.PaymentResponse, err error)
	RequestPaymentToken(ctx context.Context, request *payment.PaymentTokenRequest, callOptions ...callopt.Option) (r *payment.PaymentTokenResponse, err error)
	ProcessRefund(ctx context.Context, request *payment.RefundRequest, callOptions ...callopt.Option) (r *payment.RefundResponse, err error)
	RequestRefundInfo(ctx context.Context, request *payment.RefundTokenRequest, callOptions ...callopt.Option) (r *payment.RefundTokenResponse, err error)
}

// NewClient creates a client for the service defined in IDL.
func NewClient(destService string, opts ...client.Option) (Client, error) {
	var options []client.Option
	options = append(options, client.WithDestService(destService))

	options = append(options, opts...)

	kc, err := client.NewClient(serviceInfoForClient(), options...)
	if err != nil {
		return nil, err
	}
	return &kPaymentServiceClient{
		kClient: newServiceClient(kc),
	}, nil
}

// MustNewClient creates a client for the service defined in IDL. It panics if any error occurs.
func MustNewClient(destService string, opts ...client.Option) Client {
	kc, err := NewClient(destService, opts...)
	if err != nil {
		panic(err)
	}
	return kc
}

type kPaymentServiceClient struct {
	*kClient
}

func (p *kPaymentServiceClient) ProcessPayment(ctx context.Context, request *payment.PaymentRequest, callOptions ...callopt.Option) (r *payment.PaymentResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.ProcessPayment(ctx, request)
}

func (p *kPaymentServiceClient) RequestPaymentToken(ctx context.Context, request *payment.PaymentTokenRequest, callOptions ...callopt.Option) (r *payment.PaymentTokenResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.RequestPaymentToken(ctx, request)
}

func (p *kPaymentServiceClient) ProcessRefund(ctx context.Context, request *payment.RefundRequest, callOptions ...callopt.Option) (r *payment.RefundResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.ProcessRefund(ctx, request)
}

func (p *kPaymentServiceClient) RequestRefundInfo(ctx context.Context, request *payment.RefundTokenRequest, callOptions ...callopt.Option) (r *payment.RefundTokenResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.RequestRefundInfo(ctx, request)
}
