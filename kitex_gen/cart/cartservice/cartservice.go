/*
Copyright 2024 The west2-online Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kitex v0.12.0. DO NOT EDIT.

package cartservice

import (
	"context"
	"errors"

	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"

	cart "github.com/west2-online/DomTok/kitex_gen/cart"
)

var errInvalidMessageType = errors.New("invalid message type for service method handler")

var serviceMethods = map[string]kitex.MethodInfo{
	"AddGoodsIntoCart": kitex.NewMethodInfo(
		addGoodsIntoCartHandler,
		newCartServiceAddGoodsIntoCartArgs,
		newCartServiceAddGoodsIntoCartResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"ShowCartGoodsList": kitex.NewMethodInfo(
		showCartGoodsListHandler,
		newCartServiceShowCartGoodsListArgs,
		newCartServiceShowCartGoodsListResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"UpdateCartGoods": kitex.NewMethodInfo(
		updateCartGoodsHandler,
		newCartServiceUpdateCartGoodsArgs,
		newCartServiceUpdateCartGoodsResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"PurChaseCartGoods": kitex.NewMethodInfo(
		purChaseCartGoodsHandler,
		newCartServicePurChaseCartGoodsArgs,
		newCartServicePurChaseCartGoodsResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"DeleteAllCartGoods": kitex.NewMethodInfo(
		deleteAllCartGoodsHandler,
		newCartServiceDeleteAllCartGoodsArgs,
		newCartServiceDeleteAllCartGoodsResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
}

var (
	cartServiceServiceInfo                = NewServiceInfo()
	cartServiceServiceInfoForClient       = NewServiceInfoForClient()
	cartServiceServiceInfoForStreamClient = NewServiceInfoForStreamClient()
)

// for server
func serviceInfo() *kitex.ServiceInfo {
	return cartServiceServiceInfo
}

// for stream client
func serviceInfoForStreamClient() *kitex.ServiceInfo {
	return cartServiceServiceInfoForStreamClient
}

// for client
func serviceInfoForClient() *kitex.ServiceInfo {
	return cartServiceServiceInfoForClient
}

// NewServiceInfo creates a new ServiceInfo containing all methods
func NewServiceInfo() *kitex.ServiceInfo {
	return newServiceInfo(false, true, true)
}

// NewServiceInfo creates a new ServiceInfo containing non-streaming methods
func NewServiceInfoForClient() *kitex.ServiceInfo {
	return newServiceInfo(false, false, true)
}
func NewServiceInfoForStreamClient() *kitex.ServiceInfo {
	return newServiceInfo(true, true, false)
}

func newServiceInfo(hasStreaming bool, keepStreamingMethods bool, keepNonStreamingMethods bool) *kitex.ServiceInfo {
	serviceName := "CartService"
	handlerType := (*cart.CartService)(nil)
	methods := map[string]kitex.MethodInfo{}
	for name, m := range serviceMethods {
		if m.IsStreaming() && !keepStreamingMethods {
			continue
		}
		if !m.IsStreaming() && !keepNonStreamingMethods {
			continue
		}
		methods[name] = m
	}
	extra := map[string]interface{}{
		"PackageName": "cart",
	}
	if hasStreaming {
		extra["streaming"] = hasStreaming
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.12.0",
		Extra:           extra,
	}
	return svcInfo
}

func addGoodsIntoCartHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*cart.CartServiceAddGoodsIntoCartArgs)
	realResult := result.(*cart.CartServiceAddGoodsIntoCartResult)
	success, err := handler.(cart.CartService).AddGoodsIntoCart(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newCartServiceAddGoodsIntoCartArgs() interface{} {
	return cart.NewCartServiceAddGoodsIntoCartArgs()
}

func newCartServiceAddGoodsIntoCartResult() interface{} {
	return cart.NewCartServiceAddGoodsIntoCartResult()
}

func showCartGoodsListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*cart.CartServiceShowCartGoodsListArgs)
	realResult := result.(*cart.CartServiceShowCartGoodsListResult)
	success, err := handler.(cart.CartService).ShowCartGoodsList(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newCartServiceShowCartGoodsListArgs() interface{} {
	return cart.NewCartServiceShowCartGoodsListArgs()
}

func newCartServiceShowCartGoodsListResult() interface{} {
	return cart.NewCartServiceShowCartGoodsListResult()
}

func updateCartGoodsHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*cart.CartServiceUpdateCartGoodsArgs)
	realResult := result.(*cart.CartServiceUpdateCartGoodsResult)
	success, err := handler.(cart.CartService).UpdateCartGoods(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newCartServiceUpdateCartGoodsArgs() interface{} {
	return cart.NewCartServiceUpdateCartGoodsArgs()
}

func newCartServiceUpdateCartGoodsResult() interface{} {
	return cart.NewCartServiceUpdateCartGoodsResult()
}

func purChaseCartGoodsHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*cart.CartServicePurChaseCartGoodsArgs)
	realResult := result.(*cart.CartServicePurChaseCartGoodsResult)
	success, err := handler.(cart.CartService).PurChaseCartGoods(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newCartServicePurChaseCartGoodsArgs() interface{} {
	return cart.NewCartServicePurChaseCartGoodsArgs()
}

func newCartServicePurChaseCartGoodsResult() interface{} {
	return cart.NewCartServicePurChaseCartGoodsResult()
}

func deleteAllCartGoodsHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*cart.CartServiceDeleteAllCartGoodsArgs)
	realResult := result.(*cart.CartServiceDeleteAllCartGoodsResult)
	success, err := handler.(cart.CartService).DeleteAllCartGoods(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newCartServiceDeleteAllCartGoodsArgs() interface{} {
	return cart.NewCartServiceDeleteAllCartGoodsArgs()
}

func newCartServiceDeleteAllCartGoodsResult() interface{} {
	return cart.NewCartServiceDeleteAllCartGoodsResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) AddGoodsIntoCart(ctx context.Context, req *cart.AddGoodsIntoCartRequest) (r *cart.AddGoodsIntoCartResponse, err error) {
	var _args cart.CartServiceAddGoodsIntoCartArgs
	_args.Req = req
	var _result cart.CartServiceAddGoodsIntoCartResult
	if err = p.c.Call(ctx, "AddGoodsIntoCart", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ShowCartGoodsList(ctx context.Context, req *cart.ShowCartGoodsListRequest) (r *cart.ShowCartGoodsListResponse, err error) {
	var _args cart.CartServiceShowCartGoodsListArgs
	_args.Req = req
	var _result cart.CartServiceShowCartGoodsListResult
	if err = p.c.Call(ctx, "ShowCartGoodsList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UpdateCartGoods(ctx context.Context, req *cart.UpdateCartGoodsRequest) (r *cart.UpdateCartGoodsResponse, err error) {
	var _args cart.CartServiceUpdateCartGoodsArgs
	_args.Req = req
	var _result cart.CartServiceUpdateCartGoodsResult
	if err = p.c.Call(ctx, "UpdateCartGoods", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) PurChaseCartGoods(ctx context.Context, req *cart.PurChaseCartGoodsRequest) (r *cart.PurChaseCartGoodsResponse, err error) {
	var _args cart.CartServicePurChaseCartGoodsArgs
	_args.Req = req
	var _result cart.CartServicePurChaseCartGoodsResult
	if err = p.c.Call(ctx, "PurChaseCartGoods", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) DeleteAllCartGoods(ctx context.Context, req *cart.DeleteAllCartGoodsRequest) (r *cart.DeleteAllCartGoodsResponse, err error) {
	var _args cart.CartServiceDeleteAllCartGoodsArgs
	_args.Req = req
	var _result cart.CartServiceDeleteAllCartGoodsResult
	if err = p.c.Call(ctx, "DeleteAllCartGoods", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
