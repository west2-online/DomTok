/*
Copyright 2024 The west2-online Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by thriftgo (0.3.18). DO NOT EDIT.

package cart

import (
	"context"
	"fmt"

	"github.com/west2-online/DomTok/kitex_gen/model"
)

type AddGoodsIntoCartRequest struct {
	SkuId     int64 `thrift:"skuId,1,required" frugal:"1,required,i64" json:"skuId"`
	ShopId    int64 `thrift:"shop_id,2,required" frugal:"2,required,i64" json:"shop_id"`
	VersionId int64 `thrift:"version_id,3,required" frugal:"3,required,i64" json:"version_id"`
	Count     int64 `thrift:"count,4,required" frugal:"4,required,i64" json:"count"`
}

func NewAddGoodsIntoCartRequest() *AddGoodsIntoCartRequest {
	return &AddGoodsIntoCartRequest{}
}

func (p *AddGoodsIntoCartRequest) InitDefault() {
}

func (p *AddGoodsIntoCartRequest) GetSkuId() (v int64) {
	return p.SkuId
}

func (p *AddGoodsIntoCartRequest) GetShopId() (v int64) {
	return p.ShopId
}

func (p *AddGoodsIntoCartRequest) GetVersionId() (v int64) {
	return p.VersionId
}

func (p *AddGoodsIntoCartRequest) GetCount() (v int64) {
	return p.Count
}
func (p *AddGoodsIntoCartRequest) SetSkuId(val int64) {
	p.SkuId = val
}
func (p *AddGoodsIntoCartRequest) SetShopId(val int64) {
	p.ShopId = val
}
func (p *AddGoodsIntoCartRequest) SetVersionId(val int64) {
	p.VersionId = val
}
func (p *AddGoodsIntoCartRequest) SetCount(val int64) {
	p.Count = val
}

func (p *AddGoodsIntoCartRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AddGoodsIntoCartRequest(%+v)", *p)
}

func (p *AddGoodsIntoCartRequest) DeepEqual(ano *AddGoodsIntoCartRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.SkuId) {
		return false
	}
	if !p.Field2DeepEqual(ano.ShopId) {
		return false
	}
	if !p.Field3DeepEqual(ano.VersionId) {
		return false
	}
	if !p.Field4DeepEqual(ano.Count) {
		return false
	}
	return true
}

func (p *AddGoodsIntoCartRequest) Field1DeepEqual(src int64) bool {

	if p.SkuId != src {
		return false
	}
	return true
}
func (p *AddGoodsIntoCartRequest) Field2DeepEqual(src int64) bool {

	if p.ShopId != src {
		return false
	}
	return true
}
func (p *AddGoodsIntoCartRequest) Field3DeepEqual(src int64) bool {

	if p.VersionId != src {
		return false
	}
	return true
}
func (p *AddGoodsIntoCartRequest) Field4DeepEqual(src int64) bool {

	if p.Count != src {
		return false
	}
	return true
}

var fieldIDToName_AddGoodsIntoCartRequest = map[int16]string{
	1: "skuId",
	2: "shop_id",
	3: "version_id",
	4: "count",
}

type AddGoodsIntoCartResponse struct {
	Base *model.BaseResp `thrift:"base,1,required" frugal:"1,required,model.BaseResp" json:"base"`
}

func NewAddGoodsIntoCartResponse() *AddGoodsIntoCartResponse {
	return &AddGoodsIntoCartResponse{}
}

func (p *AddGoodsIntoCartResponse) InitDefault() {
}

var AddGoodsIntoCartResponse_Base_DEFAULT *model.BaseResp

func (p *AddGoodsIntoCartResponse) GetBase() (v *model.BaseResp) {
	if !p.IsSetBase() {
		return AddGoodsIntoCartResponse_Base_DEFAULT
	}
	return p.Base
}
func (p *AddGoodsIntoCartResponse) SetBase(val *model.BaseResp) {
	p.Base = val
}

func (p *AddGoodsIntoCartResponse) IsSetBase() bool {
	return p.Base != nil
}

func (p *AddGoodsIntoCartResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AddGoodsIntoCartResponse(%+v)", *p)
}

func (p *AddGoodsIntoCartResponse) DeepEqual(ano *AddGoodsIntoCartResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Base) {
		return false
	}
	return true
}

func (p *AddGoodsIntoCartResponse) Field1DeepEqual(src *model.BaseResp) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}

var fieldIDToName_AddGoodsIntoCartResponse = map[int16]string{
	1: "base",
}

type ShowCartGoodsListRequest struct {
	PageNum int64 `thrift:"pageNum,1,required" frugal:"1,required,i64" json:"pageNum"`
}

func NewShowCartGoodsListRequest() *ShowCartGoodsListRequest {
	return &ShowCartGoodsListRequest{}
}

func (p *ShowCartGoodsListRequest) InitDefault() {
}

func (p *ShowCartGoodsListRequest) GetPageNum() (v int64) {
	return p.PageNum
}
func (p *ShowCartGoodsListRequest) SetPageNum(val int64) {
	p.PageNum = val
}

func (p *ShowCartGoodsListRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ShowCartGoodsListRequest(%+v)", *p)
}

func (p *ShowCartGoodsListRequest) DeepEqual(ano *ShowCartGoodsListRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.PageNum) {
		return false
	}
	return true
}

func (p *ShowCartGoodsListRequest) Field1DeepEqual(src int64) bool {

	if p.PageNum != src {
		return false
	}
	return true
}

var fieldIDToName_ShowCartGoodsListRequest = map[int16]string{
	1: "pageNum",
}

type ShowCartGoodsListResponse struct {
	Base       *model.BaseResp    `thrift:"base,1,required" frugal:"1,required,model.BaseResp" json:"base"`
	GoodsList  []*model.CartGoods `thrift:"goodsList,2,required" frugal:"2,required,list<model.CartGoods>" json:"goodsList"`
	GoodsCount int64              `thrift:"goodsCount,3,required" frugal:"3,required,i64" json:"goodsCount"`
}

func NewShowCartGoodsListResponse() *ShowCartGoodsListResponse {
	return &ShowCartGoodsListResponse{}
}

func (p *ShowCartGoodsListResponse) InitDefault() {
}

var ShowCartGoodsListResponse_Base_DEFAULT *model.BaseResp

func (p *ShowCartGoodsListResponse) GetBase() (v *model.BaseResp) {
	if !p.IsSetBase() {
		return ShowCartGoodsListResponse_Base_DEFAULT
	}
	return p.Base
}

func (p *ShowCartGoodsListResponse) GetGoodsList() (v []*model.CartGoods) {
	return p.GoodsList
}

func (p *ShowCartGoodsListResponse) GetGoodsCount() (v int64) {
	return p.GoodsCount
}
func (p *ShowCartGoodsListResponse) SetBase(val *model.BaseResp) {
	p.Base = val
}
func (p *ShowCartGoodsListResponse) SetGoodsList(val []*model.CartGoods) {
	p.GoodsList = val
}
func (p *ShowCartGoodsListResponse) SetGoodsCount(val int64) {
	p.GoodsCount = val
}

func (p *ShowCartGoodsListResponse) IsSetBase() bool {
	return p.Base != nil
}

func (p *ShowCartGoodsListResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ShowCartGoodsListResponse(%+v)", *p)
}

func (p *ShowCartGoodsListResponse) DeepEqual(ano *ShowCartGoodsListResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Base) {
		return false
	}
	if !p.Field2DeepEqual(ano.GoodsList) {
		return false
	}
	if !p.Field3DeepEqual(ano.GoodsCount) {
		return false
	}
	return true
}

func (p *ShowCartGoodsListResponse) Field1DeepEqual(src *model.BaseResp) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}
func (p *ShowCartGoodsListResponse) Field2DeepEqual(src []*model.CartGoods) bool {

	if len(p.GoodsList) != len(src) {
		return false
	}
	for i, v := range p.GoodsList {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *ShowCartGoodsListResponse) Field3DeepEqual(src int64) bool {

	if p.GoodsCount != src {
		return false
	}
	return true
}

var fieldIDToName_ShowCartGoodsListResponse = map[int16]string{
	1: "base",
	2: "goodsList",
	3: "goodsCount",
}

type UpdateCartGoodsRequest struct {
	SkuId  int64 `thrift:"skuId,1,required" frugal:"1,required,i64" json:"skuId"`
	ShopId int64 `thrift:"shop_id,2,required" frugal:"2,required,i64" json:"shop_id"`
	Count  int64 `thrift:"count,3,required" frugal:"3,required,i64" json:"count"`
}

func NewUpdateCartGoodsRequest() *UpdateCartGoodsRequest {
	return &UpdateCartGoodsRequest{}
}

func (p *UpdateCartGoodsRequest) InitDefault() {
}

func (p *UpdateCartGoodsRequest) GetSkuId() (v int64) {
	return p.SkuId
}

func (p *UpdateCartGoodsRequest) GetShopId() (v int64) {
	return p.ShopId
}

func (p *UpdateCartGoodsRequest) GetCount() (v int64) {
	return p.Count
}
func (p *UpdateCartGoodsRequest) SetSkuId(val int64) {
	p.SkuId = val
}
func (p *UpdateCartGoodsRequest) SetShopId(val int64) {
	p.ShopId = val
}
func (p *UpdateCartGoodsRequest) SetCount(val int64) {
	p.Count = val
}

func (p *UpdateCartGoodsRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UpdateCartGoodsRequest(%+v)", *p)
}

func (p *UpdateCartGoodsRequest) DeepEqual(ano *UpdateCartGoodsRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.SkuId) {
		return false
	}
	if !p.Field2DeepEqual(ano.ShopId) {
		return false
	}
	if !p.Field3DeepEqual(ano.Count) {
		return false
	}
	return true
}

func (p *UpdateCartGoodsRequest) Field1DeepEqual(src int64) bool {

	if p.SkuId != src {
		return false
	}
	return true
}
func (p *UpdateCartGoodsRequest) Field2DeepEqual(src int64) bool {

	if p.ShopId != src {
		return false
	}
	return true
}
func (p *UpdateCartGoodsRequest) Field3DeepEqual(src int64) bool {

	if p.Count != src {
		return false
	}
	return true
}

var fieldIDToName_UpdateCartGoodsRequest = map[int16]string{
	1: "skuId",
	2: "shop_id",
	3: "count",
}

type UpdateCartGoodsResponse struct {
	Base *model.BaseResp `thrift:"base,1,required" frugal:"1,required,model.BaseResp" json:"base"`
}

func NewUpdateCartGoodsResponse() *UpdateCartGoodsResponse {
	return &UpdateCartGoodsResponse{}
}

func (p *UpdateCartGoodsResponse) InitDefault() {
}

var UpdateCartGoodsResponse_Base_DEFAULT *model.BaseResp

func (p *UpdateCartGoodsResponse) GetBase() (v *model.BaseResp) {
	if !p.IsSetBase() {
		return UpdateCartGoodsResponse_Base_DEFAULT
	}
	return p.Base
}
func (p *UpdateCartGoodsResponse) SetBase(val *model.BaseResp) {
	p.Base = val
}

func (p *UpdateCartGoodsResponse) IsSetBase() bool {
	return p.Base != nil
}

func (p *UpdateCartGoodsResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UpdateCartGoodsResponse(%+v)", *p)
}

func (p *UpdateCartGoodsResponse) DeepEqual(ano *UpdateCartGoodsResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Base) {
		return false
	}
	return true
}

func (p *UpdateCartGoodsResponse) Field1DeepEqual(src *model.BaseResp) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}

var fieldIDToName_UpdateCartGoodsResponse = map[int16]string{
	1: "base",
}

type PurChaseCartGoodsRequest struct {
	CartGoods []*model.CartGoods `thrift:"cartGoods,1,required" frugal:"1,required,list<model.CartGoods>" json:"cartGoods"`
}

func NewPurChaseCartGoodsRequest() *PurChaseCartGoodsRequest {
	return &PurChaseCartGoodsRequest{}
}

func (p *PurChaseCartGoodsRequest) InitDefault() {
}

func (p *PurChaseCartGoodsRequest) GetCartGoods() (v []*model.CartGoods) {
	return p.CartGoods
}
func (p *PurChaseCartGoodsRequest) SetCartGoods(val []*model.CartGoods) {
	p.CartGoods = val
}

func (p *PurChaseCartGoodsRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PurChaseCartGoodsRequest(%+v)", *p)
}

func (p *PurChaseCartGoodsRequest) DeepEqual(ano *PurChaseCartGoodsRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.CartGoods) {
		return false
	}
	return true
}

func (p *PurChaseCartGoodsRequest) Field1DeepEqual(src []*model.CartGoods) bool {

	if len(p.CartGoods) != len(src) {
		return false
	}
	for i, v := range p.CartGoods {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}

var fieldIDToName_PurChaseCartGoodsRequest = map[int16]string{
	1: "cartGoods",
}

type PurChaseCartGoodsResponse struct {
	Base    *model.BaseResp `thrift:"base,1,required" frugal:"1,required,model.BaseResp" json:"base"`
	OrderId int64           `thrift:"order_id,2,required" frugal:"2,required,i64" json:"order_id"`
}

func NewPurChaseCartGoodsResponse() *PurChaseCartGoodsResponse {
	return &PurChaseCartGoodsResponse{}
}

func (p *PurChaseCartGoodsResponse) InitDefault() {
}

var PurChaseCartGoodsResponse_Base_DEFAULT *model.BaseResp

func (p *PurChaseCartGoodsResponse) GetBase() (v *model.BaseResp) {
	if !p.IsSetBase() {
		return PurChaseCartGoodsResponse_Base_DEFAULT
	}
	return p.Base
}

func (p *PurChaseCartGoodsResponse) GetOrderId() (v int64) {
	return p.OrderId
}
func (p *PurChaseCartGoodsResponse) SetBase(val *model.BaseResp) {
	p.Base = val
}
func (p *PurChaseCartGoodsResponse) SetOrderId(val int64) {
	p.OrderId = val
}

func (p *PurChaseCartGoodsResponse) IsSetBase() bool {
	return p.Base != nil
}

func (p *PurChaseCartGoodsResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PurChaseCartGoodsResponse(%+v)", *p)
}

func (p *PurChaseCartGoodsResponse) DeepEqual(ano *PurChaseCartGoodsResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Base) {
		return false
	}
	if !p.Field2DeepEqual(ano.OrderId) {
		return false
	}
	return true
}

func (p *PurChaseCartGoodsResponse) Field1DeepEqual(src *model.BaseResp) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}
func (p *PurChaseCartGoodsResponse) Field2DeepEqual(src int64) bool {

	if p.OrderId != src {
		return false
	}
	return true
}

var fieldIDToName_PurChaseCartGoodsResponse = map[int16]string{
	1: "base",
	2: "order_id",
}

type DeleteAllCartGoodsRequest struct {
}

func NewDeleteAllCartGoodsRequest() *DeleteAllCartGoodsRequest {
	return &DeleteAllCartGoodsRequest{}
}

func (p *DeleteAllCartGoodsRequest) InitDefault() {
}

func (p *DeleteAllCartGoodsRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DeleteAllCartGoodsRequest(%+v)", *p)
}

func (p *DeleteAllCartGoodsRequest) DeepEqual(ano *DeleteAllCartGoodsRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	return true
}

var fieldIDToName_DeleteAllCartGoodsRequest = map[int16]string{}

type DeleteAllCartGoodsResponse struct {
	Base *model.BaseResp `thrift:"base,1,required" frugal:"1,required,model.BaseResp" json:"base"`
}

func NewDeleteAllCartGoodsResponse() *DeleteAllCartGoodsResponse {
	return &DeleteAllCartGoodsResponse{}
}

func (p *DeleteAllCartGoodsResponse) InitDefault() {
}

var DeleteAllCartGoodsResponse_Base_DEFAULT *model.BaseResp

func (p *DeleteAllCartGoodsResponse) GetBase() (v *model.BaseResp) {
	if !p.IsSetBase() {
		return DeleteAllCartGoodsResponse_Base_DEFAULT
	}
	return p.Base
}
func (p *DeleteAllCartGoodsResponse) SetBase(val *model.BaseResp) {
	p.Base = val
}

func (p *DeleteAllCartGoodsResponse) IsSetBase() bool {
	return p.Base != nil
}

func (p *DeleteAllCartGoodsResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DeleteAllCartGoodsResponse(%+v)", *p)
}

func (p *DeleteAllCartGoodsResponse) DeepEqual(ano *DeleteAllCartGoodsResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Base) {
		return false
	}
	return true
}

func (p *DeleteAllCartGoodsResponse) Field1DeepEqual(src *model.BaseResp) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}

var fieldIDToName_DeleteAllCartGoodsResponse = map[int16]string{
	1: "base",
}

type CartService interface {
	AddGoodsIntoCart(ctx context.Context, req *AddGoodsIntoCartRequest) (r *AddGoodsIntoCartResponse, err error)

	ShowCartGoodsList(ctx context.Context, req *ShowCartGoodsListRequest) (r *ShowCartGoodsListResponse, err error)

	UpdateCartGoods(ctx context.Context, req *UpdateCartGoodsRequest) (r *UpdateCartGoodsResponse, err error)

	PurChaseCartGoods(ctx context.Context, req *PurChaseCartGoodsRequest) (r *PurChaseCartGoodsResponse, err error)

	DeleteAllCartGoods(ctx context.Context, req *DeleteAllCartGoodsRequest) (r *DeleteAllCartGoodsResponse, err error)
}

type CartServiceAddGoodsIntoCartArgs struct {
	Req *AddGoodsIntoCartRequest `thrift:"req,1" frugal:"1,default,AddGoodsIntoCartRequest" json:"req"`
}

func NewCartServiceAddGoodsIntoCartArgs() *CartServiceAddGoodsIntoCartArgs {
	return &CartServiceAddGoodsIntoCartArgs{}
}

func (p *CartServiceAddGoodsIntoCartArgs) InitDefault() {
}

var CartServiceAddGoodsIntoCartArgs_Req_DEFAULT *AddGoodsIntoCartRequest

func (p *CartServiceAddGoodsIntoCartArgs) GetReq() (v *AddGoodsIntoCartRequest) {
	if !p.IsSetReq() {
		return CartServiceAddGoodsIntoCartArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *CartServiceAddGoodsIntoCartArgs) SetReq(val *AddGoodsIntoCartRequest) {
	p.Req = val
}

func (p *CartServiceAddGoodsIntoCartArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *CartServiceAddGoodsIntoCartArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CartServiceAddGoodsIntoCartArgs(%+v)", *p)
}

func (p *CartServiceAddGoodsIntoCartArgs) DeepEqual(ano *CartServiceAddGoodsIntoCartArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *CartServiceAddGoodsIntoCartArgs) Field1DeepEqual(src *AddGoodsIntoCartRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

var fieldIDToName_CartServiceAddGoodsIntoCartArgs = map[int16]string{
	1: "req",
}

type CartServiceAddGoodsIntoCartResult struct {
	Success *AddGoodsIntoCartResponse `thrift:"success,0,optional" frugal:"0,optional,AddGoodsIntoCartResponse" json:"success,omitempty"`
}

func NewCartServiceAddGoodsIntoCartResult() *CartServiceAddGoodsIntoCartResult {
	return &CartServiceAddGoodsIntoCartResult{}
}

func (p *CartServiceAddGoodsIntoCartResult) InitDefault() {
}

var CartServiceAddGoodsIntoCartResult_Success_DEFAULT *AddGoodsIntoCartResponse

func (p *CartServiceAddGoodsIntoCartResult) GetSuccess() (v *AddGoodsIntoCartResponse) {
	if !p.IsSetSuccess() {
		return CartServiceAddGoodsIntoCartResult_Success_DEFAULT
	}
	return p.Success
}
func (p *CartServiceAddGoodsIntoCartResult) SetSuccess(x interface{}) {
	p.Success = x.(*AddGoodsIntoCartResponse)
}

func (p *CartServiceAddGoodsIntoCartResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CartServiceAddGoodsIntoCartResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CartServiceAddGoodsIntoCartResult(%+v)", *p)
}

func (p *CartServiceAddGoodsIntoCartResult) DeepEqual(ano *CartServiceAddGoodsIntoCartResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *CartServiceAddGoodsIntoCartResult) Field0DeepEqual(src *AddGoodsIntoCartResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

var fieldIDToName_CartServiceAddGoodsIntoCartResult = map[int16]string{
	0: "success",
}

type CartServiceShowCartGoodsListArgs struct {
	Req *ShowCartGoodsListRequest `thrift:"req,1" frugal:"1,default,ShowCartGoodsListRequest" json:"req"`
}

func NewCartServiceShowCartGoodsListArgs() *CartServiceShowCartGoodsListArgs {
	return &CartServiceShowCartGoodsListArgs{}
}

func (p *CartServiceShowCartGoodsListArgs) InitDefault() {
}

var CartServiceShowCartGoodsListArgs_Req_DEFAULT *ShowCartGoodsListRequest

func (p *CartServiceShowCartGoodsListArgs) GetReq() (v *ShowCartGoodsListRequest) {
	if !p.IsSetReq() {
		return CartServiceShowCartGoodsListArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *CartServiceShowCartGoodsListArgs) SetReq(val *ShowCartGoodsListRequest) {
	p.Req = val
}

func (p *CartServiceShowCartGoodsListArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *CartServiceShowCartGoodsListArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CartServiceShowCartGoodsListArgs(%+v)", *p)
}

func (p *CartServiceShowCartGoodsListArgs) DeepEqual(ano *CartServiceShowCartGoodsListArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *CartServiceShowCartGoodsListArgs) Field1DeepEqual(src *ShowCartGoodsListRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

var fieldIDToName_CartServiceShowCartGoodsListArgs = map[int16]string{
	1: "req",
}

type CartServiceShowCartGoodsListResult struct {
	Success *ShowCartGoodsListResponse `thrift:"success,0,optional" frugal:"0,optional,ShowCartGoodsListResponse" json:"success,omitempty"`
}

func NewCartServiceShowCartGoodsListResult() *CartServiceShowCartGoodsListResult {
	return &CartServiceShowCartGoodsListResult{}
}

func (p *CartServiceShowCartGoodsListResult) InitDefault() {
}

var CartServiceShowCartGoodsListResult_Success_DEFAULT *ShowCartGoodsListResponse

func (p *CartServiceShowCartGoodsListResult) GetSuccess() (v *ShowCartGoodsListResponse) {
	if !p.IsSetSuccess() {
		return CartServiceShowCartGoodsListResult_Success_DEFAULT
	}
	return p.Success
}
func (p *CartServiceShowCartGoodsListResult) SetSuccess(x interface{}) {
	p.Success = x.(*ShowCartGoodsListResponse)
}

func (p *CartServiceShowCartGoodsListResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CartServiceShowCartGoodsListResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CartServiceShowCartGoodsListResult(%+v)", *p)
}

func (p *CartServiceShowCartGoodsListResult) DeepEqual(ano *CartServiceShowCartGoodsListResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *CartServiceShowCartGoodsListResult) Field0DeepEqual(src *ShowCartGoodsListResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

var fieldIDToName_CartServiceShowCartGoodsListResult = map[int16]string{
	0: "success",
}

type CartServiceUpdateCartGoodsArgs struct {
	Req *UpdateCartGoodsRequest `thrift:"req,1" frugal:"1,default,UpdateCartGoodsRequest" json:"req"`
}

func NewCartServiceUpdateCartGoodsArgs() *CartServiceUpdateCartGoodsArgs {
	return &CartServiceUpdateCartGoodsArgs{}
}

func (p *CartServiceUpdateCartGoodsArgs) InitDefault() {
}

var CartServiceUpdateCartGoodsArgs_Req_DEFAULT *UpdateCartGoodsRequest

func (p *CartServiceUpdateCartGoodsArgs) GetReq() (v *UpdateCartGoodsRequest) {
	if !p.IsSetReq() {
		return CartServiceUpdateCartGoodsArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *CartServiceUpdateCartGoodsArgs) SetReq(val *UpdateCartGoodsRequest) {
	p.Req = val
}

func (p *CartServiceUpdateCartGoodsArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *CartServiceUpdateCartGoodsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CartServiceUpdateCartGoodsArgs(%+v)", *p)
}

func (p *CartServiceUpdateCartGoodsArgs) DeepEqual(ano *CartServiceUpdateCartGoodsArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *CartServiceUpdateCartGoodsArgs) Field1DeepEqual(src *UpdateCartGoodsRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

var fieldIDToName_CartServiceUpdateCartGoodsArgs = map[int16]string{
	1: "req",
}

type CartServiceUpdateCartGoodsResult struct {
	Success *UpdateCartGoodsResponse `thrift:"success,0,optional" frugal:"0,optional,UpdateCartGoodsResponse" json:"success,omitempty"`
}

func NewCartServiceUpdateCartGoodsResult() *CartServiceUpdateCartGoodsResult {
	return &CartServiceUpdateCartGoodsResult{}
}

func (p *CartServiceUpdateCartGoodsResult) InitDefault() {
}

var CartServiceUpdateCartGoodsResult_Success_DEFAULT *UpdateCartGoodsResponse

func (p *CartServiceUpdateCartGoodsResult) GetSuccess() (v *UpdateCartGoodsResponse) {
	if !p.IsSetSuccess() {
		return CartServiceUpdateCartGoodsResult_Success_DEFAULT
	}
	return p.Success
}
func (p *CartServiceUpdateCartGoodsResult) SetSuccess(x interface{}) {
	p.Success = x.(*UpdateCartGoodsResponse)
}

func (p *CartServiceUpdateCartGoodsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CartServiceUpdateCartGoodsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CartServiceUpdateCartGoodsResult(%+v)", *p)
}

func (p *CartServiceUpdateCartGoodsResult) DeepEqual(ano *CartServiceUpdateCartGoodsResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *CartServiceUpdateCartGoodsResult) Field0DeepEqual(src *UpdateCartGoodsResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

var fieldIDToName_CartServiceUpdateCartGoodsResult = map[int16]string{
	0: "success",
}

type CartServicePurChaseCartGoodsArgs struct {
	Req *PurChaseCartGoodsRequest `thrift:"req,1" frugal:"1,default,PurChaseCartGoodsRequest" json:"req"`
}

func NewCartServicePurChaseCartGoodsArgs() *CartServicePurChaseCartGoodsArgs {
	return &CartServicePurChaseCartGoodsArgs{}
}

func (p *CartServicePurChaseCartGoodsArgs) InitDefault() {
}

var CartServicePurChaseCartGoodsArgs_Req_DEFAULT *PurChaseCartGoodsRequest

func (p *CartServicePurChaseCartGoodsArgs) GetReq() (v *PurChaseCartGoodsRequest) {
	if !p.IsSetReq() {
		return CartServicePurChaseCartGoodsArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *CartServicePurChaseCartGoodsArgs) SetReq(val *PurChaseCartGoodsRequest) {
	p.Req = val
}

func (p *CartServicePurChaseCartGoodsArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *CartServicePurChaseCartGoodsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CartServicePurChaseCartGoodsArgs(%+v)", *p)
}

func (p *CartServicePurChaseCartGoodsArgs) DeepEqual(ano *CartServicePurChaseCartGoodsArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *CartServicePurChaseCartGoodsArgs) Field1DeepEqual(src *PurChaseCartGoodsRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

var fieldIDToName_CartServicePurChaseCartGoodsArgs = map[int16]string{
	1: "req",
}

type CartServicePurChaseCartGoodsResult struct {
	Success *PurChaseCartGoodsResponse `thrift:"success,0,optional" frugal:"0,optional,PurChaseCartGoodsResponse" json:"success,omitempty"`
}

func NewCartServicePurChaseCartGoodsResult() *CartServicePurChaseCartGoodsResult {
	return &CartServicePurChaseCartGoodsResult{}
}

func (p *CartServicePurChaseCartGoodsResult) InitDefault() {
}

var CartServicePurChaseCartGoodsResult_Success_DEFAULT *PurChaseCartGoodsResponse

func (p *CartServicePurChaseCartGoodsResult) GetSuccess() (v *PurChaseCartGoodsResponse) {
	if !p.IsSetSuccess() {
		return CartServicePurChaseCartGoodsResult_Success_DEFAULT
	}
	return p.Success
}
func (p *CartServicePurChaseCartGoodsResult) SetSuccess(x interface{}) {
	p.Success = x.(*PurChaseCartGoodsResponse)
}

func (p *CartServicePurChaseCartGoodsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CartServicePurChaseCartGoodsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CartServicePurChaseCartGoodsResult(%+v)", *p)
}

func (p *CartServicePurChaseCartGoodsResult) DeepEqual(ano *CartServicePurChaseCartGoodsResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *CartServicePurChaseCartGoodsResult) Field0DeepEqual(src *PurChaseCartGoodsResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

var fieldIDToName_CartServicePurChaseCartGoodsResult = map[int16]string{
	0: "success",
}

type CartServiceDeleteAllCartGoodsArgs struct {
	Req *DeleteAllCartGoodsRequest `thrift:"req,1" frugal:"1,default,DeleteAllCartGoodsRequest" json:"req"`
}

func NewCartServiceDeleteAllCartGoodsArgs() *CartServiceDeleteAllCartGoodsArgs {
	return &CartServiceDeleteAllCartGoodsArgs{}
}

func (p *CartServiceDeleteAllCartGoodsArgs) InitDefault() {
}

var CartServiceDeleteAllCartGoodsArgs_Req_DEFAULT *DeleteAllCartGoodsRequest

func (p *CartServiceDeleteAllCartGoodsArgs) GetReq() (v *DeleteAllCartGoodsRequest) {
	if !p.IsSetReq() {
		return CartServiceDeleteAllCartGoodsArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *CartServiceDeleteAllCartGoodsArgs) SetReq(val *DeleteAllCartGoodsRequest) {
	p.Req = val
}

func (p *CartServiceDeleteAllCartGoodsArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *CartServiceDeleteAllCartGoodsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CartServiceDeleteAllCartGoodsArgs(%+v)", *p)
}

func (p *CartServiceDeleteAllCartGoodsArgs) DeepEqual(ano *CartServiceDeleteAllCartGoodsArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *CartServiceDeleteAllCartGoodsArgs) Field1DeepEqual(src *DeleteAllCartGoodsRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

var fieldIDToName_CartServiceDeleteAllCartGoodsArgs = map[int16]string{
	1: "req",
}

type CartServiceDeleteAllCartGoodsResult struct {
	Success *DeleteAllCartGoodsResponse `thrift:"success,0,optional" frugal:"0,optional,DeleteAllCartGoodsResponse" json:"success,omitempty"`
}

func NewCartServiceDeleteAllCartGoodsResult() *CartServiceDeleteAllCartGoodsResult {
	return &CartServiceDeleteAllCartGoodsResult{}
}

func (p *CartServiceDeleteAllCartGoodsResult) InitDefault() {
}

var CartServiceDeleteAllCartGoodsResult_Success_DEFAULT *DeleteAllCartGoodsResponse

func (p *CartServiceDeleteAllCartGoodsResult) GetSuccess() (v *DeleteAllCartGoodsResponse) {
	if !p.IsSetSuccess() {
		return CartServiceDeleteAllCartGoodsResult_Success_DEFAULT
	}
	return p.Success
}
func (p *CartServiceDeleteAllCartGoodsResult) SetSuccess(x interface{}) {
	p.Success = x.(*DeleteAllCartGoodsResponse)
}

func (p *CartServiceDeleteAllCartGoodsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CartServiceDeleteAllCartGoodsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CartServiceDeleteAllCartGoodsResult(%+v)", *p)
}

func (p *CartServiceDeleteAllCartGoodsResult) DeepEqual(ano *CartServiceDeleteAllCartGoodsResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *CartServiceDeleteAllCartGoodsResult) Field0DeepEqual(src *DeleteAllCartGoodsResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

var fieldIDToName_CartServiceDeleteAllCartGoodsResult = map[int16]string{
	0: "success",
}
