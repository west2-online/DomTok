/*
Copyright 2024 The west2-online Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by thriftgo (0.3.18). DO NOT EDIT.

package cart

import (
	"fmt"
	"github.com/west2-online/DomTok/kitex_gen/model"
)

type AddGoodsIntoCartRequest struct {
	SkuId int64 `thrift:"skuId,1,required" frugal:"1,required,i64" json:"skuId"`
	Count int64 `thrift:"count,3,required" frugal:"3,required,i64" json:"count"`
}

func NewAddGoodsIntoCartRequest() *AddGoodsIntoCartRequest {
	return &AddGoodsIntoCartRequest{}
}

func (p *AddGoodsIntoCartRequest) InitDefault() {
}

func (p *AddGoodsIntoCartRequest) GetSkuId() (v int64) {
	return p.SkuId
}

func (p *AddGoodsIntoCartRequest) GetCount() (v int64) {
	return p.Count
}
func (p *AddGoodsIntoCartRequest) SetSkuId(val int64) {
	p.SkuId = val
}
func (p *AddGoodsIntoCartRequest) SetCount(val int64) {
	p.Count = val
}

func (p *AddGoodsIntoCartRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AddGoodsIntoCartRequest(%+v)", *p)
}

func (p *AddGoodsIntoCartRequest) DeepEqual(ano *AddGoodsIntoCartRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.SkuId) {
		return false
	}
	if !p.Field3DeepEqual(ano.Count) {
		return false
	}
	return true
}

func (p *AddGoodsIntoCartRequest) Field1DeepEqual(src int64) bool {

	if p.SkuId != src {
		return false
	}
	return true
}
func (p *AddGoodsIntoCartRequest) Field3DeepEqual(src int64) bool {

	if p.Count != src {
		return false
	}
	return true
}

var fieldIDToName_AddGoodsIntoCartRequest = map[int16]string{
	1: "skuId",
	3: "count",
}

type AddGoodsIntoCartResponse struct {
	Base *model.BaseResp `thrift:"base,1,required" frugal:"1,required,model.BaseResp" json:"base"`
}

func NewAddGoodsIntoCartResponse() *AddGoodsIntoCartResponse {
	return &AddGoodsIntoCartResponse{}
}

func (p *AddGoodsIntoCartResponse) InitDefault() {
}

var AddGoodsIntoCartResponse_Base_DEFAULT *model.BaseResp

func (p *AddGoodsIntoCartResponse) GetBase() (v *model.BaseResp) {
	if !p.IsSetBase() {
		return AddGoodsIntoCartResponse_Base_DEFAULT
	}
	return p.Base
}
func (p *AddGoodsIntoCartResponse) SetBase(val *model.BaseResp) {
	p.Base = val
}

func (p *AddGoodsIntoCartResponse) IsSetBase() bool {
	return p.Base != nil
}

func (p *AddGoodsIntoCartResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AddGoodsIntoCartResponse(%+v)", *p)
}

func (p *AddGoodsIntoCartResponse) DeepEqual(ano *AddGoodsIntoCartResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Base) {
		return false
	}
	return true
}

func (p *AddGoodsIntoCartResponse) Field1DeepEqual(src *model.BaseResp) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}

var fieldIDToName_AddGoodsIntoCartResponse = map[int16]string{
	1: "base",
}

type ShowCartGoodsListRequest struct {
	PageNum int64 `thrift:"pageNum,1,required" frugal:"1,required,i64" json:"pageNum"`
}

func NewShowCartGoodsListRequest() *ShowCartGoodsListRequest {
	return &ShowCartGoodsListRequest{}
}

func (p *ShowCartGoodsListRequest) InitDefault() {
}

func (p *ShowCartGoodsListRequest) GetPageNum() (v int64) {
	return p.PageNum
}
func (p *ShowCartGoodsListRequest) SetPageNum(val int64) {
	p.PageNum = val
}

func (p *ShowCartGoodsListRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ShowCartGoodsListRequest(%+v)", *p)
}

func (p *ShowCartGoodsListRequest) DeepEqual(ano *ShowCartGoodsListRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.PageNum) {
		return false
	}
	return true
}

func (p *ShowCartGoodsListRequest) Field1DeepEqual(src int64) bool {

	if p.PageNum != src {
		return false
	}
	return true
}

var fieldIDToName_ShowCartGoodsListRequest = map[int16]string{
	1: "pageNum",
}

type ShowCartGoodsListResponse struct {
	Base       *model.BaseResp `thrift:"base,1,required" frugal:"1,required,model.BaseResp" json:"base"`
	GoodsList  []*model.Sku    `thrift:"goodsList,2,required" frugal:"2,required,list<model.Sku>" json:"goodsList"`
	GoodsCount int64           `thrift:"goodsCount,3,required" frugal:"3,required,i64" json:"goodsCount"`
}

func NewShowCartGoodsListResponse() *ShowCartGoodsListResponse {
	return &ShowCartGoodsListResponse{}
}

func (p *ShowCartGoodsListResponse) InitDefault() {
}

var ShowCartGoodsListResponse_Base_DEFAULT *model.BaseResp

func (p *ShowCartGoodsListResponse) GetBase() (v *model.BaseResp) {
	if !p.IsSetBase() {
		return ShowCartGoodsListResponse_Base_DEFAULT
	}
	return p.Base
}

func (p *ShowCartGoodsListResponse) GetGoodsList() (v []*model.Sku) {
	return p.GoodsList
}

func (p *ShowCartGoodsListResponse) GetGoodsCount() (v int64) {
	return p.GoodsCount
}
func (p *ShowCartGoodsListResponse) SetBase(val *model.BaseResp) {
	p.Base = val
}
func (p *ShowCartGoodsListResponse) SetGoodsList(val []*model.Sku) {
	p.GoodsList = val
}
func (p *ShowCartGoodsListResponse) SetGoodsCount(val int64) {
	p.GoodsCount = val
}

func (p *ShowCartGoodsListResponse) IsSetBase() bool {
	return p.Base != nil
}

func (p *ShowCartGoodsListResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ShowCartGoodsListResponse(%+v)", *p)
}

func (p *ShowCartGoodsListResponse) DeepEqual(ano *ShowCartGoodsListResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Base) {
		return false
	}
	if !p.Field2DeepEqual(ano.GoodsList) {
		return false
	}
	if !p.Field3DeepEqual(ano.GoodsCount) {
		return false
	}
	return true
}

func (p *ShowCartGoodsListResponse) Field1DeepEqual(src *model.BaseResp) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}
func (p *ShowCartGoodsListResponse) Field2DeepEqual(src []*model.Sku) bool {

	if len(p.GoodsList) != len(src) {
		return false
	}
	for i, v := range p.GoodsList {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *ShowCartGoodsListResponse) Field3DeepEqual(src int64) bool {

	if p.GoodsCount != src {
		return false
	}
	return true
}

var fieldIDToName_ShowCartGoodsListResponse = map[int16]string{
	1: "base",
	2: "goodsList",
	3: "goodsCount",
}

type UpdateCartGoodsRequest struct {
	SkuId int64 `thrift:"skuId,1,required" frugal:"1,required,i64" json:"skuId"`
	Count int64 `thrift:"count,3,required" frugal:"3,required,i64" json:"count"`
}

func NewUpdateCartGoodsRequest() *UpdateCartGoodsRequest {
	return &UpdateCartGoodsRequest{}
}

func (p *UpdateCartGoodsRequest) InitDefault() {
}

func (p *UpdateCartGoodsRequest) GetSkuId() (v int64) {
	return p.SkuId
}

func (p *UpdateCartGoodsRequest) GetCount() (v int64) {
	return p.Count
}
func (p *UpdateCartGoodsRequest) SetSkuId(val int64) {
	p.SkuId = val
}
func (p *UpdateCartGoodsRequest) SetCount(val int64) {
	p.Count = val
}

func (p *UpdateCartGoodsRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UpdateCartGoodsRequest(%+v)", *p)
}

func (p *UpdateCartGoodsRequest) DeepEqual(ano *UpdateCartGoodsRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.SkuId) {
		return false
	}
	if !p.Field3DeepEqual(ano.Count) {
		return false
	}
	return true
}

func (p *UpdateCartGoodsRequest) Field1DeepEqual(src int64) bool {

	if p.SkuId != src {
		return false
	}
	return true
}
func (p *UpdateCartGoodsRequest) Field3DeepEqual(src int64) bool {

	if p.Count != src {
		return false
	}
	return true
}

var fieldIDToName_UpdateCartGoodsRequest = map[int16]string{
	1: "skuId",
	3: "count",
}

type UpdateCartGoodsResponse struct {
	Base *model.BaseResp `thrift:"base,1,required" frugal:"1,required,model.BaseResp" json:"base"`
}

func NewUpdateCartGoodsResponse() *UpdateCartGoodsResponse {
	return &UpdateCartGoodsResponse{}
}

func (p *UpdateCartGoodsResponse) InitDefault() {
}

var UpdateCartGoodsResponse_Base_DEFAULT *model.BaseResp

func (p *UpdateCartGoodsResponse) GetBase() (v *model.BaseResp) {
	if !p.IsSetBase() {
		return UpdateCartGoodsResponse_Base_DEFAULT
	}
	return p.Base
}
func (p *UpdateCartGoodsResponse) SetBase(val *model.BaseResp) {
	p.Base = val
}

func (p *UpdateCartGoodsResponse) IsSetBase() bool {
	return p.Base != nil
}

func (p *UpdateCartGoodsResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UpdateCartGoodsResponse(%+v)", *p)
}

func (p *UpdateCartGoodsResponse) DeepEqual(ano *UpdateCartGoodsResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Base) {
		return false
	}
	return true
}

func (p *UpdateCartGoodsResponse) Field1DeepEqual(src *model.BaseResp) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}

var fieldIDToName_UpdateCartGoodsResponse = map[int16]string{
	1: "base",
}

type DeleteCartGoodsRequest struct {
	SkuIdList []int64 `thrift:"sku_id_list,1,required" frugal:"1,required,list<i64>" json:"sku_id_list"`
}

func NewDeleteCartGoodsRequest() *DeleteCartGoodsRequest {
	return &DeleteCartGoodsRequest{}
}

func (p *DeleteCartGoodsRequest) InitDefault() {
}

func (p *DeleteCartGoodsRequest) GetSkuIdList() (v []int64) {
	return p.SkuIdList
}
func (p *DeleteCartGoodsRequest) SetSkuIdList(val []int64) {
	p.SkuIdList = val
}

func (p *DeleteCartGoodsRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DeleteCartGoodsRequest(%+v)", *p)
}

func (p *DeleteCartGoodsRequest) DeepEqual(ano *DeleteCartGoodsRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.SkuIdList) {
		return false
	}
	return true
}

func (p *DeleteCartGoodsRequest) Field1DeepEqual(src []int64) bool {

	if len(p.SkuIdList) != len(src) {
		return false
	}
	for i, v := range p.SkuIdList {
		_src := src[i]
		if v != _src {
			return false
		}
	}
	return true
}

var fieldIDToName_DeleteCartGoodsRequest = map[int16]string{
	1: "sku_id_list",
}

type DeleteCartGoodsResponse struct {
	Base *model.BaseResp `thrift:"base,1,required" frugal:"1,required,model.BaseResp" json:"base"`
}

func NewDeleteCartGoodsResponse() *DeleteCartGoodsResponse {
	return &DeleteCartGoodsResponse{}
}

func (p *DeleteCartGoodsResponse) InitDefault() {
}

var DeleteCartGoodsResponse_Base_DEFAULT *model.BaseResp

func (p *DeleteCartGoodsResponse) GetBase() (v *model.BaseResp) {
	if !p.IsSetBase() {
		return DeleteCartGoodsResponse_Base_DEFAULT
	}
	return p.Base
}
func (p *DeleteCartGoodsResponse) SetBase(val *model.BaseResp) {
	p.Base = val
}

func (p *DeleteCartGoodsResponse) IsSetBase() bool {
	return p.Base != nil
}

func (p *DeleteCartGoodsResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DeleteCartGoodsResponse(%+v)", *p)
}

func (p *DeleteCartGoodsResponse) DeepEqual(ano *DeleteCartGoodsResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Base) {
		return false
	}
	return true
}

func (p *DeleteCartGoodsResponse) Field1DeepEqual(src *model.BaseResp) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}

var fieldIDToName_DeleteCartGoodsResponse = map[int16]string{
	1: "base",
}

type DeleteAllCartGoodsRequest struct {
}

func NewDeleteAllCartGoodsRequest() *DeleteAllCartGoodsRequest {
	return &DeleteAllCartGoodsRequest{}
}

func (p *DeleteAllCartGoodsRequest) InitDefault() {
}

func (p *DeleteAllCartGoodsRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DeleteAllCartGoodsRequest(%+v)", *p)
}

func (p *DeleteAllCartGoodsRequest) DeepEqual(ano *DeleteAllCartGoodsRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	return true
}

var fieldIDToName_DeleteAllCartGoodsRequest = map[int16]string{}

type DeleteAllCartGoodsResponse struct {
	Base *model.BaseResp `thrift:"base,1,required" frugal:"1,required,model.BaseResp" json:"base"`
}

func NewDeleteAllCartGoodsResponse() *DeleteAllCartGoodsResponse {
	return &DeleteAllCartGoodsResponse{}
}

func (p *DeleteAllCartGoodsResponse) InitDefault() {
}

var DeleteAllCartGoodsResponse_Base_DEFAULT *model.BaseResp

func (p *DeleteAllCartGoodsResponse) GetBase() (v *model.BaseResp) {
	if !p.IsSetBase() {
		return DeleteAllCartGoodsResponse_Base_DEFAULT
	}
	return p.Base
}
func (p *DeleteAllCartGoodsResponse) SetBase(val *model.BaseResp) {
	p.Base = val
}

func (p *DeleteAllCartGoodsResponse) IsSetBase() bool {
	return p.Base != nil
}

func (p *DeleteAllCartGoodsResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DeleteAllCartGoodsResponse(%+v)", *p)
}

func (p *DeleteAllCartGoodsResponse) DeepEqual(ano *DeleteAllCartGoodsResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Base) {
		return false
	}
	return true
}

func (p *DeleteAllCartGoodsResponse) Field1DeepEqual(src *model.BaseResp) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}

var fieldIDToName_DeleteAllCartGoodsResponse = map[int16]string{
	1: "base",
}

type PayCartGoodsRequest struct {
	SkuIdList []int64 `thrift:"sku_id_list,1,required" frugal:"1,required,list<i64>" json:"sku_id_list"`
}

func NewPayCartGoodsRequest() *PayCartGoodsRequest {
	return &PayCartGoodsRequest{}
}

func (p *PayCartGoodsRequest) InitDefault() {
}

func (p *PayCartGoodsRequest) GetSkuIdList() (v []int64) {
	return p.SkuIdList
}
func (p *PayCartGoodsRequest) SetSkuIdList(val []int64) {
	p.SkuIdList = val
}

func (p *PayCartGoodsRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PayCartGoodsRequest(%+v)", *p)
}

func (p *PayCartGoodsRequest) DeepEqual(ano *PayCartGoodsRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.SkuIdList) {
		return false
	}
	return true
}

func (p *PayCartGoodsRequest) Field1DeepEqual(src []int64) bool {

	if len(p.SkuIdList) != len(src) {
		return false
	}
	for i, v := range p.SkuIdList {
		_src := src[i]
		if v != _src {
			return false
		}
	}
	return true
}

var fieldIDToName_PayCartGoodsRequest = map[int16]string{
	1: "sku_id_list",
}

type PayCartGoodsResponse struct {
	Base *model.BaseResp `thrift:"base,1,required" frugal:"1,required,model.BaseResp" json:"base"`
}

func NewPayCartGoodsResponse() *PayCartGoodsResponse {
	return &PayCartGoodsResponse{}
}

func (p *PayCartGoodsResponse) InitDefault() {
}

var PayCartGoodsResponse_Base_DEFAULT *model.BaseResp

func (p *PayCartGoodsResponse) GetBase() (v *model.BaseResp) {
	if !p.IsSetBase() {
		return PayCartGoodsResponse_Base_DEFAULT
	}
	return p.Base
}
func (p *PayCartGoodsResponse) SetBase(val *model.BaseResp) {
	p.Base = val
}

func (p *PayCartGoodsResponse) IsSetBase() bool {
	return p.Base != nil
}

func (p *PayCartGoodsResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PayCartGoodsResponse(%+v)", *p)
}

func (p *PayCartGoodsResponse) DeepEqual(ano *PayCartGoodsResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Base) {
		return false
	}
	return true
}

func (p *PayCartGoodsResponse) Field1DeepEqual(src *model.BaseResp) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}

var fieldIDToName_PayCartGoodsResponse = map[int16]string{
	1: "base",
}
