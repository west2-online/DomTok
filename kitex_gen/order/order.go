/*
Copyright 2024 The west2-online Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by thriftgo (0.3.18). DO NOT EDIT.

package order

import (
	"context"
	"fmt"
	"strings"

	"github.com/west2-online/DomTok/kitex_gen/model"
)

type CreateOrderReq struct {
	AddressID      int64                   `thrift:"addressID,1,required" frugal:"1,required,i64" json:"addressID"`
	AddressInfo    string                  `thrift:"addressInfo,2,required" frugal:"2,required,string" json:"addressInfo"`
	BaseOrderGoods []*model.BaseOrderGoods `thrift:"baseOrderGoods,3,required" frugal:"3,required,list<model.BaseOrderGoods>" json:"baseOrderGoods"`
}

func NewCreateOrderReq() *CreateOrderReq {
	return &CreateOrderReq{}
}

func (p *CreateOrderReq) InitDefault() {
}

func (p *CreateOrderReq) GetAddressID() (v int64) {
	return p.AddressID
}

func (p *CreateOrderReq) GetAddressInfo() (v string) {
	return p.AddressInfo
}

func (p *CreateOrderReq) GetBaseOrderGoods() (v []*model.BaseOrderGoods) {
	return p.BaseOrderGoods
}
func (p *CreateOrderReq) SetAddressID(val int64) {
	p.AddressID = val
}
func (p *CreateOrderReq) SetAddressInfo(val string) {
	p.AddressInfo = val
}
func (p *CreateOrderReq) SetBaseOrderGoods(val []*model.BaseOrderGoods) {
	p.BaseOrderGoods = val
}

func (p *CreateOrderReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreateOrderReq(%+v)", *p)
}

func (p *CreateOrderReq) DeepEqual(ano *CreateOrderReq) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.AddressID) {
		return false
	}
	if !p.Field2DeepEqual(ano.AddressInfo) {
		return false
	}
	if !p.Field3DeepEqual(ano.BaseOrderGoods) {
		return false
	}
	return true
}

func (p *CreateOrderReq) Field1DeepEqual(src int64) bool {

	if p.AddressID != src {
		return false
	}
	return true
}
func (p *CreateOrderReq) Field2DeepEqual(src string) bool {

	if strings.Compare(p.AddressInfo, src) != 0 {
		return false
	}
	return true
}
func (p *CreateOrderReq) Field3DeepEqual(src []*model.BaseOrderGoods) bool {

	if len(p.BaseOrderGoods) != len(src) {
		return false
	}
	for i, v := range p.BaseOrderGoods {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}

var fieldIDToName_CreateOrderReq = map[int16]string{
	1: "addressID",
	2: "addressInfo",
	3: "baseOrderGoods",
}

type CreateOrderResp struct {
	Base    *model.BaseResp `thrift:"base,1,required" frugal:"1,required,model.BaseResp" json:"base"`
	OrderID int64           `thrift:"orderID,2,required" frugal:"2,required,i64" json:"orderID"`
}

func NewCreateOrderResp() *CreateOrderResp {
	return &CreateOrderResp{}
}

func (p *CreateOrderResp) InitDefault() {
}

var CreateOrderResp_Base_DEFAULT *model.BaseResp

func (p *CreateOrderResp) GetBase() (v *model.BaseResp) {
	if !p.IsSetBase() {
		return CreateOrderResp_Base_DEFAULT
	}
	return p.Base
}

func (p *CreateOrderResp) GetOrderID() (v int64) {
	return p.OrderID
}
func (p *CreateOrderResp) SetBase(val *model.BaseResp) {
	p.Base = val
}
func (p *CreateOrderResp) SetOrderID(val int64) {
	p.OrderID = val
}

func (p *CreateOrderResp) IsSetBase() bool {
	return p.Base != nil
}

func (p *CreateOrderResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreateOrderResp(%+v)", *p)
}

func (p *CreateOrderResp) DeepEqual(ano *CreateOrderResp) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Base) {
		return false
	}
	if !p.Field2DeepEqual(ano.OrderID) {
		return false
	}
	return true
}

func (p *CreateOrderResp) Field1DeepEqual(src *model.BaseResp) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}
func (p *CreateOrderResp) Field2DeepEqual(src int64) bool {

	if p.OrderID != src {
		return false
	}
	return true
}

var fieldIDToName_CreateOrderResp = map[int16]string{
	1: "base",
	2: "orderID",
}

type ViewOrderListReq struct {
	Page int32 `thrift:"page,1" frugal:"1,default,i32" json:"page"`
	Size int32 `thrift:"size,2" frugal:"2,default,i32" json:"size"`
}

func NewViewOrderListReq() *ViewOrderListReq {
	return &ViewOrderListReq{}
}

func (p *ViewOrderListReq) InitDefault() {
}

func (p *ViewOrderListReq) GetPage() (v int32) {
	return p.Page
}

func (p *ViewOrderListReq) GetSize() (v int32) {
	return p.Size
}
func (p *ViewOrderListReq) SetPage(val int32) {
	p.Page = val
}
func (p *ViewOrderListReq) SetSize(val int32) {
	p.Size = val
}

func (p *ViewOrderListReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ViewOrderListReq(%+v)", *p)
}

func (p *ViewOrderListReq) DeepEqual(ano *ViewOrderListReq) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Page) {
		return false
	}
	if !p.Field2DeepEqual(ano.Size) {
		return false
	}
	return true
}

func (p *ViewOrderListReq) Field1DeepEqual(src int32) bool {

	if p.Page != src {
		return false
	}
	return true
}
func (p *ViewOrderListReq) Field2DeepEqual(src int32) bool {

	if p.Size != src {
		return false
	}
	return true
}

var fieldIDToName_ViewOrderListReq = map[int16]string{
	1: "page",
	2: "size",
}

type ViewOrderListResp struct {
	Base      *model.BaseResp             `thrift:"base,1,required" frugal:"1,required,model.BaseResp" json:"base"`
	Total     int32                       `thrift:"total,2,required" frugal:"2,required,i32" json:"total"`
	OrderList []*model.BaseOrderWithGoods `thrift:"orderList,3,required" frugal:"3,required,list<model.BaseOrderWithGoods>" json:"orderList"`
}

func NewViewOrderListResp() *ViewOrderListResp {
	return &ViewOrderListResp{}
}

func (p *ViewOrderListResp) InitDefault() {
}

var ViewOrderListResp_Base_DEFAULT *model.BaseResp

func (p *ViewOrderListResp) GetBase() (v *model.BaseResp) {
	if !p.IsSetBase() {
		return ViewOrderListResp_Base_DEFAULT
	}
	return p.Base
}

func (p *ViewOrderListResp) GetTotal() (v int32) {
	return p.Total
}

func (p *ViewOrderListResp) GetOrderList() (v []*model.BaseOrderWithGoods) {
	return p.OrderList
}
func (p *ViewOrderListResp) SetBase(val *model.BaseResp) {
	p.Base = val
}
func (p *ViewOrderListResp) SetTotal(val int32) {
	p.Total = val
}
func (p *ViewOrderListResp) SetOrderList(val []*model.BaseOrderWithGoods) {
	p.OrderList = val
}

func (p *ViewOrderListResp) IsSetBase() bool {
	return p.Base != nil
}

func (p *ViewOrderListResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ViewOrderListResp(%+v)", *p)
}

func (p *ViewOrderListResp) DeepEqual(ano *ViewOrderListResp) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Base) {
		return false
	}
	if !p.Field2DeepEqual(ano.Total) {
		return false
	}
	if !p.Field3DeepEqual(ano.OrderList) {
		return false
	}
	return true
}

func (p *ViewOrderListResp) Field1DeepEqual(src *model.BaseResp) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}
func (p *ViewOrderListResp) Field2DeepEqual(src int32) bool {

	if p.Total != src {
		return false
	}
	return true
}
func (p *ViewOrderListResp) Field3DeepEqual(src []*model.BaseOrderWithGoods) bool {

	if len(p.OrderList) != len(src) {
		return false
	}
	for i, v := range p.OrderList {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}

var fieldIDToName_ViewOrderListResp = map[int16]string{
	1: "base",
	2: "total",
	3: "orderList",
}

type ViewOrderReq struct {
	OrderID int64 `thrift:"orderID,1,required" frugal:"1,required,i64" json:"orderID"`
}

func NewViewOrderReq() *ViewOrderReq {
	return &ViewOrderReq{}
}

func (p *ViewOrderReq) InitDefault() {
}

func (p *ViewOrderReq) GetOrderID() (v int64) {
	return p.OrderID
}
func (p *ViewOrderReq) SetOrderID(val int64) {
	p.OrderID = val
}

func (p *ViewOrderReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ViewOrderReq(%+v)", *p)
}

func (p *ViewOrderReq) DeepEqual(ano *ViewOrderReq) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.OrderID) {
		return false
	}
	return true
}

func (p *ViewOrderReq) Field1DeepEqual(src int64) bool {

	if p.OrderID != src {
		return false
	}
	return true
}

var fieldIDToName_ViewOrderReq = map[int16]string{
	1: "orderID",
}

type ViewOrderResp struct {
	Base *model.BaseResp       `thrift:"base,1,required" frugal:"1,required,model.BaseResp" json:"base"`
	Data *model.OrderWithGoods `thrift:"data,2,required" frugal:"2,required,model.OrderWithGoods" json:"data"`
}

func NewViewOrderResp() *ViewOrderResp {
	return &ViewOrderResp{}
}

func (p *ViewOrderResp) InitDefault() {
}

var ViewOrderResp_Base_DEFAULT *model.BaseResp

func (p *ViewOrderResp) GetBase() (v *model.BaseResp) {
	if !p.IsSetBase() {
		return ViewOrderResp_Base_DEFAULT
	}
	return p.Base
}

var ViewOrderResp_Data_DEFAULT *model.OrderWithGoods

func (p *ViewOrderResp) GetData() (v *model.OrderWithGoods) {
	if !p.IsSetData() {
		return ViewOrderResp_Data_DEFAULT
	}
	return p.Data
}
func (p *ViewOrderResp) SetBase(val *model.BaseResp) {
	p.Base = val
}
func (p *ViewOrderResp) SetData(val *model.OrderWithGoods) {
	p.Data = val
}

func (p *ViewOrderResp) IsSetBase() bool {
	return p.Base != nil
}

func (p *ViewOrderResp) IsSetData() bool {
	return p.Data != nil
}

func (p *ViewOrderResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ViewOrderResp(%+v)", *p)
}

func (p *ViewOrderResp) DeepEqual(ano *ViewOrderResp) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Base) {
		return false
	}
	if !p.Field2DeepEqual(ano.Data) {
		return false
	}
	return true
}

func (p *ViewOrderResp) Field1DeepEqual(src *model.BaseResp) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}
func (p *ViewOrderResp) Field2DeepEqual(src *model.OrderWithGoods) bool {

	if !p.Data.DeepEqual(src) {
		return false
	}
	return true
}

var fieldIDToName_ViewOrderResp = map[int16]string{
	1: "base",
	2: "data",
}

type CancelOrderReq struct {
	OrderID int64 `thrift:"orderID,1,required" frugal:"1,required,i64" json:"orderID"`
}

func NewCancelOrderReq() *CancelOrderReq {
	return &CancelOrderReq{}
}

func (p *CancelOrderReq) InitDefault() {
}

func (p *CancelOrderReq) GetOrderID() (v int64) {
	return p.OrderID
}
func (p *CancelOrderReq) SetOrderID(val int64) {
	p.OrderID = val
}

func (p *CancelOrderReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CancelOrderReq(%+v)", *p)
}

func (p *CancelOrderReq) DeepEqual(ano *CancelOrderReq) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.OrderID) {
		return false
	}
	return true
}

func (p *CancelOrderReq) Field1DeepEqual(src int64) bool {

	if p.OrderID != src {
		return false
	}
	return true
}

var fieldIDToName_CancelOrderReq = map[int16]string{
	1: "orderID",
}

type CancelOrderResp struct {
	Base *model.BaseResp `thrift:"base,1,required" frugal:"1,required,model.BaseResp" json:"base"`
}

func NewCancelOrderResp() *CancelOrderResp {
	return &CancelOrderResp{}
}

func (p *CancelOrderResp) InitDefault() {
}

var CancelOrderResp_Base_DEFAULT *model.BaseResp

func (p *CancelOrderResp) GetBase() (v *model.BaseResp) {
	if !p.IsSetBase() {
		return CancelOrderResp_Base_DEFAULT
	}
	return p.Base
}
func (p *CancelOrderResp) SetBase(val *model.BaseResp) {
	p.Base = val
}

func (p *CancelOrderResp) IsSetBase() bool {
	return p.Base != nil
}

func (p *CancelOrderResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CancelOrderResp(%+v)", *p)
}

func (p *CancelOrderResp) DeepEqual(ano *CancelOrderResp) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Base) {
		return false
	}
	return true
}

func (p *CancelOrderResp) Field1DeepEqual(src *model.BaseResp) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}

var fieldIDToName_CancelOrderResp = map[int16]string{
	1: "base",
}

type ChangeDeliverAddressReq struct {
	AddressID   int64  `thrift:"addressID,1,required" frugal:"1,required,i64" json:"addressID"`
	AddressInfo string `thrift:"addressInfo,2,required" frugal:"2,required,string" json:"addressInfo"`
	OrderID     int64  `thrift:"orderID,3,required" frugal:"3,required,i64" json:"orderID"`
}

func NewChangeDeliverAddressReq() *ChangeDeliverAddressReq {
	return &ChangeDeliverAddressReq{}
}

func (p *ChangeDeliverAddressReq) InitDefault() {
}

func (p *ChangeDeliverAddressReq) GetAddressID() (v int64) {
	return p.AddressID
}

func (p *ChangeDeliverAddressReq) GetAddressInfo() (v string) {
	return p.AddressInfo
}

func (p *ChangeDeliverAddressReq) GetOrderID() (v int64) {
	return p.OrderID
}
func (p *ChangeDeliverAddressReq) SetAddressID(val int64) {
	p.AddressID = val
}
func (p *ChangeDeliverAddressReq) SetAddressInfo(val string) {
	p.AddressInfo = val
}
func (p *ChangeDeliverAddressReq) SetOrderID(val int64) {
	p.OrderID = val
}

func (p *ChangeDeliverAddressReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ChangeDeliverAddressReq(%+v)", *p)
}

func (p *ChangeDeliverAddressReq) DeepEqual(ano *ChangeDeliverAddressReq) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.AddressID) {
		return false
	}
	if !p.Field2DeepEqual(ano.AddressInfo) {
		return false
	}
	if !p.Field3DeepEqual(ano.OrderID) {
		return false
	}
	return true
}

func (p *ChangeDeliverAddressReq) Field1DeepEqual(src int64) bool {

	if p.AddressID != src {
		return false
	}
	return true
}
func (p *ChangeDeliverAddressReq) Field2DeepEqual(src string) bool {

	if strings.Compare(p.AddressInfo, src) != 0 {
		return false
	}
	return true
}
func (p *ChangeDeliverAddressReq) Field3DeepEqual(src int64) bool {

	if p.OrderID != src {
		return false
	}
	return true
}

var fieldIDToName_ChangeDeliverAddressReq = map[int16]string{
	1: "addressID",
	2: "addressInfo",
	3: "orderID",
}

type ChangeDeliverAddressResp struct {
	Base *model.BaseResp `thrift:"base,1,required" frugal:"1,required,model.BaseResp" json:"base"`
}

func NewChangeDeliverAddressResp() *ChangeDeliverAddressResp {
	return &ChangeDeliverAddressResp{}
}

func (p *ChangeDeliverAddressResp) InitDefault() {
}

var ChangeDeliverAddressResp_Base_DEFAULT *model.BaseResp

func (p *ChangeDeliverAddressResp) GetBase() (v *model.BaseResp) {
	if !p.IsSetBase() {
		return ChangeDeliverAddressResp_Base_DEFAULT
	}
	return p.Base
}
func (p *ChangeDeliverAddressResp) SetBase(val *model.BaseResp) {
	p.Base = val
}

func (p *ChangeDeliverAddressResp) IsSetBase() bool {
	return p.Base != nil
}

func (p *ChangeDeliverAddressResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ChangeDeliverAddressResp(%+v)", *p)
}

func (p *ChangeDeliverAddressResp) DeepEqual(ano *ChangeDeliverAddressResp) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Base) {
		return false
	}
	return true
}

func (p *ChangeDeliverAddressResp) Field1DeepEqual(src *model.BaseResp) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}

var fieldIDToName_ChangeDeliverAddressResp = map[int16]string{
	1: "base",
}

type DeleteOrderReq struct {
	OrderID int64 `thrift:"orderID,1,required" frugal:"1,required,i64" json:"orderID"`
}

func NewDeleteOrderReq() *DeleteOrderReq {
	return &DeleteOrderReq{}
}

func (p *DeleteOrderReq) InitDefault() {
}

func (p *DeleteOrderReq) GetOrderID() (v int64) {
	return p.OrderID
}
func (p *DeleteOrderReq) SetOrderID(val int64) {
	p.OrderID = val
}

func (p *DeleteOrderReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DeleteOrderReq(%+v)", *p)
}

func (p *DeleteOrderReq) DeepEqual(ano *DeleteOrderReq) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.OrderID) {
		return false
	}
	return true
}

func (p *DeleteOrderReq) Field1DeepEqual(src int64) bool {

	if p.OrderID != src {
		return false
	}
	return true
}

var fieldIDToName_DeleteOrderReq = map[int16]string{
	1: "orderID",
}

type DeleteOrderResp struct {
	Base *model.BaseResp `thrift:"base,1,required" frugal:"1,required,model.BaseResp" json:"base"`
}

func NewDeleteOrderResp() *DeleteOrderResp {
	return &DeleteOrderResp{}
}

func (p *DeleteOrderResp) InitDefault() {
}

var DeleteOrderResp_Base_DEFAULT *model.BaseResp

func (p *DeleteOrderResp) GetBase() (v *model.BaseResp) {
	if !p.IsSetBase() {
		return DeleteOrderResp_Base_DEFAULT
	}
	return p.Base
}
func (p *DeleteOrderResp) SetBase(val *model.BaseResp) {
	p.Base = val
}

func (p *DeleteOrderResp) IsSetBase() bool {
	return p.Base != nil
}

func (p *DeleteOrderResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DeleteOrderResp(%+v)", *p)
}

func (p *DeleteOrderResp) DeepEqual(ano *DeleteOrderResp) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Base) {
		return false
	}
	return true
}

func (p *DeleteOrderResp) Field1DeepEqual(src *model.BaseResp) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}

var fieldIDToName_DeleteOrderResp = map[int16]string{
	1: "base",
}

type IsOrderExistReq struct {
	OrderID int64 `thrift:"orderID,1,required" frugal:"1,required,i64" json:"orderID"`
}

func NewIsOrderExistReq() *IsOrderExistReq {
	return &IsOrderExistReq{}
}

func (p *IsOrderExistReq) InitDefault() {
}

func (p *IsOrderExistReq) GetOrderID() (v int64) {
	return p.OrderID
}
func (p *IsOrderExistReq) SetOrderID(val int64) {
	p.OrderID = val
}

func (p *IsOrderExistReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("IsOrderExistReq(%+v)", *p)
}

func (p *IsOrderExistReq) DeepEqual(ano *IsOrderExistReq) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.OrderID) {
		return false
	}
	return true
}

func (p *IsOrderExistReq) Field1DeepEqual(src int64) bool {

	if p.OrderID != src {
		return false
	}
	return true
}

var fieldIDToName_IsOrderExistReq = map[int16]string{
	1: "orderID",
}

type IsOrderExistResp struct {
	Base  *model.BaseResp `thrift:"base,1,required" frugal:"1,required,model.BaseResp" json:"base"`
	Exist bool            `thrift:"exist,2,required" frugal:"2,required,bool" json:"exist"`
}

func NewIsOrderExistResp() *IsOrderExistResp {
	return &IsOrderExistResp{}
}

func (p *IsOrderExistResp) InitDefault() {
}

var IsOrderExistResp_Base_DEFAULT *model.BaseResp

func (p *IsOrderExistResp) GetBase() (v *model.BaseResp) {
	if !p.IsSetBase() {
		return IsOrderExistResp_Base_DEFAULT
	}
	return p.Base
}

func (p *IsOrderExistResp) GetExist() (v bool) {
	return p.Exist
}
func (p *IsOrderExistResp) SetBase(val *model.BaseResp) {
	p.Base = val
}
func (p *IsOrderExistResp) SetExist(val bool) {
	p.Exist = val
}

func (p *IsOrderExistResp) IsSetBase() bool {
	return p.Base != nil
}

func (p *IsOrderExistResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("IsOrderExistResp(%+v)", *p)
}

func (p *IsOrderExistResp) DeepEqual(ano *IsOrderExistResp) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Base) {
		return false
	}
	if !p.Field2DeepEqual(ano.Exist) {
		return false
	}
	return true
}

func (p *IsOrderExistResp) Field1DeepEqual(src *model.BaseResp) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}
func (p *IsOrderExistResp) Field2DeepEqual(src bool) bool {

	if p.Exist != src {
		return false
	}
	return true
}

var fieldIDToName_IsOrderExistResp = map[int16]string{
	1: "base",
	2: "exist",
}

type OrderService interface {
	CreateOrder(ctx context.Context, req *CreateOrderReq) (r *CreateOrderResp, err error)

	ViewOrderList(ctx context.Context, req *ViewOrderListReq) (r *ViewOrderListResp, err error)

	ViewOrder(ctx context.Context, req *ViewOrderReq) (r *ViewOrderResp, err error)

	CancelOrder(ctx context.Context, req *CancelOrderReq) (r *CancelOrderResp, err error)

	ChangeDeliverAddress(ctx context.Context, req *ChangeDeliverAddressReq) (r *ChangeDeliverAddressResp, err error)

	DeleteOrder(ctx context.Context, req *DeleteOrderReq) (r *DeleteOrderResp, err error)

	IsOrderExist(ctx context.Context, req *IsOrderExistReq) (r *IsOrderExistResp, err error)
}

type OrderServiceCreateOrderArgs struct {
	Req *CreateOrderReq `thrift:"req,1" frugal:"1,default,CreateOrderReq" json:"req"`
}

func NewOrderServiceCreateOrderArgs() *OrderServiceCreateOrderArgs {
	return &OrderServiceCreateOrderArgs{}
}

func (p *OrderServiceCreateOrderArgs) InitDefault() {
}

var OrderServiceCreateOrderArgs_Req_DEFAULT *CreateOrderReq

func (p *OrderServiceCreateOrderArgs) GetReq() (v *CreateOrderReq) {
	if !p.IsSetReq() {
		return OrderServiceCreateOrderArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *OrderServiceCreateOrderArgs) SetReq(val *CreateOrderReq) {
	p.Req = val
}

func (p *OrderServiceCreateOrderArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *OrderServiceCreateOrderArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("OrderServiceCreateOrderArgs(%+v)", *p)
}

func (p *OrderServiceCreateOrderArgs) DeepEqual(ano *OrderServiceCreateOrderArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *OrderServiceCreateOrderArgs) Field1DeepEqual(src *CreateOrderReq) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

var fieldIDToName_OrderServiceCreateOrderArgs = map[int16]string{
	1: "req",
}

type OrderServiceCreateOrderResult struct {
	Success *CreateOrderResp `thrift:"success,0,optional" frugal:"0,optional,CreateOrderResp" json:"success,omitempty"`
}

func NewOrderServiceCreateOrderResult() *OrderServiceCreateOrderResult {
	return &OrderServiceCreateOrderResult{}
}

func (p *OrderServiceCreateOrderResult) InitDefault() {
}

var OrderServiceCreateOrderResult_Success_DEFAULT *CreateOrderResp

func (p *OrderServiceCreateOrderResult) GetSuccess() (v *CreateOrderResp) {
	if !p.IsSetSuccess() {
		return OrderServiceCreateOrderResult_Success_DEFAULT
	}
	return p.Success
}
func (p *OrderServiceCreateOrderResult) SetSuccess(x interface{}) {
	p.Success = x.(*CreateOrderResp)
}

func (p *OrderServiceCreateOrderResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *OrderServiceCreateOrderResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("OrderServiceCreateOrderResult(%+v)", *p)
}

func (p *OrderServiceCreateOrderResult) DeepEqual(ano *OrderServiceCreateOrderResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *OrderServiceCreateOrderResult) Field0DeepEqual(src *CreateOrderResp) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

var fieldIDToName_OrderServiceCreateOrderResult = map[int16]string{
	0: "success",
}

type OrderServiceViewOrderListArgs struct {
	Req *ViewOrderListReq `thrift:"req,1" frugal:"1,default,ViewOrderListReq" json:"req"`
}

func NewOrderServiceViewOrderListArgs() *OrderServiceViewOrderListArgs {
	return &OrderServiceViewOrderListArgs{}
}

func (p *OrderServiceViewOrderListArgs) InitDefault() {
}

var OrderServiceViewOrderListArgs_Req_DEFAULT *ViewOrderListReq

func (p *OrderServiceViewOrderListArgs) GetReq() (v *ViewOrderListReq) {
	if !p.IsSetReq() {
		return OrderServiceViewOrderListArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *OrderServiceViewOrderListArgs) SetReq(val *ViewOrderListReq) {
	p.Req = val
}

func (p *OrderServiceViewOrderListArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *OrderServiceViewOrderListArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("OrderServiceViewOrderListArgs(%+v)", *p)
}

func (p *OrderServiceViewOrderListArgs) DeepEqual(ano *OrderServiceViewOrderListArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *OrderServiceViewOrderListArgs) Field1DeepEqual(src *ViewOrderListReq) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

var fieldIDToName_OrderServiceViewOrderListArgs = map[int16]string{
	1: "req",
}

type OrderServiceViewOrderListResult struct {
	Success *ViewOrderListResp `thrift:"success,0,optional" frugal:"0,optional,ViewOrderListResp" json:"success,omitempty"`
}

func NewOrderServiceViewOrderListResult() *OrderServiceViewOrderListResult {
	return &OrderServiceViewOrderListResult{}
}

func (p *OrderServiceViewOrderListResult) InitDefault() {
}

var OrderServiceViewOrderListResult_Success_DEFAULT *ViewOrderListResp

func (p *OrderServiceViewOrderListResult) GetSuccess() (v *ViewOrderListResp) {
	if !p.IsSetSuccess() {
		return OrderServiceViewOrderListResult_Success_DEFAULT
	}
	return p.Success
}
func (p *OrderServiceViewOrderListResult) SetSuccess(x interface{}) {
	p.Success = x.(*ViewOrderListResp)
}

func (p *OrderServiceViewOrderListResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *OrderServiceViewOrderListResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("OrderServiceViewOrderListResult(%+v)", *p)
}

func (p *OrderServiceViewOrderListResult) DeepEqual(ano *OrderServiceViewOrderListResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *OrderServiceViewOrderListResult) Field0DeepEqual(src *ViewOrderListResp) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

var fieldIDToName_OrderServiceViewOrderListResult = map[int16]string{
	0: "success",
}

type OrderServiceViewOrderArgs struct {
	Req *ViewOrderReq `thrift:"req,1" frugal:"1,default,ViewOrderReq" json:"req"`
}

func NewOrderServiceViewOrderArgs() *OrderServiceViewOrderArgs {
	return &OrderServiceViewOrderArgs{}
}

func (p *OrderServiceViewOrderArgs) InitDefault() {
}

var OrderServiceViewOrderArgs_Req_DEFAULT *ViewOrderReq

func (p *OrderServiceViewOrderArgs) GetReq() (v *ViewOrderReq) {
	if !p.IsSetReq() {
		return OrderServiceViewOrderArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *OrderServiceViewOrderArgs) SetReq(val *ViewOrderReq) {
	p.Req = val
}

func (p *OrderServiceViewOrderArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *OrderServiceViewOrderArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("OrderServiceViewOrderArgs(%+v)", *p)
}

func (p *OrderServiceViewOrderArgs) DeepEqual(ano *OrderServiceViewOrderArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *OrderServiceViewOrderArgs) Field1DeepEqual(src *ViewOrderReq) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

var fieldIDToName_OrderServiceViewOrderArgs = map[int16]string{
	1: "req",
}

type OrderServiceViewOrderResult struct {
	Success *ViewOrderResp `thrift:"success,0,optional" frugal:"0,optional,ViewOrderResp" json:"success,omitempty"`
}

func NewOrderServiceViewOrderResult() *OrderServiceViewOrderResult {
	return &OrderServiceViewOrderResult{}
}

func (p *OrderServiceViewOrderResult) InitDefault() {
}

var OrderServiceViewOrderResult_Success_DEFAULT *ViewOrderResp

func (p *OrderServiceViewOrderResult) GetSuccess() (v *ViewOrderResp) {
	if !p.IsSetSuccess() {
		return OrderServiceViewOrderResult_Success_DEFAULT
	}
	return p.Success
}
func (p *OrderServiceViewOrderResult) SetSuccess(x interface{}) {
	p.Success = x.(*ViewOrderResp)
}

func (p *OrderServiceViewOrderResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *OrderServiceViewOrderResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("OrderServiceViewOrderResult(%+v)", *p)
}

func (p *OrderServiceViewOrderResult) DeepEqual(ano *OrderServiceViewOrderResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *OrderServiceViewOrderResult) Field0DeepEqual(src *ViewOrderResp) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

var fieldIDToName_OrderServiceViewOrderResult = map[int16]string{
	0: "success",
}

type OrderServiceCancelOrderArgs struct {
	Req *CancelOrderReq `thrift:"req,1" frugal:"1,default,CancelOrderReq" json:"req"`
}

func NewOrderServiceCancelOrderArgs() *OrderServiceCancelOrderArgs {
	return &OrderServiceCancelOrderArgs{}
}

func (p *OrderServiceCancelOrderArgs) InitDefault() {
}

var OrderServiceCancelOrderArgs_Req_DEFAULT *CancelOrderReq

func (p *OrderServiceCancelOrderArgs) GetReq() (v *CancelOrderReq) {
	if !p.IsSetReq() {
		return OrderServiceCancelOrderArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *OrderServiceCancelOrderArgs) SetReq(val *CancelOrderReq) {
	p.Req = val
}

func (p *OrderServiceCancelOrderArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *OrderServiceCancelOrderArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("OrderServiceCancelOrderArgs(%+v)", *p)
}

func (p *OrderServiceCancelOrderArgs) DeepEqual(ano *OrderServiceCancelOrderArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *OrderServiceCancelOrderArgs) Field1DeepEqual(src *CancelOrderReq) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

var fieldIDToName_OrderServiceCancelOrderArgs = map[int16]string{
	1: "req",
}

type OrderServiceCancelOrderResult struct {
	Success *CancelOrderResp `thrift:"success,0,optional" frugal:"0,optional,CancelOrderResp" json:"success,omitempty"`
}

func NewOrderServiceCancelOrderResult() *OrderServiceCancelOrderResult {
	return &OrderServiceCancelOrderResult{}
}

func (p *OrderServiceCancelOrderResult) InitDefault() {
}

var OrderServiceCancelOrderResult_Success_DEFAULT *CancelOrderResp

func (p *OrderServiceCancelOrderResult) GetSuccess() (v *CancelOrderResp) {
	if !p.IsSetSuccess() {
		return OrderServiceCancelOrderResult_Success_DEFAULT
	}
	return p.Success
}
func (p *OrderServiceCancelOrderResult) SetSuccess(x interface{}) {
	p.Success = x.(*CancelOrderResp)
}

func (p *OrderServiceCancelOrderResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *OrderServiceCancelOrderResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("OrderServiceCancelOrderResult(%+v)", *p)
}

func (p *OrderServiceCancelOrderResult) DeepEqual(ano *OrderServiceCancelOrderResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *OrderServiceCancelOrderResult) Field0DeepEqual(src *CancelOrderResp) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

var fieldIDToName_OrderServiceCancelOrderResult = map[int16]string{
	0: "success",
}

type OrderServiceChangeDeliverAddressArgs struct {
	Req *ChangeDeliverAddressReq `thrift:"req,1" frugal:"1,default,ChangeDeliverAddressReq" json:"req"`
}

func NewOrderServiceChangeDeliverAddressArgs() *OrderServiceChangeDeliverAddressArgs {
	return &OrderServiceChangeDeliverAddressArgs{}
}

func (p *OrderServiceChangeDeliverAddressArgs) InitDefault() {
}

var OrderServiceChangeDeliverAddressArgs_Req_DEFAULT *ChangeDeliverAddressReq

func (p *OrderServiceChangeDeliverAddressArgs) GetReq() (v *ChangeDeliverAddressReq) {
	if !p.IsSetReq() {
		return OrderServiceChangeDeliverAddressArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *OrderServiceChangeDeliverAddressArgs) SetReq(val *ChangeDeliverAddressReq) {
	p.Req = val
}

func (p *OrderServiceChangeDeliverAddressArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *OrderServiceChangeDeliverAddressArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("OrderServiceChangeDeliverAddressArgs(%+v)", *p)
}

func (p *OrderServiceChangeDeliverAddressArgs) DeepEqual(ano *OrderServiceChangeDeliverAddressArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *OrderServiceChangeDeliverAddressArgs) Field1DeepEqual(src *ChangeDeliverAddressReq) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

var fieldIDToName_OrderServiceChangeDeliverAddressArgs = map[int16]string{
	1: "req",
}

type OrderServiceChangeDeliverAddressResult struct {
	Success *ChangeDeliverAddressResp `thrift:"success,0,optional" frugal:"0,optional,ChangeDeliverAddressResp" json:"success,omitempty"`
}

func NewOrderServiceChangeDeliverAddressResult() *OrderServiceChangeDeliverAddressResult {
	return &OrderServiceChangeDeliverAddressResult{}
}

func (p *OrderServiceChangeDeliverAddressResult) InitDefault() {
}

var OrderServiceChangeDeliverAddressResult_Success_DEFAULT *ChangeDeliverAddressResp

func (p *OrderServiceChangeDeliverAddressResult) GetSuccess() (v *ChangeDeliverAddressResp) {
	if !p.IsSetSuccess() {
		return OrderServiceChangeDeliverAddressResult_Success_DEFAULT
	}
	return p.Success
}
func (p *OrderServiceChangeDeliverAddressResult) SetSuccess(x interface{}) {
	p.Success = x.(*ChangeDeliverAddressResp)
}

func (p *OrderServiceChangeDeliverAddressResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *OrderServiceChangeDeliverAddressResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("OrderServiceChangeDeliverAddressResult(%+v)", *p)
}

func (p *OrderServiceChangeDeliverAddressResult) DeepEqual(ano *OrderServiceChangeDeliverAddressResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *OrderServiceChangeDeliverAddressResult) Field0DeepEqual(src *ChangeDeliverAddressResp) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

var fieldIDToName_OrderServiceChangeDeliverAddressResult = map[int16]string{
	0: "success",
}

type OrderServiceDeleteOrderArgs struct {
	Req *DeleteOrderReq `thrift:"req,1" frugal:"1,default,DeleteOrderReq" json:"req"`
}

func NewOrderServiceDeleteOrderArgs() *OrderServiceDeleteOrderArgs {
	return &OrderServiceDeleteOrderArgs{}
}

func (p *OrderServiceDeleteOrderArgs) InitDefault() {
}

var OrderServiceDeleteOrderArgs_Req_DEFAULT *DeleteOrderReq

func (p *OrderServiceDeleteOrderArgs) GetReq() (v *DeleteOrderReq) {
	if !p.IsSetReq() {
		return OrderServiceDeleteOrderArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *OrderServiceDeleteOrderArgs) SetReq(val *DeleteOrderReq) {
	p.Req = val
}

func (p *OrderServiceDeleteOrderArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *OrderServiceDeleteOrderArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("OrderServiceDeleteOrderArgs(%+v)", *p)
}

func (p *OrderServiceDeleteOrderArgs) DeepEqual(ano *OrderServiceDeleteOrderArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *OrderServiceDeleteOrderArgs) Field1DeepEqual(src *DeleteOrderReq) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

var fieldIDToName_OrderServiceDeleteOrderArgs = map[int16]string{
	1: "req",
}

type OrderServiceDeleteOrderResult struct {
	Success *DeleteOrderResp `thrift:"success,0,optional" frugal:"0,optional,DeleteOrderResp" json:"success,omitempty"`
}

func NewOrderServiceDeleteOrderResult() *OrderServiceDeleteOrderResult {
	return &OrderServiceDeleteOrderResult{}
}

func (p *OrderServiceDeleteOrderResult) InitDefault() {
}

var OrderServiceDeleteOrderResult_Success_DEFAULT *DeleteOrderResp

func (p *OrderServiceDeleteOrderResult) GetSuccess() (v *DeleteOrderResp) {
	if !p.IsSetSuccess() {
		return OrderServiceDeleteOrderResult_Success_DEFAULT
	}
	return p.Success
}
func (p *OrderServiceDeleteOrderResult) SetSuccess(x interface{}) {
	p.Success = x.(*DeleteOrderResp)
}

func (p *OrderServiceDeleteOrderResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *OrderServiceDeleteOrderResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("OrderServiceDeleteOrderResult(%+v)", *p)
}

func (p *OrderServiceDeleteOrderResult) DeepEqual(ano *OrderServiceDeleteOrderResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *OrderServiceDeleteOrderResult) Field0DeepEqual(src *DeleteOrderResp) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

var fieldIDToName_OrderServiceDeleteOrderResult = map[int16]string{
	0: "success",
}

type OrderServiceIsOrderExistArgs struct {
	Req *IsOrderExistReq `thrift:"req,1" frugal:"1,default,IsOrderExistReq" json:"req"`
}

func NewOrderServiceIsOrderExistArgs() *OrderServiceIsOrderExistArgs {
	return &OrderServiceIsOrderExistArgs{}
}

func (p *OrderServiceIsOrderExistArgs) InitDefault() {
}

var OrderServiceIsOrderExistArgs_Req_DEFAULT *IsOrderExistReq

func (p *OrderServiceIsOrderExistArgs) GetReq() (v *IsOrderExistReq) {
	if !p.IsSetReq() {
		return OrderServiceIsOrderExistArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *OrderServiceIsOrderExistArgs) SetReq(val *IsOrderExistReq) {
	p.Req = val
}

func (p *OrderServiceIsOrderExistArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *OrderServiceIsOrderExistArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("OrderServiceIsOrderExistArgs(%+v)", *p)
}

func (p *OrderServiceIsOrderExistArgs) DeepEqual(ano *OrderServiceIsOrderExistArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *OrderServiceIsOrderExistArgs) Field1DeepEqual(src *IsOrderExistReq) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

var fieldIDToName_OrderServiceIsOrderExistArgs = map[int16]string{
	1: "req",
}

type OrderServiceIsOrderExistResult struct {
	Success *IsOrderExistResp `thrift:"success,0,optional" frugal:"0,optional,IsOrderExistResp" json:"success,omitempty"`
}

func NewOrderServiceIsOrderExistResult() *OrderServiceIsOrderExistResult {
	return &OrderServiceIsOrderExistResult{}
}

func (p *OrderServiceIsOrderExistResult) InitDefault() {
}

var OrderServiceIsOrderExistResult_Success_DEFAULT *IsOrderExistResp

func (p *OrderServiceIsOrderExistResult) GetSuccess() (v *IsOrderExistResp) {
	if !p.IsSetSuccess() {
		return OrderServiceIsOrderExistResult_Success_DEFAULT
	}
	return p.Success
}
func (p *OrderServiceIsOrderExistResult) SetSuccess(x interface{}) {
	p.Success = x.(*IsOrderExistResp)
}

func (p *OrderServiceIsOrderExistResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *OrderServiceIsOrderExistResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("OrderServiceIsOrderExistResult(%+v)", *p)
}

func (p *OrderServiceIsOrderExistResult) DeepEqual(ano *OrderServiceIsOrderExistResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *OrderServiceIsOrderExistResult) Field0DeepEqual(src *IsOrderExistResp) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

var fieldIDToName_OrderServiceIsOrderExistResult = map[int16]string{
	0: "success",
}
