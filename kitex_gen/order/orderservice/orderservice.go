/*
Copyright 2024 The west2-online Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kitex v0.12.1. DO NOT EDIT.

package orderservice

import (
	"context"
	"errors"

	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"

	order "github.com/west2-online/DomTok/kitex_gen/order"
)

var errInvalidMessageType = errors.New("invalid message type for service method handler")

var serviceMethods = map[string]kitex.MethodInfo{
	"CreateOrder": kitex.NewMethodInfo(
		createOrderHandler,
		newOrderServiceCreateOrderArgs,
		newOrderServiceCreateOrderResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"ViewOrderList": kitex.NewMethodInfo(
		viewOrderListHandler,
		newOrderServiceViewOrderListArgs,
		newOrderServiceViewOrderListResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"ViewOrder": kitex.NewMethodInfo(
		viewOrderHandler,
		newOrderServiceViewOrderArgs,
		newOrderServiceViewOrderResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"CancelOrder": kitex.NewMethodInfo(
		cancelOrderHandler,
		newOrderServiceCancelOrderArgs,
		newOrderServiceCancelOrderResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"ChangeDeliverAddress": kitex.NewMethodInfo(
		changeDeliverAddressHandler,
		newOrderServiceChangeDeliverAddressArgs,
		newOrderServiceChangeDeliverAddressResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"DeleteOrder": kitex.NewMethodInfo(
		deleteOrderHandler,
		newOrderServiceDeleteOrderArgs,
		newOrderServiceDeleteOrderResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"IsOrderExist": kitex.NewMethodInfo(
		isOrderExistHandler,
		newOrderServiceIsOrderExistArgs,
		newOrderServiceIsOrderExistResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
}

var (
	orderServiceServiceInfo                = NewServiceInfo()
	orderServiceServiceInfoForClient       = NewServiceInfoForClient()
	orderServiceServiceInfoForStreamClient = NewServiceInfoForStreamClient()
)

// for server
func serviceInfo() *kitex.ServiceInfo {
	return orderServiceServiceInfo
}

// for stream client
func serviceInfoForStreamClient() *kitex.ServiceInfo {
	return orderServiceServiceInfoForStreamClient
}

// for client
func serviceInfoForClient() *kitex.ServiceInfo {
	return orderServiceServiceInfoForClient
}

// NewServiceInfo creates a new ServiceInfo containing all methods
func NewServiceInfo() *kitex.ServiceInfo {
	return newServiceInfo(false, true, true)
}

// NewServiceInfo creates a new ServiceInfo containing non-streaming methods
func NewServiceInfoForClient() *kitex.ServiceInfo {
	return newServiceInfo(false, false, true)
}
func NewServiceInfoForStreamClient() *kitex.ServiceInfo {
	return newServiceInfo(true, true, false)
}

func newServiceInfo(hasStreaming bool, keepStreamingMethods bool, keepNonStreamingMethods bool) *kitex.ServiceInfo {
	serviceName := "OrderService"
	handlerType := (*order.OrderService)(nil)
	methods := map[string]kitex.MethodInfo{}
	for name, m := range serviceMethods {
		if m.IsStreaming() && !keepStreamingMethods {
			continue
		}
		if !m.IsStreaming() && !keepNonStreamingMethods {
			continue
		}
		methods[name] = m
	}
	extra := map[string]interface{}{
		"PackageName": "order",
	}
	if hasStreaming {
		extra["streaming"] = hasStreaming
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.12.1",
		Extra:           extra,
	}
	return svcInfo
}

func createOrderHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*order.OrderServiceCreateOrderArgs)
	realResult := result.(*order.OrderServiceCreateOrderResult)
	success, err := handler.(order.OrderService).CreateOrder(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newOrderServiceCreateOrderArgs() interface{} {
	return order.NewOrderServiceCreateOrderArgs()
}

func newOrderServiceCreateOrderResult() interface{} {
	return order.NewOrderServiceCreateOrderResult()
}

func viewOrderListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*order.OrderServiceViewOrderListArgs)
	realResult := result.(*order.OrderServiceViewOrderListResult)
	success, err := handler.(order.OrderService).ViewOrderList(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newOrderServiceViewOrderListArgs() interface{} {
	return order.NewOrderServiceViewOrderListArgs()
}

func newOrderServiceViewOrderListResult() interface{} {
	return order.NewOrderServiceViewOrderListResult()
}

func viewOrderHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*order.OrderServiceViewOrderArgs)
	realResult := result.(*order.OrderServiceViewOrderResult)
	success, err := handler.(order.OrderService).ViewOrder(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newOrderServiceViewOrderArgs() interface{} {
	return order.NewOrderServiceViewOrderArgs()
}

func newOrderServiceViewOrderResult() interface{} {
	return order.NewOrderServiceViewOrderResult()
}

func cancelOrderHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*order.OrderServiceCancelOrderArgs)
	realResult := result.(*order.OrderServiceCancelOrderResult)
	success, err := handler.(order.OrderService).CancelOrder(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newOrderServiceCancelOrderArgs() interface{} {
	return order.NewOrderServiceCancelOrderArgs()
}

func newOrderServiceCancelOrderResult() interface{} {
	return order.NewOrderServiceCancelOrderResult()
}

func changeDeliverAddressHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*order.OrderServiceChangeDeliverAddressArgs)
	realResult := result.(*order.OrderServiceChangeDeliverAddressResult)
	success, err := handler.(order.OrderService).ChangeDeliverAddress(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newOrderServiceChangeDeliverAddressArgs() interface{} {
	return order.NewOrderServiceChangeDeliverAddressArgs()
}

func newOrderServiceChangeDeliverAddressResult() interface{} {
	return order.NewOrderServiceChangeDeliverAddressResult()
}

func deleteOrderHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*order.OrderServiceDeleteOrderArgs)
	realResult := result.(*order.OrderServiceDeleteOrderResult)
	success, err := handler.(order.OrderService).DeleteOrder(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newOrderServiceDeleteOrderArgs() interface{} {
	return order.NewOrderServiceDeleteOrderArgs()
}

func newOrderServiceDeleteOrderResult() interface{} {
	return order.NewOrderServiceDeleteOrderResult()
}

func isOrderExistHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*order.OrderServiceIsOrderExistArgs)
	realResult := result.(*order.OrderServiceIsOrderExistResult)
	success, err := handler.(order.OrderService).IsOrderExist(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newOrderServiceIsOrderExistArgs() interface{} {
	return order.NewOrderServiceIsOrderExistArgs()
}

func newOrderServiceIsOrderExistResult() interface{} {
	return order.NewOrderServiceIsOrderExistResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) CreateOrder(ctx context.Context, req *order.CreateOrderReq) (r *order.CreateOrderResp, err error) {
	var _args order.OrderServiceCreateOrderArgs
	_args.Req = req
	var _result order.OrderServiceCreateOrderResult
	if err = p.c.Call(ctx, "CreateOrder", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ViewOrderList(ctx context.Context, req *order.ViewOrderListReq) (r *order.ViewOrderListResp, err error) {
	var _args order.OrderServiceViewOrderListArgs
	_args.Req = req
	var _result order.OrderServiceViewOrderListResult
	if err = p.c.Call(ctx, "ViewOrderList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ViewOrder(ctx context.Context, req *order.ViewOrderReq) (r *order.ViewOrderResp, err error) {
	var _args order.OrderServiceViewOrderArgs
	_args.Req = req
	var _result order.OrderServiceViewOrderResult
	if err = p.c.Call(ctx, "ViewOrder", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) CancelOrder(ctx context.Context, req *order.CancelOrderReq) (r *order.CancelOrderResp, err error) {
	var _args order.OrderServiceCancelOrderArgs
	_args.Req = req
	var _result order.OrderServiceCancelOrderResult
	if err = p.c.Call(ctx, "CancelOrder", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ChangeDeliverAddress(ctx context.Context, req *order.ChangeDeliverAddressReq) (r *order.ChangeDeliverAddressResp, err error) {
	var _args order.OrderServiceChangeDeliverAddressArgs
	_args.Req = req
	var _result order.OrderServiceChangeDeliverAddressResult
	if err = p.c.Call(ctx, "ChangeDeliverAddress", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) DeleteOrder(ctx context.Context, req *order.DeleteOrderReq) (r *order.DeleteOrderResp, err error) {
	var _args order.OrderServiceDeleteOrderArgs
	_args.Req = req
	var _result order.OrderServiceDeleteOrderResult
	if err = p.c.Call(ctx, "DeleteOrder", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) IsOrderExist(ctx context.Context, req *order.IsOrderExistReq) (r *order.IsOrderExistResp, err error) {
	var _args order.OrderServiceIsOrderExistArgs
	_args.Req = req
	var _result order.OrderServiceIsOrderExistResult
	if err = p.c.Call(ctx, "IsOrderExist", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
