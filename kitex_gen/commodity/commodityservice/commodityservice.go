/*
Copyright 2024 The west2-online Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kitex v0.12.0. DO NOT EDIT.

package commodityservice

import (
	"context"
	"errors"
	"fmt"

	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	streaming "github.com/cloudwego/kitex/pkg/streaming"

	commodity "github.com/west2-online/DomTok/kitex_gen/commodity"
)

var errInvalidMessageType = errors.New("invalid message type for service method handler")

var serviceMethods = map[string]kitex.MethodInfo{
	"CreateCoupon": kitex.NewMethodInfo(
		createCouponHandler,
		newCommodityServiceCreateCouponArgs,
		newCommodityServiceCreateCouponResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"DeleteCoupon": kitex.NewMethodInfo(
		deleteCouponHandler,
		newCommodityServiceDeleteCouponArgs,
		newCommodityServiceDeleteCouponResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"CreateUserCoupon": kitex.NewMethodInfo(
		createUserCouponHandler,
		newCommodityServiceCreateUserCouponArgs,
		newCommodityServiceCreateUserCouponResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"ViewCoupon": kitex.NewMethodInfo(
		viewCouponHandler,
		newCommodityServiceViewCouponArgs,
		newCommodityServiceViewCouponResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"ViewUserAllCoupon": kitex.NewMethodInfo(
		viewUserAllCouponHandler,
		newCommodityServiceViewUserAllCouponArgs,
		newCommodityServiceViewUserAllCouponResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"UseUserCoupon": kitex.NewMethodInfo(
		useUserCouponHandler,
		newCommodityServiceUseUserCouponArgs,
		newCommodityServiceUseUserCouponResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"CreateSpu": kitex.NewMethodInfo(
		createSpuHandler,
		newCommodityServiceCreateSpuArgs,
		newCommodityServiceCreateSpuResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingClient),
	),
	"UpdateSpu": kitex.NewMethodInfo(
		updateSpuHandler,
		newCommodityServiceUpdateSpuArgs,
		newCommodityServiceUpdateSpuResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingClient),
	),
	"ViewSpu": kitex.NewMethodInfo(
		viewSpuHandler,
		newCommodityServiceViewSpuArgs,
		newCommodityServiceViewSpuResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"DeleteSpu": kitex.NewMethodInfo(
		deleteSpuHandler,
		newCommodityServiceDeleteSpuArgs,
		newCommodityServiceDeleteSpuResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"ViewSpuImage": kitex.NewMethodInfo(
		viewSpuImageHandler,
		newCommodityServiceViewSpuImageArgs,
		newCommodityServiceViewSpuImageResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"CreateSpuImage": kitex.NewMethodInfo(
		createSpuImageHandler,
		newCommodityServiceCreateSpuImageArgs,
		newCommodityServiceCreateSpuImageResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingClient),
	),
	"UpdateSpuImage": kitex.NewMethodInfo(
		updateSpuImageHandler,
		newCommodityServiceUpdateSpuImageArgs,
		newCommodityServiceUpdateSpuImageResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingClient),
	),
	"DeleteSpuImage": kitex.NewMethodInfo(
		deleteSpuImageHandler,
		newCommodityServiceDeleteSpuImageArgs,
		newCommodityServiceDeleteSpuImageResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"CreateSku": kitex.NewMethodInfo(
		createSkuHandler,
		newCommodityServiceCreateSkuArgs,
		newCommodityServiceCreateSkuResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"UpdateSku": kitex.NewMethodInfo(
		updateSkuHandler,
		newCommodityServiceUpdateSkuArgs,
		newCommodityServiceUpdateSkuResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"DeleteSku": kitex.NewMethodInfo(
		deleteSkuHandler,
		newCommodityServiceDeleteSkuArgs,
		newCommodityServiceDeleteSkuResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"ViewSkuImage": kitex.NewMethodInfo(
		viewSkuImageHandler,
		newCommodityServiceViewSkuImageArgs,
		newCommodityServiceViewSkuImageResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"ViewSku": kitex.NewMethodInfo(
		viewSkuHandler,
		newCommodityServiceViewSkuArgs,
		newCommodityServiceViewSkuResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"UploadSkuAttr": kitex.NewMethodInfo(
		uploadSkuAttrHandler,
		newCommodityServiceUploadSkuAttrArgs,
		newCommodityServiceUploadSkuAttrResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"ListSkuInfo": kitex.NewMethodInfo(
		listSkuInfoHandler,
		newCommodityServiceListSkuInfoArgs,
		newCommodityServiceListSkuInfoResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"ViewHistory": kitex.NewMethodInfo(
		viewHistoryHandler,
		newCommodityServiceViewHistoryArgs,
		newCommodityServiceViewHistoryResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"DescSkuLockStock": kitex.NewMethodInfo(
		descSkuLockStockHandler,
		newCommodityServiceDescSkuLockStockArgs,
		newCommodityServiceDescSkuLockStockResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"IncrSkuLockStock": kitex.NewMethodInfo(
		incrSkuLockStockHandler,
		newCommodityServiceIncrSkuLockStockArgs,
		newCommodityServiceIncrSkuLockStockResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"DescSkuStock": kitex.NewMethodInfo(
		descSkuStockHandler,
		newCommodityServiceDescSkuStockArgs,
		newCommodityServiceDescSkuStockResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"ListSpuInfo": kitex.NewMethodInfo(
		listSpuInfoHandler,
		newCommodityServiceListSpuInfoArgs,
		newCommodityServiceListSpuInfoResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"CreateCategory": kitex.NewMethodInfo(
		createCategoryHandler,
		newCommodityServiceCreateCategoryArgs,
		newCommodityServiceCreateCategoryResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"DeleteCategory": kitex.NewMethodInfo(
		deleteCategoryHandler,
		newCommodityServiceDeleteCategoryArgs,
		newCommodityServiceDeleteCategoryResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"ViewCategory": kitex.NewMethodInfo(
		viewCategoryHandler,
		newCommodityServiceViewCategoryArgs,
		newCommodityServiceViewCategoryResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"UpdateCategory": kitex.NewMethodInfo(
		updateCategoryHandler,
		newCommodityServiceUpdateCategoryArgs,
		newCommodityServiceUpdateCategoryResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
}

var (
	commodityServiceServiceInfo                = NewServiceInfo()
	commodityServiceServiceInfoForClient       = NewServiceInfoForClient()
	commodityServiceServiceInfoForStreamClient = NewServiceInfoForStreamClient()
)

// for server
func serviceInfo() *kitex.ServiceInfo {
	return commodityServiceServiceInfo
}

// for stream client
func serviceInfoForStreamClient() *kitex.ServiceInfo {
	return commodityServiceServiceInfoForStreamClient
}

// for client
func serviceInfoForClient() *kitex.ServiceInfo {
	return commodityServiceServiceInfoForClient
}

// NewServiceInfo creates a new ServiceInfo containing all methods
func NewServiceInfo() *kitex.ServiceInfo {
	return newServiceInfo(true, true, true)
}

// NewServiceInfo creates a new ServiceInfo containing non-streaming methods
func NewServiceInfoForClient() *kitex.ServiceInfo {
	return newServiceInfo(false, false, true)
}
func NewServiceInfoForStreamClient() *kitex.ServiceInfo {
	return newServiceInfo(true, true, false)
}

func newServiceInfo(hasStreaming bool, keepStreamingMethods bool, keepNonStreamingMethods bool) *kitex.ServiceInfo {
	serviceName := "CommodityService"
	handlerType := (*commodity.CommodityService)(nil)
	methods := map[string]kitex.MethodInfo{}
	for name, m := range serviceMethods {
		if m.IsStreaming() && !keepStreamingMethods {
			continue
		}
		if !m.IsStreaming() && !keepNonStreamingMethods {
			continue
		}
		methods[name] = m
	}
	extra := map[string]interface{}{
		"PackageName": "commodity",
	}
	if hasStreaming {
		extra["streaming"] = hasStreaming
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.12.0",
		Extra:           extra,
	}
	return svcInfo
}

func createCouponHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*commodity.CommodityServiceCreateCouponArgs)
	realResult := result.(*commodity.CommodityServiceCreateCouponResult)
	success, err := handler.(commodity.CommodityService).CreateCoupon(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newCommodityServiceCreateCouponArgs() interface{} {
	return commodity.NewCommodityServiceCreateCouponArgs()
}

func newCommodityServiceCreateCouponResult() interface{} {
	return commodity.NewCommodityServiceCreateCouponResult()
}

func deleteCouponHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*commodity.CommodityServiceDeleteCouponArgs)
	realResult := result.(*commodity.CommodityServiceDeleteCouponResult)
	success, err := handler.(commodity.CommodityService).DeleteCoupon(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newCommodityServiceDeleteCouponArgs() interface{} {
	return commodity.NewCommodityServiceDeleteCouponArgs()
}

func newCommodityServiceDeleteCouponResult() interface{} {
	return commodity.NewCommodityServiceDeleteCouponResult()
}

func createUserCouponHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*commodity.CommodityServiceCreateUserCouponArgs)
	realResult := result.(*commodity.CommodityServiceCreateUserCouponResult)
	success, err := handler.(commodity.CommodityService).CreateUserCoupon(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newCommodityServiceCreateUserCouponArgs() interface{} {
	return commodity.NewCommodityServiceCreateUserCouponArgs()
}

func newCommodityServiceCreateUserCouponResult() interface{} {
	return commodity.NewCommodityServiceCreateUserCouponResult()
}

func viewCouponHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*commodity.CommodityServiceViewCouponArgs)
	realResult := result.(*commodity.CommodityServiceViewCouponResult)
	success, err := handler.(commodity.CommodityService).ViewCoupon(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newCommodityServiceViewCouponArgs() interface{} {
	return commodity.NewCommodityServiceViewCouponArgs()
}

func newCommodityServiceViewCouponResult() interface{} {
	return commodity.NewCommodityServiceViewCouponResult()
}

func viewUserAllCouponHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*commodity.CommodityServiceViewUserAllCouponArgs)
	realResult := result.(*commodity.CommodityServiceViewUserAllCouponResult)
	success, err := handler.(commodity.CommodityService).ViewUserAllCoupon(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newCommodityServiceViewUserAllCouponArgs() interface{} {
	return commodity.NewCommodityServiceViewUserAllCouponArgs()
}

func newCommodityServiceViewUserAllCouponResult() interface{} {
	return commodity.NewCommodityServiceViewUserAllCouponResult()
}

func useUserCouponHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*commodity.CommodityServiceUseUserCouponArgs)
	realResult := result.(*commodity.CommodityServiceUseUserCouponResult)
	success, err := handler.(commodity.CommodityService).UseUserCoupon(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newCommodityServiceUseUserCouponArgs() interface{} {
	return commodity.NewCommodityServiceUseUserCouponArgs()
}

func newCommodityServiceUseUserCouponResult() interface{} {
	return commodity.NewCommodityServiceUseUserCouponResult()
}

func createSpuHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	st, ok := arg.(*streaming.Args)
	if !ok {
		return errors.New("CommodityService.CreateSpu is a thrift streaming method, please call with Kitex StreamClient")
	}
	stream := &commodityServiceCreateSpuServer{st.Stream}
	return handler.(commodity.CommodityService).CreateSpu(stream)
}

type commodityServiceCreateSpuClient struct {
	streaming.Stream
}

func (x *commodityServiceCreateSpuClient) DoFinish(err error) {
	if finisher, ok := x.Stream.(streaming.WithDoFinish); ok {
		finisher.DoFinish(err)
	} else {
		panic(fmt.Sprintf("streaming.WithDoFinish is not implemented by %T", x.Stream))
	}
}
func (x *commodityServiceCreateSpuClient) Send(m *commodity.CreateSpuReq) error {
	return x.Stream.SendMsg(m)
}
func (x *commodityServiceCreateSpuClient) CloseAndRecv() (*commodity.CreateSpuResp, error) {
	if err := x.Stream.Close(); err != nil {
		return nil, err
	}
	m := new(commodity.CreateSpuResp)
	return m, x.Stream.RecvMsg(m)
}

type commodityServiceCreateSpuServer struct {
	streaming.Stream
}

func (x *commodityServiceCreateSpuServer) SendAndClose(m *commodity.CreateSpuResp) error {
	return x.Stream.SendMsg(m)
}

func (x *commodityServiceCreateSpuServer) Recv() (*commodity.CreateSpuReq, error) {
	m := new(commodity.CreateSpuReq)
	return m, x.Stream.RecvMsg(m)
}

func newCommodityServiceCreateSpuArgs() interface{} {
	return commodity.NewCommodityServiceCreateSpuArgs()
}

func newCommodityServiceCreateSpuResult() interface{} {
	return commodity.NewCommodityServiceCreateSpuResult()
}

func updateSpuHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	st, ok := arg.(*streaming.Args)
	if !ok {
		return errors.New("CommodityService.UpdateSpu is a thrift streaming method, please call with Kitex StreamClient")
	}
	stream := &commodityServiceUpdateSpuServer{st.Stream}
	return handler.(commodity.CommodityService).UpdateSpu(stream)
}

type commodityServiceUpdateSpuClient struct {
	streaming.Stream
}

func (x *commodityServiceUpdateSpuClient) DoFinish(err error) {
	if finisher, ok := x.Stream.(streaming.WithDoFinish); ok {
		finisher.DoFinish(err)
	} else {
		panic(fmt.Sprintf("streaming.WithDoFinish is not implemented by %T", x.Stream))
	}
}
func (x *commodityServiceUpdateSpuClient) Send(m *commodity.UpdateSpuReq) error {
	return x.Stream.SendMsg(m)
}
func (x *commodityServiceUpdateSpuClient) CloseAndRecv() (*commodity.UpdateSpuResp, error) {
	if err := x.Stream.Close(); err != nil {
		return nil, err
	}
	m := new(commodity.UpdateSpuResp)
	return m, x.Stream.RecvMsg(m)
}

type commodityServiceUpdateSpuServer struct {
	streaming.Stream
}

func (x *commodityServiceUpdateSpuServer) SendAndClose(m *commodity.UpdateSpuResp) error {
	return x.Stream.SendMsg(m)
}

func (x *commodityServiceUpdateSpuServer) Recv() (*commodity.UpdateSpuReq, error) {
	m := new(commodity.UpdateSpuReq)
	return m, x.Stream.RecvMsg(m)
}

func newCommodityServiceUpdateSpuArgs() interface{} {
	return commodity.NewCommodityServiceUpdateSpuArgs()
}

func newCommodityServiceUpdateSpuResult() interface{} {
	return commodity.NewCommodityServiceUpdateSpuResult()
}

func viewSpuHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*commodity.CommodityServiceViewSpuArgs)
	realResult := result.(*commodity.CommodityServiceViewSpuResult)
	success, err := handler.(commodity.CommodityService).ViewSpu(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newCommodityServiceViewSpuArgs() interface{} {
	return commodity.NewCommodityServiceViewSpuArgs()
}

func newCommodityServiceViewSpuResult() interface{} {
	return commodity.NewCommodityServiceViewSpuResult()
}

func deleteSpuHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*commodity.CommodityServiceDeleteSpuArgs)
	realResult := result.(*commodity.CommodityServiceDeleteSpuResult)
	success, err := handler.(commodity.CommodityService).DeleteSpu(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newCommodityServiceDeleteSpuArgs() interface{} {
	return commodity.NewCommodityServiceDeleteSpuArgs()
}

func newCommodityServiceDeleteSpuResult() interface{} {
	return commodity.NewCommodityServiceDeleteSpuResult()
}

func viewSpuImageHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*commodity.CommodityServiceViewSpuImageArgs)
	realResult := result.(*commodity.CommodityServiceViewSpuImageResult)
	success, err := handler.(commodity.CommodityService).ViewSpuImage(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newCommodityServiceViewSpuImageArgs() interface{} {
	return commodity.NewCommodityServiceViewSpuImageArgs()
}

func newCommodityServiceViewSpuImageResult() interface{} {
	return commodity.NewCommodityServiceViewSpuImageResult()
}

func createSpuImageHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	st, ok := arg.(*streaming.Args)
	if !ok {
		return errors.New("CommodityService.CreateSpuImage is a thrift streaming method, please call with Kitex StreamClient")
	}
	stream := &commodityServiceCreateSpuImageServer{st.Stream}
	return handler.(commodity.CommodityService).CreateSpuImage(stream)
}

type commodityServiceCreateSpuImageClient struct {
	streaming.Stream
}

func (x *commodityServiceCreateSpuImageClient) DoFinish(err error) {
	if finisher, ok := x.Stream.(streaming.WithDoFinish); ok {
		finisher.DoFinish(err)
	} else {
		panic(fmt.Sprintf("streaming.WithDoFinish is not implemented by %T", x.Stream))
	}
}
func (x *commodityServiceCreateSpuImageClient) Send(m *commodity.CreateSpuImageReq) error {
	return x.Stream.SendMsg(m)
}
func (x *commodityServiceCreateSpuImageClient) CloseAndRecv() (*commodity.CreateSpuImageResp, error) {
	if err := x.Stream.Close(); err != nil {
		return nil, err
	}
	m := new(commodity.CreateSpuImageResp)
	return m, x.Stream.RecvMsg(m)
}

type commodityServiceCreateSpuImageServer struct {
	streaming.Stream
}

func (x *commodityServiceCreateSpuImageServer) SendAndClose(m *commodity.CreateSpuImageResp) error {
	return x.Stream.SendMsg(m)
}

func (x *commodityServiceCreateSpuImageServer) Recv() (*commodity.CreateSpuImageReq, error) {
	m := new(commodity.CreateSpuImageReq)
	return m, x.Stream.RecvMsg(m)
}

func newCommodityServiceCreateSpuImageArgs() interface{} {
	return commodity.NewCommodityServiceCreateSpuImageArgs()
}

func newCommodityServiceCreateSpuImageResult() interface{} {
	return commodity.NewCommodityServiceCreateSpuImageResult()
}

func updateSpuImageHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	st, ok := arg.(*streaming.Args)
	if !ok {
		return errors.New("CommodityService.UpdateSpuImage is a thrift streaming method, please call with Kitex StreamClient")
	}
	stream := &commodityServiceUpdateSpuImageServer{st.Stream}
	return handler.(commodity.CommodityService).UpdateSpuImage(stream)
}

type commodityServiceUpdateSpuImageClient struct {
	streaming.Stream
}

func (x *commodityServiceUpdateSpuImageClient) DoFinish(err error) {
	if finisher, ok := x.Stream.(streaming.WithDoFinish); ok {
		finisher.DoFinish(err)
	} else {
		panic(fmt.Sprintf("streaming.WithDoFinish is not implemented by %T", x.Stream))
	}
}
func (x *commodityServiceUpdateSpuImageClient) Send(m *commodity.UpdateSpuImageReq) error {
	return x.Stream.SendMsg(m)
}
func (x *commodityServiceUpdateSpuImageClient) CloseAndRecv() (*commodity.UpdateSpuImageResp, error) {
	if err := x.Stream.Close(); err != nil {
		return nil, err
	}
	m := new(commodity.UpdateSpuImageResp)
	return m, x.Stream.RecvMsg(m)
}

type commodityServiceUpdateSpuImageServer struct {
	streaming.Stream
}

func (x *commodityServiceUpdateSpuImageServer) SendAndClose(m *commodity.UpdateSpuImageResp) error {
	return x.Stream.SendMsg(m)
}

func (x *commodityServiceUpdateSpuImageServer) Recv() (*commodity.UpdateSpuImageReq, error) {
	m := new(commodity.UpdateSpuImageReq)
	return m, x.Stream.RecvMsg(m)
}

func newCommodityServiceUpdateSpuImageArgs() interface{} {
	return commodity.NewCommodityServiceUpdateSpuImageArgs()
}

func newCommodityServiceUpdateSpuImageResult() interface{} {
	return commodity.NewCommodityServiceUpdateSpuImageResult()
}

func deleteSpuImageHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*commodity.CommodityServiceDeleteSpuImageArgs)
	realResult := result.(*commodity.CommodityServiceDeleteSpuImageResult)
	success, err := handler.(commodity.CommodityService).DeleteSpuImage(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newCommodityServiceDeleteSpuImageArgs() interface{} {
	return commodity.NewCommodityServiceDeleteSpuImageArgs()
}

func newCommodityServiceDeleteSpuImageResult() interface{} {
	return commodity.NewCommodityServiceDeleteSpuImageResult()
}

func createSkuHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*commodity.CommodityServiceCreateSkuArgs)
	realResult := result.(*commodity.CommodityServiceCreateSkuResult)
	success, err := handler.(commodity.CommodityService).CreateSku(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newCommodityServiceCreateSkuArgs() interface{} {
	return commodity.NewCommodityServiceCreateSkuArgs()
}

func newCommodityServiceCreateSkuResult() interface{} {
	return commodity.NewCommodityServiceCreateSkuResult()
}

func updateSkuHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*commodity.CommodityServiceUpdateSkuArgs)
	realResult := result.(*commodity.CommodityServiceUpdateSkuResult)
	success, err := handler.(commodity.CommodityService).UpdateSku(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newCommodityServiceUpdateSkuArgs() interface{} {
	return commodity.NewCommodityServiceUpdateSkuArgs()
}

func newCommodityServiceUpdateSkuResult() interface{} {
	return commodity.NewCommodityServiceUpdateSkuResult()
}

func deleteSkuHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*commodity.CommodityServiceDeleteSkuArgs)
	realResult := result.(*commodity.CommodityServiceDeleteSkuResult)
	success, err := handler.(commodity.CommodityService).DeleteSku(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newCommodityServiceDeleteSkuArgs() interface{} {
	return commodity.NewCommodityServiceDeleteSkuArgs()
}

func newCommodityServiceDeleteSkuResult() interface{} {
	return commodity.NewCommodityServiceDeleteSkuResult()
}

func viewSkuImageHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*commodity.CommodityServiceViewSkuImageArgs)
	realResult := result.(*commodity.CommodityServiceViewSkuImageResult)
	success, err := handler.(commodity.CommodityService).ViewSkuImage(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newCommodityServiceViewSkuImageArgs() interface{} {
	return commodity.NewCommodityServiceViewSkuImageArgs()
}

func newCommodityServiceViewSkuImageResult() interface{} {
	return commodity.NewCommodityServiceViewSkuImageResult()
}

func viewSkuHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*commodity.CommodityServiceViewSkuArgs)
	realResult := result.(*commodity.CommodityServiceViewSkuResult)
	success, err := handler.(commodity.CommodityService).ViewSku(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newCommodityServiceViewSkuArgs() interface{} {
	return commodity.NewCommodityServiceViewSkuArgs()
}

func newCommodityServiceViewSkuResult() interface{} {
	return commodity.NewCommodityServiceViewSkuResult()
}

func uploadSkuAttrHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*commodity.CommodityServiceUploadSkuAttrArgs)
	realResult := result.(*commodity.CommodityServiceUploadSkuAttrResult)
	success, err := handler.(commodity.CommodityService).UploadSkuAttr(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newCommodityServiceUploadSkuAttrArgs() interface{} {
	return commodity.NewCommodityServiceUploadSkuAttrArgs()
}

func newCommodityServiceUploadSkuAttrResult() interface{} {
	return commodity.NewCommodityServiceUploadSkuAttrResult()
}

func listSkuInfoHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*commodity.CommodityServiceListSkuInfoArgs)
	realResult := result.(*commodity.CommodityServiceListSkuInfoResult)
	success, err := handler.(commodity.CommodityService).ListSkuInfo(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newCommodityServiceListSkuInfoArgs() interface{} {
	return commodity.NewCommodityServiceListSkuInfoArgs()
}

func newCommodityServiceListSkuInfoResult() interface{} {
	return commodity.NewCommodityServiceListSkuInfoResult()
}

func viewHistoryHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*commodity.CommodityServiceViewHistoryArgs)
	realResult := result.(*commodity.CommodityServiceViewHistoryResult)
	success, err := handler.(commodity.CommodityService).ViewHistory(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newCommodityServiceViewHistoryArgs() interface{} {
	return commodity.NewCommodityServiceViewHistoryArgs()
}

func newCommodityServiceViewHistoryResult() interface{} {
	return commodity.NewCommodityServiceViewHistoryResult()
}

func descSkuLockStockHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*commodity.CommodityServiceDescSkuLockStockArgs)
	realResult := result.(*commodity.CommodityServiceDescSkuLockStockResult)
	success, err := handler.(commodity.CommodityService).DescSkuLockStock(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newCommodityServiceDescSkuLockStockArgs() interface{} {
	return commodity.NewCommodityServiceDescSkuLockStockArgs()
}

func newCommodityServiceDescSkuLockStockResult() interface{} {
	return commodity.NewCommodityServiceDescSkuLockStockResult()
}

func incrSkuLockStockHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*commodity.CommodityServiceIncrSkuLockStockArgs)
	realResult := result.(*commodity.CommodityServiceIncrSkuLockStockResult)
	success, err := handler.(commodity.CommodityService).IncrSkuLockStock(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newCommodityServiceIncrSkuLockStockArgs() interface{} {
	return commodity.NewCommodityServiceIncrSkuLockStockArgs()
}

func newCommodityServiceIncrSkuLockStockResult() interface{} {
	return commodity.NewCommodityServiceIncrSkuLockStockResult()
}

func descSkuStockHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*commodity.CommodityServiceDescSkuStockArgs)
	realResult := result.(*commodity.CommodityServiceDescSkuStockResult)
	success, err := handler.(commodity.CommodityService).DescSkuStock(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newCommodityServiceDescSkuStockArgs() interface{} {
	return commodity.NewCommodityServiceDescSkuStockArgs()
}

func newCommodityServiceDescSkuStockResult() interface{} {
	return commodity.NewCommodityServiceDescSkuStockResult()
}

func listSpuInfoHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*commodity.CommodityServiceListSpuInfoArgs)
	realResult := result.(*commodity.CommodityServiceListSpuInfoResult)
	success, err := handler.(commodity.CommodityService).ListSpuInfo(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newCommodityServiceListSpuInfoArgs() interface{} {
	return commodity.NewCommodityServiceListSpuInfoArgs()
}

func newCommodityServiceListSpuInfoResult() interface{} {
	return commodity.NewCommodityServiceListSpuInfoResult()
}

func createCategoryHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*commodity.CommodityServiceCreateCategoryArgs)
	realResult := result.(*commodity.CommodityServiceCreateCategoryResult)
	success, err := handler.(commodity.CommodityService).CreateCategory(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newCommodityServiceCreateCategoryArgs() interface{} {
	return commodity.NewCommodityServiceCreateCategoryArgs()
}

func newCommodityServiceCreateCategoryResult() interface{} {
	return commodity.NewCommodityServiceCreateCategoryResult()
}

func deleteCategoryHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*commodity.CommodityServiceDeleteCategoryArgs)
	realResult := result.(*commodity.CommodityServiceDeleteCategoryResult)
	success, err := handler.(commodity.CommodityService).DeleteCategory(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newCommodityServiceDeleteCategoryArgs() interface{} {
	return commodity.NewCommodityServiceDeleteCategoryArgs()
}

func newCommodityServiceDeleteCategoryResult() interface{} {
	return commodity.NewCommodityServiceDeleteCategoryResult()
}

func viewCategoryHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*commodity.CommodityServiceViewCategoryArgs)
	realResult := result.(*commodity.CommodityServiceViewCategoryResult)
	success, err := handler.(commodity.CommodityService).ViewCategory(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newCommodityServiceViewCategoryArgs() interface{} {
	return commodity.NewCommodityServiceViewCategoryArgs()
}

func newCommodityServiceViewCategoryResult() interface{} {
	return commodity.NewCommodityServiceViewCategoryResult()
}

func updateCategoryHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*commodity.CommodityServiceUpdateCategoryArgs)
	realResult := result.(*commodity.CommodityServiceUpdateCategoryResult)
	success, err := handler.(commodity.CommodityService).UpdateCategory(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newCommodityServiceUpdateCategoryArgs() interface{} {
	return commodity.NewCommodityServiceUpdateCategoryArgs()
}

func newCommodityServiceUpdateCategoryResult() interface{} {
	return commodity.NewCommodityServiceUpdateCategoryResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) CreateCoupon(ctx context.Context, req *commodity.CreateCouponReq) (r *commodity.CreateCouponResp, err error) {
	var _args commodity.CommodityServiceCreateCouponArgs
	_args.Req = req
	var _result commodity.CommodityServiceCreateCouponResult
	if err = p.c.Call(ctx, "CreateCoupon", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) DeleteCoupon(ctx context.Context, req *commodity.DeleteCouponReq) (r *commodity.DeleteCouponResp, err error) {
	var _args commodity.CommodityServiceDeleteCouponArgs
	_args.Req = req
	var _result commodity.CommodityServiceDeleteCouponResult
	if err = p.c.Call(ctx, "DeleteCoupon", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) CreateUserCoupon(ctx context.Context, req *commodity.CreateUserCouponReq) (r *commodity.CreateUserCouponResp, err error) {
	var _args commodity.CommodityServiceCreateUserCouponArgs
	_args.Req = req
	var _result commodity.CommodityServiceCreateUserCouponResult
	if err = p.c.Call(ctx, "CreateUserCoupon", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ViewCoupon(ctx context.Context, req *commodity.ViewCouponReq) (r *commodity.ViewCouponResp, err error) {
	var _args commodity.CommodityServiceViewCouponArgs
	_args.Req = req
	var _result commodity.CommodityServiceViewCouponResult
	if err = p.c.Call(ctx, "ViewCoupon", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ViewUserAllCoupon(ctx context.Context, req *commodity.ViewUserAllCouponReq) (r *commodity.ViewUserAllCouponResp, err error) {
	var _args commodity.CommodityServiceViewUserAllCouponArgs
	_args.Req = req
	var _result commodity.CommodityServiceViewUserAllCouponResult
	if err = p.c.Call(ctx, "ViewUserAllCoupon", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UseUserCoupon(ctx context.Context, req *commodity.UseUserCouponReq) (r *commodity.UseUserCouponResp, err error) {
	var _args commodity.CommodityServiceUseUserCouponArgs
	_args.Req = req
	var _result commodity.CommodityServiceUseUserCouponResult
	if err = p.c.Call(ctx, "UseUserCoupon", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) CreateSpu(ctx context.Context) (CommodityService_CreateSpuClient, error) {
	streamClient, ok := p.c.(client.Streaming)
	if !ok {
		return nil, fmt.Errorf("client not support streaming")
	}
	res := new(streaming.Result)
	err := streamClient.Stream(ctx, "CreateSpu", nil, res)
	if err != nil {
		return nil, err
	}
	stream := &commodityServiceCreateSpuClient{res.Stream}
	return stream, nil
}

func (p *kClient) UpdateSpu(ctx context.Context) (CommodityService_UpdateSpuClient, error) {
	streamClient, ok := p.c.(client.Streaming)
	if !ok {
		return nil, fmt.Errorf("client not support streaming")
	}
	res := new(streaming.Result)
	err := streamClient.Stream(ctx, "UpdateSpu", nil, res)
	if err != nil {
		return nil, err
	}
	stream := &commodityServiceUpdateSpuClient{res.Stream}
	return stream, nil
}

func (p *kClient) ViewSpu(ctx context.Context, req *commodity.ViewSpuReq) (r *commodity.ViewSpuResp, err error) {
	var _args commodity.CommodityServiceViewSpuArgs
	_args.Req = req
	var _result commodity.CommodityServiceViewSpuResult
	if err = p.c.Call(ctx, "ViewSpu", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) DeleteSpu(ctx context.Context, req *commodity.DeleteSpuReq) (r *commodity.DeleteSpuResp, err error) {
	var _args commodity.CommodityServiceDeleteSpuArgs
	_args.Req = req
	var _result commodity.CommodityServiceDeleteSpuResult
	if err = p.c.Call(ctx, "DeleteSpu", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ViewSpuImage(ctx context.Context, req *commodity.ViewSpuImageReq) (r *commodity.ViewSpuImageResp, err error) {
	var _args commodity.CommodityServiceViewSpuImageArgs
	_args.Req = req
	var _result commodity.CommodityServiceViewSpuImageResult
	if err = p.c.Call(ctx, "ViewSpuImage", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) CreateSpuImage(ctx context.Context) (CommodityService_CreateSpuImageClient, error) {
	streamClient, ok := p.c.(client.Streaming)
	if !ok {
		return nil, fmt.Errorf("client not support streaming")
	}
	res := new(streaming.Result)
	err := streamClient.Stream(ctx, "CreateSpuImage", nil, res)
	if err != nil {
		return nil, err
	}
	stream := &commodityServiceCreateSpuImageClient{res.Stream}
	return stream, nil
}

func (p *kClient) UpdateSpuImage(ctx context.Context) (CommodityService_UpdateSpuImageClient, error) {
	streamClient, ok := p.c.(client.Streaming)
	if !ok {
		return nil, fmt.Errorf("client not support streaming")
	}
	res := new(streaming.Result)
	err := streamClient.Stream(ctx, "UpdateSpuImage", nil, res)
	if err != nil {
		return nil, err
	}
	stream := &commodityServiceUpdateSpuImageClient{res.Stream}
	return stream, nil
}

func (p *kClient) DeleteSpuImage(ctx context.Context, req *commodity.DeleteSpuImageReq) (r *commodity.DeleteSpuImageResp, err error) {
	var _args commodity.CommodityServiceDeleteSpuImageArgs
	_args.Req = req
	var _result commodity.CommodityServiceDeleteSpuImageResult
	if err = p.c.Call(ctx, "DeleteSpuImage", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) CreateSku(ctx context.Context, req *commodity.CreateSkuReq) (r *commodity.CreateSkuResp, err error) {
	var _args commodity.CommodityServiceCreateSkuArgs
	_args.Req = req
	var _result commodity.CommodityServiceCreateSkuResult
	if err = p.c.Call(ctx, "CreateSku", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UpdateSku(ctx context.Context, req *commodity.UpdateSkuReq) (r *commodity.UpdateSkuResp, err error) {
	var _args commodity.CommodityServiceUpdateSkuArgs
	_args.Req = req
	var _result commodity.CommodityServiceUpdateSkuResult
	if err = p.c.Call(ctx, "UpdateSku", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) DeleteSku(ctx context.Context, req *commodity.DeleteSkuReq) (r *commodity.DeleteSkuResp, err error) {
	var _args commodity.CommodityServiceDeleteSkuArgs
	_args.Req = req
	var _result commodity.CommodityServiceDeleteSkuResult
	if err = p.c.Call(ctx, "DeleteSku", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ViewSkuImage(ctx context.Context, req *commodity.ViewSkuImageReq) (r *commodity.ViewSkuImageResp, err error) {
	var _args commodity.CommodityServiceViewSkuImageArgs
	_args.Req = req
	var _result commodity.CommodityServiceViewSkuImageResult
	if err = p.c.Call(ctx, "ViewSkuImage", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ViewSku(ctx context.Context, req *commodity.ViewSkuReq) (r *commodity.ViewSkuResp, err error) {
	var _args commodity.CommodityServiceViewSkuArgs
	_args.Req = req
	var _result commodity.CommodityServiceViewSkuResult
	if err = p.c.Call(ctx, "ViewSku", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UploadSkuAttr(ctx context.Context, req *commodity.UploadSkuAttrReq) (r *commodity.UploadSkuAttrResp, err error) {
	var _args commodity.CommodityServiceUploadSkuAttrArgs
	_args.Req = req
	var _result commodity.CommodityServiceUploadSkuAttrResult
	if err = p.c.Call(ctx, "UploadSkuAttr", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ListSkuInfo(ctx context.Context, req *commodity.ListSkuInfoReq) (r *commodity.ListSkuInfoResp, err error) {
	var _args commodity.CommodityServiceListSkuInfoArgs
	_args.Req = req
	var _result commodity.CommodityServiceListSkuInfoResult
	if err = p.c.Call(ctx, "ListSkuInfo", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ViewHistory(ctx context.Context, req *commodity.ViewHistoryPriceReq) (r *commodity.ViewHistoryPriceResp, err error) {
	var _args commodity.CommodityServiceViewHistoryArgs
	_args.Req = req
	var _result commodity.CommodityServiceViewHistoryResult
	if err = p.c.Call(ctx, "ViewHistory", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) DescSkuLockStock(ctx context.Context, req *commodity.DescSkuLockStockReq) (r *commodity.DescSkuLockStockResp, err error) {
	var _args commodity.CommodityServiceDescSkuLockStockArgs
	_args.Req = req
	var _result commodity.CommodityServiceDescSkuLockStockResult
	if err = p.c.Call(ctx, "DescSkuLockStock", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) IncrSkuLockStock(ctx context.Context, req *commodity.IncrSkuLockStockReq) (r *commodity.IncrSkuLockStockResp, err error) {
	var _args commodity.CommodityServiceIncrSkuLockStockArgs
	_args.Req = req
	var _result commodity.CommodityServiceIncrSkuLockStockResult
	if err = p.c.Call(ctx, "IncrSkuLockStock", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) DescSkuStock(ctx context.Context, req *commodity.DescSkuStockReq) (r *commodity.DescSkuStockResp, err error) {
	var _args commodity.CommodityServiceDescSkuStockArgs
	_args.Req = req
	var _result commodity.CommodityServiceDescSkuStockResult
	if err = p.c.Call(ctx, "DescSkuStock", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ListSpuInfo(ctx context.Context, req *commodity.ListSpuInfoReq) (r *commodity.ListSpuInfoResp, err error) {
	var _args commodity.CommodityServiceListSpuInfoArgs
	_args.Req = req
	var _result commodity.CommodityServiceListSpuInfoResult
	if err = p.c.Call(ctx, "ListSpuInfo", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) CreateCategory(ctx context.Context, req *commodity.CreateCategoryReq) (r *commodity.CreateCategoryResp, err error) {
	var _args commodity.CommodityServiceCreateCategoryArgs
	_args.Req = req
	var _result commodity.CommodityServiceCreateCategoryResult
	if err = p.c.Call(ctx, "CreateCategory", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) DeleteCategory(ctx context.Context, req *commodity.DeleteCategoryReq) (r *commodity.DeleteCategoryResp, err error) {
	var _args commodity.CommodityServiceDeleteCategoryArgs
	_args.Req = req
	var _result commodity.CommodityServiceDeleteCategoryResult
	if err = p.c.Call(ctx, "DeleteCategory", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ViewCategory(ctx context.Context, req *commodity.ViewCategoryReq) (r *commodity.ViewCategoryResp, err error) {
	var _args commodity.CommodityServiceViewCategoryArgs
	_args.Req = req
	var _result commodity.CommodityServiceViewCategoryResult
	if err = p.c.Call(ctx, "ViewCategory", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UpdateCategory(ctx context.Context, req *commodity.UpdateCategoryReq) (r *commodity.UpdateCategoryResp, err error) {
	var _args commodity.CommodityServiceUpdateCategoryArgs
	_args.Req = req
	var _result commodity.CommodityServiceUpdateCategoryResult
	if err = p.c.Call(ctx, "UpdateCategory", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
