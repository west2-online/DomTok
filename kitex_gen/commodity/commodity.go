/*
Copyright 2024 The west2-online Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by thriftgo (0.3.18). DO NOT EDIT.

package commodity

import (
	"bytes"
	"context"
	"fmt"
	"strings"

	"github.com/cloudwego/kitex/pkg/streaming"

	"github.com/west2-online/DomTok/kitex_gen/model"
)

type CreateCouponReq struct {
	DeadlineForGet int64    `thrift:"deadlineForGet,1,required" frugal:"1,required,i64" json:"deadlineForGet"`
	Name           string   `thrift:"name,2,required" frugal:"2,required,string" json:"name"`
	TypeInfo       int32    `thrift:"typeInfo,3,required" frugal:"3,required,i32" json:"typeInfo"`
	ConditionCost  *float64 `thrift:"conditionCost,4,optional" frugal:"4,optional,double" json:"conditionCost,omitempty"`
	DiscountAmount *float64 `thrift:"discountAmount,5,optional" frugal:"5,optional,double" json:"discountAmount,omitempty"`
	Discount       *float64 `thrift:"discount,6,optional" frugal:"6,optional,double" json:"discount,omitempty"`
	RangeType      int32    `thrift:"rangeType,7,required" frugal:"7,required,i32" json:"rangeType"`
	RangeID        int64    `thrift:"rangeID,8,required" frugal:"8,required,i64" json:"rangeID"`
	Description    *string  `thrift:"description,9,optional" frugal:"9,optional,string" json:"description,omitempty"`
	ExpireTime     int64    `thrift:"expireTime,10,required" frugal:"10,required,i64" json:"expireTime"`
}

func NewCreateCouponReq() *CreateCouponReq {
	return &CreateCouponReq{}
}

func (p *CreateCouponReq) InitDefault() {
}

func (p *CreateCouponReq) GetDeadlineForGet() (v int64) {
	return p.DeadlineForGet
}

func (p *CreateCouponReq) GetName() (v string) {
	return p.Name
}

func (p *CreateCouponReq) GetTypeInfo() (v int32) {
	return p.TypeInfo
}

var CreateCouponReq_ConditionCost_DEFAULT float64

func (p *CreateCouponReq) GetConditionCost() (v float64) {
	if !p.IsSetConditionCost() {
		return CreateCouponReq_ConditionCost_DEFAULT
	}
	return *p.ConditionCost
}

var CreateCouponReq_DiscountAmount_DEFAULT float64

func (p *CreateCouponReq) GetDiscountAmount() (v float64) {
	if !p.IsSetDiscountAmount() {
		return CreateCouponReq_DiscountAmount_DEFAULT
	}
	return *p.DiscountAmount
}

var CreateCouponReq_Discount_DEFAULT float64

func (p *CreateCouponReq) GetDiscount() (v float64) {
	if !p.IsSetDiscount() {
		return CreateCouponReq_Discount_DEFAULT
	}
	return *p.Discount
}

func (p *CreateCouponReq) GetRangeType() (v int32) {
	return p.RangeType
}

func (p *CreateCouponReq) GetRangeID() (v int64) {
	return p.RangeID
}

var CreateCouponReq_Description_DEFAULT string

func (p *CreateCouponReq) GetDescription() (v string) {
	if !p.IsSetDescription() {
		return CreateCouponReq_Description_DEFAULT
	}
	return *p.Description
}

func (p *CreateCouponReq) GetExpireTime() (v int64) {
	return p.ExpireTime
}
func (p *CreateCouponReq) SetDeadlineForGet(val int64) {
	p.DeadlineForGet = val
}
func (p *CreateCouponReq) SetName(val string) {
	p.Name = val
}
func (p *CreateCouponReq) SetTypeInfo(val int32) {
	p.TypeInfo = val
}
func (p *CreateCouponReq) SetConditionCost(val *float64) {
	p.ConditionCost = val
}
func (p *CreateCouponReq) SetDiscountAmount(val *float64) {
	p.DiscountAmount = val
}
func (p *CreateCouponReq) SetDiscount(val *float64) {
	p.Discount = val
}
func (p *CreateCouponReq) SetRangeType(val int32) {
	p.RangeType = val
}
func (p *CreateCouponReq) SetRangeID(val int64) {
	p.RangeID = val
}
func (p *CreateCouponReq) SetDescription(val *string) {
	p.Description = val
}
func (p *CreateCouponReq) SetExpireTime(val int64) {
	p.ExpireTime = val
}

func (p *CreateCouponReq) IsSetConditionCost() bool {
	return p.ConditionCost != nil
}

func (p *CreateCouponReq) IsSetDiscountAmount() bool {
	return p.DiscountAmount != nil
}

func (p *CreateCouponReq) IsSetDiscount() bool {
	return p.Discount != nil
}

func (p *CreateCouponReq) IsSetDescription() bool {
	return p.Description != nil
}

func (p *CreateCouponReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreateCouponReq(%+v)", *p)
}

func (p *CreateCouponReq) DeepEqual(ano *CreateCouponReq) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.DeadlineForGet) {
		return false
	}
	if !p.Field2DeepEqual(ano.Name) {
		return false
	}
	if !p.Field3DeepEqual(ano.TypeInfo) {
		return false
	}
	if !p.Field4DeepEqual(ano.ConditionCost) {
		return false
	}
	if !p.Field5DeepEqual(ano.DiscountAmount) {
		return false
	}
	if !p.Field6DeepEqual(ano.Discount) {
		return false
	}
	if !p.Field7DeepEqual(ano.RangeType) {
		return false
	}
	if !p.Field8DeepEqual(ano.RangeID) {
		return false
	}
	if !p.Field9DeepEqual(ano.Description) {
		return false
	}
	if !p.Field10DeepEqual(ano.ExpireTime) {
		return false
	}
	return true
}

func (p *CreateCouponReq) Field1DeepEqual(src int64) bool {

	if p.DeadlineForGet != src {
		return false
	}
	return true
}
func (p *CreateCouponReq) Field2DeepEqual(src string) bool {

	if strings.Compare(p.Name, src) != 0 {
		return false
	}
	return true
}
func (p *CreateCouponReq) Field3DeepEqual(src int32) bool {

	if p.TypeInfo != src {
		return false
	}
	return true
}
func (p *CreateCouponReq) Field4DeepEqual(src *float64) bool {

	if p.ConditionCost == src {
		return true
	} else if p.ConditionCost == nil || src == nil {
		return false
	}
	if *p.ConditionCost != *src {
		return false
	}
	return true
}
func (p *CreateCouponReq) Field5DeepEqual(src *float64) bool {

	if p.DiscountAmount == src {
		return true
	} else if p.DiscountAmount == nil || src == nil {
		return false
	}
	if *p.DiscountAmount != *src {
		return false
	}
	return true
}
func (p *CreateCouponReq) Field6DeepEqual(src *float64) bool {

	if p.Discount == src {
		return true
	} else if p.Discount == nil || src == nil {
		return false
	}
	if *p.Discount != *src {
		return false
	}
	return true
}
func (p *CreateCouponReq) Field7DeepEqual(src int32) bool {

	if p.RangeType != src {
		return false
	}
	return true
}
func (p *CreateCouponReq) Field8DeepEqual(src int64) bool {

	if p.RangeID != src {
		return false
	}
	return true
}
func (p *CreateCouponReq) Field9DeepEqual(src *string) bool {

	if p.Description == src {
		return true
	} else if p.Description == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Description, *src) != 0 {
		return false
	}
	return true
}
func (p *CreateCouponReq) Field10DeepEqual(src int64) bool {

	if p.ExpireTime != src {
		return false
	}
	return true
}

var fieldIDToName_CreateCouponReq = map[int16]string{
	1:  "deadlineForGet",
	2:  "name",
	3:  "typeInfo",
	4:  "conditionCost",
	5:  "discountAmount",
	6:  "discount",
	7:  "rangeType",
	8:  "rangeID",
	9:  "description",
	10: "expireTime",
}

type CreateCouponResp struct {
	Base     *model.BaseResp `thrift:"base,1,required" frugal:"1,required,model.BaseResp" json:"base"`
	CouponID int64           `thrift:"couponID,2,required" frugal:"2,required,i64" json:"couponID"`
}

func NewCreateCouponResp() *CreateCouponResp {
	return &CreateCouponResp{}
}

func (p *CreateCouponResp) InitDefault() {
}

var CreateCouponResp_Base_DEFAULT *model.BaseResp

func (p *CreateCouponResp) GetBase() (v *model.BaseResp) {
	if !p.IsSetBase() {
		return CreateCouponResp_Base_DEFAULT
	}
	return p.Base
}

func (p *CreateCouponResp) GetCouponID() (v int64) {
	return p.CouponID
}
func (p *CreateCouponResp) SetBase(val *model.BaseResp) {
	p.Base = val
}
func (p *CreateCouponResp) SetCouponID(val int64) {
	p.CouponID = val
}

func (p *CreateCouponResp) IsSetBase() bool {
	return p.Base != nil
}

func (p *CreateCouponResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreateCouponResp(%+v)", *p)
}

func (p *CreateCouponResp) DeepEqual(ano *CreateCouponResp) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Base) {
		return false
	}
	if !p.Field2DeepEqual(ano.CouponID) {
		return false
	}
	return true
}

func (p *CreateCouponResp) Field1DeepEqual(src *model.BaseResp) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}
func (p *CreateCouponResp) Field2DeepEqual(src int64) bool {

	if p.CouponID != src {
		return false
	}
	return true
}

var fieldIDToName_CreateCouponResp = map[int16]string{
	1: "base",
	2: "couponID",
}

type DeleteCouponReq struct {
	CouponID int64 `thrift:"couponID,1,required" frugal:"1,required,i64" json:"couponID"`
}

func NewDeleteCouponReq() *DeleteCouponReq {
	return &DeleteCouponReq{}
}

func (p *DeleteCouponReq) InitDefault() {
}

func (p *DeleteCouponReq) GetCouponID() (v int64) {
	return p.CouponID
}
func (p *DeleteCouponReq) SetCouponID(val int64) {
	p.CouponID = val
}

func (p *DeleteCouponReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DeleteCouponReq(%+v)", *p)
}

func (p *DeleteCouponReq) DeepEqual(ano *DeleteCouponReq) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.CouponID) {
		return false
	}
	return true
}

func (p *DeleteCouponReq) Field1DeepEqual(src int64) bool {

	if p.CouponID != src {
		return false
	}
	return true
}

var fieldIDToName_DeleteCouponReq = map[int16]string{
	1: "couponID",
}

type DeleteCouponResp struct {
	Base *model.BaseResp `thrift:"base,1,required" frugal:"1,required,model.BaseResp" json:"base"`
}

func NewDeleteCouponResp() *DeleteCouponResp {
	return &DeleteCouponResp{}
}

func (p *DeleteCouponResp) InitDefault() {
}

var DeleteCouponResp_Base_DEFAULT *model.BaseResp

func (p *DeleteCouponResp) GetBase() (v *model.BaseResp) {
	if !p.IsSetBase() {
		return DeleteCouponResp_Base_DEFAULT
	}
	return p.Base
}
func (p *DeleteCouponResp) SetBase(val *model.BaseResp) {
	p.Base = val
}

func (p *DeleteCouponResp) IsSetBase() bool {
	return p.Base != nil
}

func (p *DeleteCouponResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DeleteCouponResp(%+v)", *p)
}

func (p *DeleteCouponResp) DeepEqual(ano *DeleteCouponResp) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Base) {
		return false
	}
	return true
}

func (p *DeleteCouponResp) Field1DeepEqual(src *model.BaseResp) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}

var fieldIDToName_DeleteCouponResp = map[int16]string{
	1: "base",
}

type CreateUserCouponReq struct {
	CouponID     int64 `thrift:"couponID,1,required" frugal:"1,required,i64" json:"couponID"`
	RemainingUse int64 `thrift:"remaining_use,2,required" frugal:"2,required,i64" json:"remaining_use"`
}

func NewCreateUserCouponReq() *CreateUserCouponReq {
	return &CreateUserCouponReq{}
}

func (p *CreateUserCouponReq) InitDefault() {
}

func (p *CreateUserCouponReq) GetCouponID() (v int64) {
	return p.CouponID
}

func (p *CreateUserCouponReq) GetRemainingUse() (v int64) {
	return p.RemainingUse
}
func (p *CreateUserCouponReq) SetCouponID(val int64) {
	p.CouponID = val
}
func (p *CreateUserCouponReq) SetRemainingUse(val int64) {
	p.RemainingUse = val
}

func (p *CreateUserCouponReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreateUserCouponReq(%+v)", *p)
}

func (p *CreateUserCouponReq) DeepEqual(ano *CreateUserCouponReq) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.CouponID) {
		return false
	}
	if !p.Field2DeepEqual(ano.RemainingUse) {
		return false
	}
	return true
}

func (p *CreateUserCouponReq) Field1DeepEqual(src int64) bool {

	if p.CouponID != src {
		return false
	}
	return true
}
func (p *CreateUserCouponReq) Field2DeepEqual(src int64) bool {

	if p.RemainingUse != src {
		return false
	}
	return true
}

var fieldIDToName_CreateUserCouponReq = map[int16]string{
	1: "couponID",
	2: "remaining_use",
}

type CreateUserCouponResp struct {
	Base *model.BaseResp `thrift:"base,1,required" frugal:"1,required,model.BaseResp" json:"base"`
}

func NewCreateUserCouponResp() *CreateUserCouponResp {
	return &CreateUserCouponResp{}
}

func (p *CreateUserCouponResp) InitDefault() {
}

var CreateUserCouponResp_Base_DEFAULT *model.BaseResp

func (p *CreateUserCouponResp) GetBase() (v *model.BaseResp) {
	if !p.IsSetBase() {
		return CreateUserCouponResp_Base_DEFAULT
	}
	return p.Base
}
func (p *CreateUserCouponResp) SetBase(val *model.BaseResp) {
	p.Base = val
}

func (p *CreateUserCouponResp) IsSetBase() bool {
	return p.Base != nil
}

func (p *CreateUserCouponResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreateUserCouponResp(%+v)", *p)
}

func (p *CreateUserCouponResp) DeepEqual(ano *CreateUserCouponResp) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Base) {
		return false
	}
	return true
}

func (p *CreateUserCouponResp) Field1DeepEqual(src *model.BaseResp) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}

var fieldIDToName_CreateUserCouponResp = map[int16]string{
	1: "base",
}

type ViewCouponReq struct {
	PageNum int64 `thrift:"pageNum,1,required" frugal:"1,required,i64" json:"pageNum"`
}

func NewViewCouponReq() *ViewCouponReq {
	return &ViewCouponReq{}
}

func (p *ViewCouponReq) InitDefault() {
}

func (p *ViewCouponReq) GetPageNum() (v int64) {
	return p.PageNum
}
func (p *ViewCouponReq) SetPageNum(val int64) {
	p.PageNum = val
}

func (p *ViewCouponReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ViewCouponReq(%+v)", *p)
}

func (p *ViewCouponReq) DeepEqual(ano *ViewCouponReq) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.PageNum) {
		return false
	}
	return true
}

func (p *ViewCouponReq) Field1DeepEqual(src int64) bool {

	if p.PageNum != src {
		return false
	}
	return true
}

var fieldIDToName_ViewCouponReq = map[int16]string{
	1: "pageNum",
}

type ViewCouponResp struct {
	Base       *model.BaseResp `thrift:"base,1,required" frugal:"1,required,model.BaseResp" json:"base"`
	CouponInfo []*model.Coupon `thrift:"couponInfo,2,required" frugal:"2,required,list<model.Coupon>" json:"couponInfo"`
}

func NewViewCouponResp() *ViewCouponResp {
	return &ViewCouponResp{}
}

func (p *ViewCouponResp) InitDefault() {
}

var ViewCouponResp_Base_DEFAULT *model.BaseResp

func (p *ViewCouponResp) GetBase() (v *model.BaseResp) {
	if !p.IsSetBase() {
		return ViewCouponResp_Base_DEFAULT
	}
	return p.Base
}

func (p *ViewCouponResp) GetCouponInfo() (v []*model.Coupon) {
	return p.CouponInfo
}
func (p *ViewCouponResp) SetBase(val *model.BaseResp) {
	p.Base = val
}
func (p *ViewCouponResp) SetCouponInfo(val []*model.Coupon) {
	p.CouponInfo = val
}

func (p *ViewCouponResp) IsSetBase() bool {
	return p.Base != nil
}

func (p *ViewCouponResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ViewCouponResp(%+v)", *p)
}

func (p *ViewCouponResp) DeepEqual(ano *ViewCouponResp) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Base) {
		return false
	}
	if !p.Field2DeepEqual(ano.CouponInfo) {
		return false
	}
	return true
}

func (p *ViewCouponResp) Field1DeepEqual(src *model.BaseResp) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}
func (p *ViewCouponResp) Field2DeepEqual(src []*model.Coupon) bool {

	if len(p.CouponInfo) != len(src) {
		return false
	}
	for i, v := range p.CouponInfo {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}

var fieldIDToName_ViewCouponResp = map[int16]string{
	1: "base",
	2: "couponInfo",
}

type ViewUserAllCouponReq struct {
	PageNum int64 `thrift:"pageNum,1,required" frugal:"1,required,i64" json:"pageNum"`
}

func NewViewUserAllCouponReq() *ViewUserAllCouponReq {
	return &ViewUserAllCouponReq{}
}

func (p *ViewUserAllCouponReq) InitDefault() {
}

func (p *ViewUserAllCouponReq) GetPageNum() (v int64) {
	return p.PageNum
}
func (p *ViewUserAllCouponReq) SetPageNum(val int64) {
	p.PageNum = val
}

func (p *ViewUserAllCouponReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ViewUserAllCouponReq(%+v)", *p)
}

func (p *ViewUserAllCouponReq) DeepEqual(ano *ViewUserAllCouponReq) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.PageNum) {
		return false
	}
	return true
}

func (p *ViewUserAllCouponReq) Field1DeepEqual(src int64) bool {

	if p.PageNum != src {
		return false
	}
	return true
}

var fieldIDToName_ViewUserAllCouponReq = map[int16]string{
	1: "pageNum",
}

type ViewUserAllCouponResp struct {
	Base    *model.BaseResp `thrift:"base,1,required" frugal:"1,required,model.BaseResp" json:"base"`
	Coupons []*model.Coupon `thrift:"coupons,2,required" frugal:"2,required,list<model.Coupon>" json:"coupons"`
}

func NewViewUserAllCouponResp() *ViewUserAllCouponResp {
	return &ViewUserAllCouponResp{}
}

func (p *ViewUserAllCouponResp) InitDefault() {
}

var ViewUserAllCouponResp_Base_DEFAULT *model.BaseResp

func (p *ViewUserAllCouponResp) GetBase() (v *model.BaseResp) {
	if !p.IsSetBase() {
		return ViewUserAllCouponResp_Base_DEFAULT
	}
	return p.Base
}

func (p *ViewUserAllCouponResp) GetCoupons() (v []*model.Coupon) {
	return p.Coupons
}
func (p *ViewUserAllCouponResp) SetBase(val *model.BaseResp) {
	p.Base = val
}
func (p *ViewUserAllCouponResp) SetCoupons(val []*model.Coupon) {
	p.Coupons = val
}

func (p *ViewUserAllCouponResp) IsSetBase() bool {
	return p.Base != nil
}

func (p *ViewUserAllCouponResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ViewUserAllCouponResp(%+v)", *p)
}

func (p *ViewUserAllCouponResp) DeepEqual(ano *ViewUserAllCouponResp) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Base) {
		return false
	}
	if !p.Field2DeepEqual(ano.Coupons) {
		return false
	}
	return true
}

func (p *ViewUserAllCouponResp) Field1DeepEqual(src *model.BaseResp) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}
func (p *ViewUserAllCouponResp) Field2DeepEqual(src []*model.Coupon) bool {

	if len(p.Coupons) != len(src) {
		return false
	}
	for i, v := range p.Coupons {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}

var fieldIDToName_ViewUserAllCouponResp = map[int16]string{
	1: "base",
	2: "coupons",
}

type UseUserCouponReq struct {
	CouponID int64 `thrift:"couponID,1,required" frugal:"1,required,i64" json:"couponID"`
}

func NewUseUserCouponReq() *UseUserCouponReq {
	return &UseUserCouponReq{}
}

func (p *UseUserCouponReq) InitDefault() {
}

func (p *UseUserCouponReq) GetCouponID() (v int64) {
	return p.CouponID
}
func (p *UseUserCouponReq) SetCouponID(val int64) {
	p.CouponID = val
}

func (p *UseUserCouponReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UseUserCouponReq(%+v)", *p)
}

func (p *UseUserCouponReq) DeepEqual(ano *UseUserCouponReq) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.CouponID) {
		return false
	}
	return true
}

func (p *UseUserCouponReq) Field1DeepEqual(src int64) bool {

	if p.CouponID != src {
		return false
	}
	return true
}

var fieldIDToName_UseUserCouponReq = map[int16]string{
	1: "couponID",
}

type UseUserCouponResp struct {
	Base *model.BaseResp `thrift:"base,1,required" frugal:"1,required,model.BaseResp" json:"base"`
}

func NewUseUserCouponResp() *UseUserCouponResp {
	return &UseUserCouponResp{}
}

func (p *UseUserCouponResp) InitDefault() {
}

var UseUserCouponResp_Base_DEFAULT *model.BaseResp

func (p *UseUserCouponResp) GetBase() (v *model.BaseResp) {
	if !p.IsSetBase() {
		return UseUserCouponResp_Base_DEFAULT
	}
	return p.Base
}
func (p *UseUserCouponResp) SetBase(val *model.BaseResp) {
	p.Base = val
}

func (p *UseUserCouponResp) IsSetBase() bool {
	return p.Base != nil
}

func (p *UseUserCouponResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UseUserCouponResp(%+v)", *p)
}

func (p *UseUserCouponResp) DeepEqual(ano *UseUserCouponResp) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Base) {
		return false
	}
	return true
}

func (p *UseUserCouponResp) Field1DeepEqual(src *model.BaseResp) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}

var fieldIDToName_UseUserCouponResp = map[int16]string{
	1: "base",
}

type CreateSpuReq struct {
	Name             string  `thrift:"name,1,required" frugal:"1,required,string" json:"name"`
	Description      string  `thrift:"description,2,required" frugal:"2,required,string" json:"description"`
	CategoryID       int64   `thrift:"categoryID,3,required" frugal:"3,required,i64" json:"categoryID"`
	GoodsHeadDrawing []byte  `thrift:"goodsHeadDrawing,4,required" frugal:"4,required,binary" json:"goodsHeadDrawing"`
	Price            float64 `thrift:"price,5,required" frugal:"5,required,double" json:"price"`
	ForSale          int32   `thrift:"forSale,6,required" frugal:"6,required,i32" json:"forSale"`
	Shipping         float64 `thrift:"shipping,7,required" frugal:"7,required,double" json:"shipping"`
	BufferCount      int64   `thrift:"bufferCount,8,required" frugal:"8,required,i64" json:"bufferCount"`
}

func NewCreateSpuReq() *CreateSpuReq {
	return &CreateSpuReq{}
}

func (p *CreateSpuReq) InitDefault() {
}

func (p *CreateSpuReq) GetName() (v string) {
	return p.Name
}

func (p *CreateSpuReq) GetDescription() (v string) {
	return p.Description
}

func (p *CreateSpuReq) GetCategoryID() (v int64) {
	return p.CategoryID
}

func (p *CreateSpuReq) GetGoodsHeadDrawing() (v []byte) {
	return p.GoodsHeadDrawing
}

func (p *CreateSpuReq) GetPrice() (v float64) {
	return p.Price
}

func (p *CreateSpuReq) GetForSale() (v int32) {
	return p.ForSale
}

func (p *CreateSpuReq) GetShipping() (v float64) {
	return p.Shipping
}

func (p *CreateSpuReq) GetBufferCount() (v int64) {
	return p.BufferCount
}
func (p *CreateSpuReq) SetName(val string) {
	p.Name = val
}
func (p *CreateSpuReq) SetDescription(val string) {
	p.Description = val
}
func (p *CreateSpuReq) SetCategoryID(val int64) {
	p.CategoryID = val
}
func (p *CreateSpuReq) SetGoodsHeadDrawing(val []byte) {
	p.GoodsHeadDrawing = val
}
func (p *CreateSpuReq) SetPrice(val float64) {
	p.Price = val
}
func (p *CreateSpuReq) SetForSale(val int32) {
	p.ForSale = val
}
func (p *CreateSpuReq) SetShipping(val float64) {
	p.Shipping = val
}
func (p *CreateSpuReq) SetBufferCount(val int64) {
	p.BufferCount = val
}

func (p *CreateSpuReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreateSpuReq(%+v)", *p)
}

func (p *CreateSpuReq) DeepEqual(ano *CreateSpuReq) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Name) {
		return false
	}
	if !p.Field2DeepEqual(ano.Description) {
		return false
	}
	if !p.Field3DeepEqual(ano.CategoryID) {
		return false
	}
	if !p.Field4DeepEqual(ano.GoodsHeadDrawing) {
		return false
	}
	if !p.Field5DeepEqual(ano.Price) {
		return false
	}
	if !p.Field6DeepEqual(ano.ForSale) {
		return false
	}
	if !p.Field7DeepEqual(ano.Shipping) {
		return false
	}
	if !p.Field8DeepEqual(ano.BufferCount) {
		return false
	}
	return true
}

func (p *CreateSpuReq) Field1DeepEqual(src string) bool {

	if strings.Compare(p.Name, src) != 0 {
		return false
	}
	return true
}
func (p *CreateSpuReq) Field2DeepEqual(src string) bool {

	if strings.Compare(p.Description, src) != 0 {
		return false
	}
	return true
}
func (p *CreateSpuReq) Field3DeepEqual(src int64) bool {

	if p.CategoryID != src {
		return false
	}
	return true
}
func (p *CreateSpuReq) Field4DeepEqual(src []byte) bool {

	if bytes.Compare(p.GoodsHeadDrawing, src) != 0 {
		return false
	}
	return true
}
func (p *CreateSpuReq) Field5DeepEqual(src float64) bool {

	if p.Price != src {
		return false
	}
	return true
}
func (p *CreateSpuReq) Field6DeepEqual(src int32) bool {

	if p.ForSale != src {
		return false
	}
	return true
}
func (p *CreateSpuReq) Field7DeepEqual(src float64) bool {

	if p.Shipping != src {
		return false
	}
	return true
}
func (p *CreateSpuReq) Field8DeepEqual(src int64) bool {

	if p.BufferCount != src {
		return false
	}
	return true
}

var fieldIDToName_CreateSpuReq = map[int16]string{
	1: "name",
	2: "description",
	3: "categoryID",
	4: "goodsHeadDrawing",
	5: "price",
	6: "forSale",
	7: "shipping",
	8: "bufferCount",
}

type CreateSpuResp struct {
	Base  *model.BaseResp `thrift:"base,1,required" frugal:"1,required,model.BaseResp" json:"base"`
	SpuID int64           `thrift:"spuID,2,required" frugal:"2,required,i64" json:"spuID"`
}

func NewCreateSpuResp() *CreateSpuResp {
	return &CreateSpuResp{}
}

func (p *CreateSpuResp) InitDefault() {
}

var CreateSpuResp_Base_DEFAULT *model.BaseResp

func (p *CreateSpuResp) GetBase() (v *model.BaseResp) {
	if !p.IsSetBase() {
		return CreateSpuResp_Base_DEFAULT
	}
	return p.Base
}

func (p *CreateSpuResp) GetSpuID() (v int64) {
	return p.SpuID
}
func (p *CreateSpuResp) SetBase(val *model.BaseResp) {
	p.Base = val
}
func (p *CreateSpuResp) SetSpuID(val int64) {
	p.SpuID = val
}

func (p *CreateSpuResp) IsSetBase() bool {
	return p.Base != nil
}

func (p *CreateSpuResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreateSpuResp(%+v)", *p)
}

func (p *CreateSpuResp) DeepEqual(ano *CreateSpuResp) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Base) {
		return false
	}
	if !p.Field2DeepEqual(ano.SpuID) {
		return false
	}
	return true
}

func (p *CreateSpuResp) Field1DeepEqual(src *model.BaseResp) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}
func (p *CreateSpuResp) Field2DeepEqual(src int64) bool {

	if p.SpuID != src {
		return false
	}
	return true
}

var fieldIDToName_CreateSpuResp = map[int16]string{
	1: "base",
	2: "spuID",
}

type UpdateSpuReq struct {
	Name             *string  `thrift:"name,1,optional" frugal:"1,optional,string" json:"name,omitempty"`
	Description      *string  `thrift:"description,2,optional" frugal:"2,optional,string" json:"description,omitempty"`
	CategoryID       *int64   `thrift:"categoryID,3,optional" frugal:"3,optional,i64" json:"categoryID,omitempty"`
	GoodsHeadDrawing []byte   `thrift:"goodsHeadDrawing,4,optional" frugal:"4,optional,binary" json:"goodsHeadDrawing,omitempty"`
	Price            *float64 `thrift:"price,5,optional" frugal:"5,optional,double" json:"price,omitempty"`
	ForSale          *int32   `thrift:"forSale,6,optional" frugal:"6,optional,i32" json:"forSale,omitempty"`
	Shipping         *float64 `thrift:"shipping,7,optional" frugal:"7,optional,double" json:"shipping,omitempty"`
	SpuID            int64    `thrift:"spuID,8,required" frugal:"8,required,i64" json:"spuID"`
	BufferCount      *int64   `thrift:"bufferCount,9,optional" frugal:"9,optional,i64" json:"bufferCount,omitempty"`
}

func NewUpdateSpuReq() *UpdateSpuReq {
	return &UpdateSpuReq{}
}

func (p *UpdateSpuReq) InitDefault() {
}

var UpdateSpuReq_Name_DEFAULT string

func (p *UpdateSpuReq) GetName() (v string) {
	if !p.IsSetName() {
		return UpdateSpuReq_Name_DEFAULT
	}
	return *p.Name
}

var UpdateSpuReq_Description_DEFAULT string

func (p *UpdateSpuReq) GetDescription() (v string) {
	if !p.IsSetDescription() {
		return UpdateSpuReq_Description_DEFAULT
	}
	return *p.Description
}

var UpdateSpuReq_CategoryID_DEFAULT int64

func (p *UpdateSpuReq) GetCategoryID() (v int64) {
	if !p.IsSetCategoryID() {
		return UpdateSpuReq_CategoryID_DEFAULT
	}
	return *p.CategoryID
}

var UpdateSpuReq_GoodsHeadDrawing_DEFAULT []byte

func (p *UpdateSpuReq) GetGoodsHeadDrawing() (v []byte) {
	if !p.IsSetGoodsHeadDrawing() {
		return UpdateSpuReq_GoodsHeadDrawing_DEFAULT
	}
	return p.GoodsHeadDrawing
}

var UpdateSpuReq_Price_DEFAULT float64

func (p *UpdateSpuReq) GetPrice() (v float64) {
	if !p.IsSetPrice() {
		return UpdateSpuReq_Price_DEFAULT
	}
	return *p.Price
}

var UpdateSpuReq_ForSale_DEFAULT int32

func (p *UpdateSpuReq) GetForSale() (v int32) {
	if !p.IsSetForSale() {
		return UpdateSpuReq_ForSale_DEFAULT
	}
	return *p.ForSale
}

var UpdateSpuReq_Shipping_DEFAULT float64

func (p *UpdateSpuReq) GetShipping() (v float64) {
	if !p.IsSetShipping() {
		return UpdateSpuReq_Shipping_DEFAULT
	}
	return *p.Shipping
}

func (p *UpdateSpuReq) GetSpuID() (v int64) {
	return p.SpuID
}

var UpdateSpuReq_BufferCount_DEFAULT int64

func (p *UpdateSpuReq) GetBufferCount() (v int64) {
	if !p.IsSetBufferCount() {
		return UpdateSpuReq_BufferCount_DEFAULT
	}
	return *p.BufferCount
}
func (p *UpdateSpuReq) SetName(val *string) {
	p.Name = val
}
func (p *UpdateSpuReq) SetDescription(val *string) {
	p.Description = val
}
func (p *UpdateSpuReq) SetCategoryID(val *int64) {
	p.CategoryID = val
}
func (p *UpdateSpuReq) SetGoodsHeadDrawing(val []byte) {
	p.GoodsHeadDrawing = val
}
func (p *UpdateSpuReq) SetPrice(val *float64) {
	p.Price = val
}
func (p *UpdateSpuReq) SetForSale(val *int32) {
	p.ForSale = val
}
func (p *UpdateSpuReq) SetShipping(val *float64) {
	p.Shipping = val
}
func (p *UpdateSpuReq) SetSpuID(val int64) {
	p.SpuID = val
}
func (p *UpdateSpuReq) SetBufferCount(val *int64) {
	p.BufferCount = val
}

func (p *UpdateSpuReq) IsSetName() bool {
	return p.Name != nil
}

func (p *UpdateSpuReq) IsSetDescription() bool {
	return p.Description != nil
}

func (p *UpdateSpuReq) IsSetCategoryID() bool {
	return p.CategoryID != nil
}

func (p *UpdateSpuReq) IsSetGoodsHeadDrawing() bool {
	return p.GoodsHeadDrawing != nil
}

func (p *UpdateSpuReq) IsSetPrice() bool {
	return p.Price != nil
}

func (p *UpdateSpuReq) IsSetForSale() bool {
	return p.ForSale != nil
}

func (p *UpdateSpuReq) IsSetShipping() bool {
	return p.Shipping != nil
}

func (p *UpdateSpuReq) IsSetBufferCount() bool {
	return p.BufferCount != nil
}

func (p *UpdateSpuReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UpdateSpuReq(%+v)", *p)
}

func (p *UpdateSpuReq) DeepEqual(ano *UpdateSpuReq) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Name) {
		return false
	}
	if !p.Field2DeepEqual(ano.Description) {
		return false
	}
	if !p.Field3DeepEqual(ano.CategoryID) {
		return false
	}
	if !p.Field4DeepEqual(ano.GoodsHeadDrawing) {
		return false
	}
	if !p.Field5DeepEqual(ano.Price) {
		return false
	}
	if !p.Field6DeepEqual(ano.ForSale) {
		return false
	}
	if !p.Field7DeepEqual(ano.Shipping) {
		return false
	}
	if !p.Field8DeepEqual(ano.SpuID) {
		return false
	}
	if !p.Field9DeepEqual(ano.BufferCount) {
		return false
	}
	return true
}

func (p *UpdateSpuReq) Field1DeepEqual(src *string) bool {

	if p.Name == src {
		return true
	} else if p.Name == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Name, *src) != 0 {
		return false
	}
	return true
}
func (p *UpdateSpuReq) Field2DeepEqual(src *string) bool {

	if p.Description == src {
		return true
	} else if p.Description == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Description, *src) != 0 {
		return false
	}
	return true
}
func (p *UpdateSpuReq) Field3DeepEqual(src *int64) bool {

	if p.CategoryID == src {
		return true
	} else if p.CategoryID == nil || src == nil {
		return false
	}
	if *p.CategoryID != *src {
		return false
	}
	return true
}
func (p *UpdateSpuReq) Field4DeepEqual(src []byte) bool {

	if bytes.Compare(p.GoodsHeadDrawing, src) != 0 {
		return false
	}
	return true
}
func (p *UpdateSpuReq) Field5DeepEqual(src *float64) bool {

	if p.Price == src {
		return true
	} else if p.Price == nil || src == nil {
		return false
	}
	if *p.Price != *src {
		return false
	}
	return true
}
func (p *UpdateSpuReq) Field6DeepEqual(src *int32) bool {

	if p.ForSale == src {
		return true
	} else if p.ForSale == nil || src == nil {
		return false
	}
	if *p.ForSale != *src {
		return false
	}
	return true
}
func (p *UpdateSpuReq) Field7DeepEqual(src *float64) bool {

	if p.Shipping == src {
		return true
	} else if p.Shipping == nil || src == nil {
		return false
	}
	if *p.Shipping != *src {
		return false
	}
	return true
}
func (p *UpdateSpuReq) Field8DeepEqual(src int64) bool {

	if p.SpuID != src {
		return false
	}
	return true
}
func (p *UpdateSpuReq) Field9DeepEqual(src *int64) bool {

	if p.BufferCount == src {
		return true
	} else if p.BufferCount == nil || src == nil {
		return false
	}
	if *p.BufferCount != *src {
		return false
	}
	return true
}

var fieldIDToName_UpdateSpuReq = map[int16]string{
	1: "name",
	2: "description",
	3: "categoryID",
	4: "goodsHeadDrawing",
	5: "price",
	6: "forSale",
	7: "shipping",
	8: "spuID",
	9: "bufferCount",
}

type UpdateSpuResp struct {
	Base *model.BaseResp `thrift:"base,1,required" frugal:"1,required,model.BaseResp" json:"base"`
}

func NewUpdateSpuResp() *UpdateSpuResp {
	return &UpdateSpuResp{}
}

func (p *UpdateSpuResp) InitDefault() {
}

var UpdateSpuResp_Base_DEFAULT *model.BaseResp

func (p *UpdateSpuResp) GetBase() (v *model.BaseResp) {
	if !p.IsSetBase() {
		return UpdateSpuResp_Base_DEFAULT
	}
	return p.Base
}
func (p *UpdateSpuResp) SetBase(val *model.BaseResp) {
	p.Base = val
}

func (p *UpdateSpuResp) IsSetBase() bool {
	return p.Base != nil
}

func (p *UpdateSpuResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UpdateSpuResp(%+v)", *p)
}

func (p *UpdateSpuResp) DeepEqual(ano *UpdateSpuResp) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Base) {
		return false
	}
	return true
}

func (p *UpdateSpuResp) Field1DeepEqual(src *model.BaseResp) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}

var fieldIDToName_UpdateSpuResp = map[int16]string{
	1: "base",
}

type ViewSpuReq struct {
	KeyWord    *string  `thrift:"keyWord,1,optional" frugal:"1,optional,string" json:"keyWord,omitempty"`
	CategoryID *int64   `thrift:"categoryID,2,optional" frugal:"2,optional,i64" json:"categoryID,omitempty"`
	SpuID      *int64   `thrift:"spuID,3,optional" frugal:"3,optional,i64" json:"spuID,omitempty"`
	MinCost    *float64 `thrift:"minCost,4,optional" frugal:"4,optional,double" json:"minCost,omitempty"`
	MaxCost    *float64 `thrift:"maxCost,5,optional" frugal:"5,optional,double" json:"maxCost,omitempty"`
	IsShipping *bool    `thrift:"isShipping,6,optional" frugal:"6,optional,bool" json:"isShipping,omitempty"`
	PageNum    *int64   `thrift:"pageNum,7,optional" frugal:"7,optional,i64" json:"pageNum,omitempty"`
	PageSize   *int64   `thrift:"pageSize,8,optional" frugal:"8,optional,i64" json:"pageSize,omitempty"`
}

func NewViewSpuReq() *ViewSpuReq {
	return &ViewSpuReq{}
}

func (p *ViewSpuReq) InitDefault() {
}

var ViewSpuReq_KeyWord_DEFAULT string

func (p *ViewSpuReq) GetKeyWord() (v string) {
	if !p.IsSetKeyWord() {
		return ViewSpuReq_KeyWord_DEFAULT
	}
	return *p.KeyWord
}

var ViewSpuReq_CategoryID_DEFAULT int64

func (p *ViewSpuReq) GetCategoryID() (v int64) {
	if !p.IsSetCategoryID() {
		return ViewSpuReq_CategoryID_DEFAULT
	}
	return *p.CategoryID
}

var ViewSpuReq_SpuID_DEFAULT int64

func (p *ViewSpuReq) GetSpuID() (v int64) {
	if !p.IsSetSpuID() {
		return ViewSpuReq_SpuID_DEFAULT
	}
	return *p.SpuID
}

var ViewSpuReq_MinCost_DEFAULT float64

func (p *ViewSpuReq) GetMinCost() (v float64) {
	if !p.IsSetMinCost() {
		return ViewSpuReq_MinCost_DEFAULT
	}
	return *p.MinCost
}

var ViewSpuReq_MaxCost_DEFAULT float64

func (p *ViewSpuReq) GetMaxCost() (v float64) {
	if !p.IsSetMaxCost() {
		return ViewSpuReq_MaxCost_DEFAULT
	}
	return *p.MaxCost
}

var ViewSpuReq_IsShipping_DEFAULT bool

func (p *ViewSpuReq) GetIsShipping() (v bool) {
	if !p.IsSetIsShipping() {
		return ViewSpuReq_IsShipping_DEFAULT
	}
	return *p.IsShipping
}

var ViewSpuReq_PageNum_DEFAULT int64

func (p *ViewSpuReq) GetPageNum() (v int64) {
	if !p.IsSetPageNum() {
		return ViewSpuReq_PageNum_DEFAULT
	}
	return *p.PageNum
}

var ViewSpuReq_PageSize_DEFAULT int64

func (p *ViewSpuReq) GetPageSize() (v int64) {
	if !p.IsSetPageSize() {
		return ViewSpuReq_PageSize_DEFAULT
	}
	return *p.PageSize
}
func (p *ViewSpuReq) SetKeyWord(val *string) {
	p.KeyWord = val
}
func (p *ViewSpuReq) SetCategoryID(val *int64) {
	p.CategoryID = val
}
func (p *ViewSpuReq) SetSpuID(val *int64) {
	p.SpuID = val
}
func (p *ViewSpuReq) SetMinCost(val *float64) {
	p.MinCost = val
}
func (p *ViewSpuReq) SetMaxCost(val *float64) {
	p.MaxCost = val
}
func (p *ViewSpuReq) SetIsShipping(val *bool) {
	p.IsShipping = val
}
func (p *ViewSpuReq) SetPageNum(val *int64) {
	p.PageNum = val
}
func (p *ViewSpuReq) SetPageSize(val *int64) {
	p.PageSize = val
}

func (p *ViewSpuReq) IsSetKeyWord() bool {
	return p.KeyWord != nil
}

func (p *ViewSpuReq) IsSetCategoryID() bool {
	return p.CategoryID != nil
}

func (p *ViewSpuReq) IsSetSpuID() bool {
	return p.SpuID != nil
}

func (p *ViewSpuReq) IsSetMinCost() bool {
	return p.MinCost != nil
}

func (p *ViewSpuReq) IsSetMaxCost() bool {
	return p.MaxCost != nil
}

func (p *ViewSpuReq) IsSetIsShipping() bool {
	return p.IsShipping != nil
}

func (p *ViewSpuReq) IsSetPageNum() bool {
	return p.PageNum != nil
}

func (p *ViewSpuReq) IsSetPageSize() bool {
	return p.PageSize != nil
}

func (p *ViewSpuReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ViewSpuReq(%+v)", *p)
}

func (p *ViewSpuReq) DeepEqual(ano *ViewSpuReq) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.KeyWord) {
		return false
	}
	if !p.Field2DeepEqual(ano.CategoryID) {
		return false
	}
	if !p.Field3DeepEqual(ano.SpuID) {
		return false
	}
	if !p.Field4DeepEqual(ano.MinCost) {
		return false
	}
	if !p.Field5DeepEqual(ano.MaxCost) {
		return false
	}
	if !p.Field6DeepEqual(ano.IsShipping) {
		return false
	}
	if !p.Field7DeepEqual(ano.PageNum) {
		return false
	}
	if !p.Field8DeepEqual(ano.PageSize) {
		return false
	}
	return true
}

func (p *ViewSpuReq) Field1DeepEqual(src *string) bool {

	if p.KeyWord == src {
		return true
	} else if p.KeyWord == nil || src == nil {
		return false
	}
	if strings.Compare(*p.KeyWord, *src) != 0 {
		return false
	}
	return true
}
func (p *ViewSpuReq) Field2DeepEqual(src *int64) bool {

	if p.CategoryID == src {
		return true
	} else if p.CategoryID == nil || src == nil {
		return false
	}
	if *p.CategoryID != *src {
		return false
	}
	return true
}
func (p *ViewSpuReq) Field3DeepEqual(src *int64) bool {

	if p.SpuID == src {
		return true
	} else if p.SpuID == nil || src == nil {
		return false
	}
	if *p.SpuID != *src {
		return false
	}
	return true
}
func (p *ViewSpuReq) Field4DeepEqual(src *float64) bool {

	if p.MinCost == src {
		return true
	} else if p.MinCost == nil || src == nil {
		return false
	}
	if *p.MinCost != *src {
		return false
	}
	return true
}
func (p *ViewSpuReq) Field5DeepEqual(src *float64) bool {

	if p.MaxCost == src {
		return true
	} else if p.MaxCost == nil || src == nil {
		return false
	}
	if *p.MaxCost != *src {
		return false
	}
	return true
}
func (p *ViewSpuReq) Field6DeepEqual(src *bool) bool {

	if p.IsShipping == src {
		return true
	} else if p.IsShipping == nil || src == nil {
		return false
	}
	if *p.IsShipping != *src {
		return false
	}
	return true
}
func (p *ViewSpuReq) Field7DeepEqual(src *int64) bool {

	if p.PageNum == src {
		return true
	} else if p.PageNum == nil || src == nil {
		return false
	}
	if *p.PageNum != *src {
		return false
	}
	return true
}
func (p *ViewSpuReq) Field8DeepEqual(src *int64) bool {

	if p.PageSize == src {
		return true
	} else if p.PageSize == nil || src == nil {
		return false
	}
	if *p.PageSize != *src {
		return false
	}
	return true
}

var fieldIDToName_ViewSpuReq = map[int16]string{
	1: "keyWord",
	2: "categoryID",
	3: "spuID",
	4: "minCost",
	5: "maxCost",
	6: "isShipping",
	7: "pageNum",
	8: "pageSize",
}

type ViewSpuResp struct {
	Base  *model.BaseResp `thrift:"base,1,required" frugal:"1,required,model.BaseResp" json:"base"`
	Spus  []*model.Spu    `thrift:"spus,2,required" frugal:"2,required,list<model.Spu>" json:"spus"`
	Total int64           `thrift:"total,3,required" frugal:"3,required,i64" json:"total"`
}

func NewViewSpuResp() *ViewSpuResp {
	return &ViewSpuResp{}
}

func (p *ViewSpuResp) InitDefault() {
}

var ViewSpuResp_Base_DEFAULT *model.BaseResp

func (p *ViewSpuResp) GetBase() (v *model.BaseResp) {
	if !p.IsSetBase() {
		return ViewSpuResp_Base_DEFAULT
	}
	return p.Base
}

func (p *ViewSpuResp) GetSpus() (v []*model.Spu) {
	return p.Spus
}

func (p *ViewSpuResp) GetTotal() (v int64) {
	return p.Total
}
func (p *ViewSpuResp) SetBase(val *model.BaseResp) {
	p.Base = val
}
func (p *ViewSpuResp) SetSpus(val []*model.Spu) {
	p.Spus = val
}
func (p *ViewSpuResp) SetTotal(val int64) {
	p.Total = val
}

func (p *ViewSpuResp) IsSetBase() bool {
	return p.Base != nil
}

func (p *ViewSpuResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ViewSpuResp(%+v)", *p)
}

func (p *ViewSpuResp) DeepEqual(ano *ViewSpuResp) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Base) {
		return false
	}
	if !p.Field2DeepEqual(ano.Spus) {
		return false
	}
	if !p.Field3DeepEqual(ano.Total) {
		return false
	}
	return true
}

func (p *ViewSpuResp) Field1DeepEqual(src *model.BaseResp) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}
func (p *ViewSpuResp) Field2DeepEqual(src []*model.Spu) bool {

	if len(p.Spus) != len(src) {
		return false
	}
	for i, v := range p.Spus {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *ViewSpuResp) Field3DeepEqual(src int64) bool {

	if p.Total != src {
		return false
	}
	return true
}

var fieldIDToName_ViewSpuResp = map[int16]string{
	1: "base",
	2: "spus",
	3: "total",
}

type DeleteSpuReq struct {
	SpuID int64 `thrift:"spuID,1,required" frugal:"1,required,i64" json:"spuID"`
}

func NewDeleteSpuReq() *DeleteSpuReq {
	return &DeleteSpuReq{}
}

func (p *DeleteSpuReq) InitDefault() {
}

func (p *DeleteSpuReq) GetSpuID() (v int64) {
	return p.SpuID
}
func (p *DeleteSpuReq) SetSpuID(val int64) {
	p.SpuID = val
}

func (p *DeleteSpuReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DeleteSpuReq(%+v)", *p)
}

func (p *DeleteSpuReq) DeepEqual(ano *DeleteSpuReq) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.SpuID) {
		return false
	}
	return true
}

func (p *DeleteSpuReq) Field1DeepEqual(src int64) bool {

	if p.SpuID != src {
		return false
	}
	return true
}

var fieldIDToName_DeleteSpuReq = map[int16]string{
	1: "spuID",
}

type DeleteSpuResp struct {
	Base *model.BaseResp `thrift:"base,1,required" frugal:"1,required,model.BaseResp" json:"base"`
}

func NewDeleteSpuResp() *DeleteSpuResp {
	return &DeleteSpuResp{}
}

func (p *DeleteSpuResp) InitDefault() {
}

var DeleteSpuResp_Base_DEFAULT *model.BaseResp

func (p *DeleteSpuResp) GetBase() (v *model.BaseResp) {
	if !p.IsSetBase() {
		return DeleteSpuResp_Base_DEFAULT
	}
	return p.Base
}
func (p *DeleteSpuResp) SetBase(val *model.BaseResp) {
	p.Base = val
}

func (p *DeleteSpuResp) IsSetBase() bool {
	return p.Base != nil
}

func (p *DeleteSpuResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DeleteSpuResp(%+v)", *p)
}

func (p *DeleteSpuResp) DeepEqual(ano *DeleteSpuResp) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Base) {
		return false
	}
	return true
}

func (p *DeleteSpuResp) Field1DeepEqual(src *model.BaseResp) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}

var fieldIDToName_DeleteSpuResp = map[int16]string{
	1: "base",
}

type CreateSpuImageReq struct {
	Data        []byte `thrift:"data,1,required" frugal:"1,required,binary" json:"data"`
	SpuID       int64  `thrift:"spuID,2,required" frugal:"2,required,i64" json:"spuID"`
	BufferCount int64  `thrift:"bufferCount,3,required" frugal:"3,required,i64" json:"bufferCount"`
}

func NewCreateSpuImageReq() *CreateSpuImageReq {
	return &CreateSpuImageReq{}
}

func (p *CreateSpuImageReq) InitDefault() {
}

func (p *CreateSpuImageReq) GetData() (v []byte) {
	return p.Data
}

func (p *CreateSpuImageReq) GetSpuID() (v int64) {
	return p.SpuID
}

func (p *CreateSpuImageReq) GetBufferCount() (v int64) {
	return p.BufferCount
}
func (p *CreateSpuImageReq) SetData(val []byte) {
	p.Data = val
}
func (p *CreateSpuImageReq) SetSpuID(val int64) {
	p.SpuID = val
}
func (p *CreateSpuImageReq) SetBufferCount(val int64) {
	p.BufferCount = val
}

func (p *CreateSpuImageReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreateSpuImageReq(%+v)", *p)
}

func (p *CreateSpuImageReq) DeepEqual(ano *CreateSpuImageReq) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Data) {
		return false
	}
	if !p.Field2DeepEqual(ano.SpuID) {
		return false
	}
	if !p.Field3DeepEqual(ano.BufferCount) {
		return false
	}
	return true
}

func (p *CreateSpuImageReq) Field1DeepEqual(src []byte) bool {

	if bytes.Compare(p.Data, src) != 0 {
		return false
	}
	return true
}
func (p *CreateSpuImageReq) Field2DeepEqual(src int64) bool {

	if p.SpuID != src {
		return false
	}
	return true
}
func (p *CreateSpuImageReq) Field3DeepEqual(src int64) bool {

	if p.BufferCount != src {
		return false
	}
	return true
}

var fieldIDToName_CreateSpuImageReq = map[int16]string{
	1: "data",
	2: "spuID",
	3: "bufferCount",
}

type CreateSpuImageResp struct {
	Base    *model.BaseResp `thrift:"base,1,required" frugal:"1,required,model.BaseResp" json:"base"`
	ImageID int64           `thrift:"imageID,2,required" frugal:"2,required,i64" json:"imageID"`
}

func NewCreateSpuImageResp() *CreateSpuImageResp {
	return &CreateSpuImageResp{}
}

func (p *CreateSpuImageResp) InitDefault() {
}

var CreateSpuImageResp_Base_DEFAULT *model.BaseResp

func (p *CreateSpuImageResp) GetBase() (v *model.BaseResp) {
	if !p.IsSetBase() {
		return CreateSpuImageResp_Base_DEFAULT
	}
	return p.Base
}

func (p *CreateSpuImageResp) GetImageID() (v int64) {
	return p.ImageID
}
func (p *CreateSpuImageResp) SetBase(val *model.BaseResp) {
	p.Base = val
}
func (p *CreateSpuImageResp) SetImageID(val int64) {
	p.ImageID = val
}

func (p *CreateSpuImageResp) IsSetBase() bool {
	return p.Base != nil
}

func (p *CreateSpuImageResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreateSpuImageResp(%+v)", *p)
}

func (p *CreateSpuImageResp) DeepEqual(ano *CreateSpuImageResp) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Base) {
		return false
	}
	if !p.Field2DeepEqual(ano.ImageID) {
		return false
	}
	return true
}

func (p *CreateSpuImageResp) Field1DeepEqual(src *model.BaseResp) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}
func (p *CreateSpuImageResp) Field2DeepEqual(src int64) bool {

	if p.ImageID != src {
		return false
	}
	return true
}

var fieldIDToName_CreateSpuImageResp = map[int16]string{
	1: "base",
	2: "imageID",
}

type UpdateSpuImageReq struct {
	Data        []byte `thrift:"data,1,required" frugal:"1,required,binary" json:"data"`
	ImageID     int64  `thrift:"imageID,2,required" frugal:"2,required,i64" json:"imageID"`
	BufferCount int64  `thrift:"bufferCount,3,required" frugal:"3,required,i64" json:"bufferCount"`
}

func NewUpdateSpuImageReq() *UpdateSpuImageReq {
	return &UpdateSpuImageReq{}
}

func (p *UpdateSpuImageReq) InitDefault() {
}

func (p *UpdateSpuImageReq) GetData() (v []byte) {
	return p.Data
}

func (p *UpdateSpuImageReq) GetImageID() (v int64) {
	return p.ImageID
}

func (p *UpdateSpuImageReq) GetBufferCount() (v int64) {
	return p.BufferCount
}
func (p *UpdateSpuImageReq) SetData(val []byte) {
	p.Data = val
}
func (p *UpdateSpuImageReq) SetImageID(val int64) {
	p.ImageID = val
}
func (p *UpdateSpuImageReq) SetBufferCount(val int64) {
	p.BufferCount = val
}

func (p *UpdateSpuImageReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UpdateSpuImageReq(%+v)", *p)
}

func (p *UpdateSpuImageReq) DeepEqual(ano *UpdateSpuImageReq) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Data) {
		return false
	}
	if !p.Field2DeepEqual(ano.ImageID) {
		return false
	}
	if !p.Field3DeepEqual(ano.BufferCount) {
		return false
	}
	return true
}

func (p *UpdateSpuImageReq) Field1DeepEqual(src []byte) bool {

	if bytes.Compare(p.Data, src) != 0 {
		return false
	}
	return true
}
func (p *UpdateSpuImageReq) Field2DeepEqual(src int64) bool {

	if p.ImageID != src {
		return false
	}
	return true
}
func (p *UpdateSpuImageReq) Field3DeepEqual(src int64) bool {

	if p.BufferCount != src {
		return false
	}
	return true
}

var fieldIDToName_UpdateSpuImageReq = map[int16]string{
	1: "data",
	2: "imageID",
	3: "bufferCount",
}

type UpdateSpuImageResp struct {
	Base *model.BaseResp `thrift:"base,1,required" frugal:"1,required,model.BaseResp" json:"base"`
}

func NewUpdateSpuImageResp() *UpdateSpuImageResp {
	return &UpdateSpuImageResp{}
}

func (p *UpdateSpuImageResp) InitDefault() {
}

var UpdateSpuImageResp_Base_DEFAULT *model.BaseResp

func (p *UpdateSpuImageResp) GetBase() (v *model.BaseResp) {
	if !p.IsSetBase() {
		return UpdateSpuImageResp_Base_DEFAULT
	}
	return p.Base
}
func (p *UpdateSpuImageResp) SetBase(val *model.BaseResp) {
	p.Base = val
}

func (p *UpdateSpuImageResp) IsSetBase() bool {
	return p.Base != nil
}

func (p *UpdateSpuImageResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UpdateSpuImageResp(%+v)", *p)
}

func (p *UpdateSpuImageResp) DeepEqual(ano *UpdateSpuImageResp) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Base) {
		return false
	}
	return true
}

func (p *UpdateSpuImageResp) Field1DeepEqual(src *model.BaseResp) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}

var fieldIDToName_UpdateSpuImageResp = map[int16]string{
	1: "base",
}

type ViewSpuImageReq struct {
	SpuID    int64  `thrift:"spuID,1,required" frugal:"1,required,i64" json:"spuID"`
	PageNum  *int64 `thrift:"pageNum,2,optional" frugal:"2,optional,i64" json:"pageNum,omitempty"`
	PageSize *int64 `thrift:"pageSize,3,optional" frugal:"3,optional,i64" json:"pageSize,omitempty"`
}

func NewViewSpuImageReq() *ViewSpuImageReq {
	return &ViewSpuImageReq{}
}

func (p *ViewSpuImageReq) InitDefault() {
}

func (p *ViewSpuImageReq) GetSpuID() (v int64) {
	return p.SpuID
}

var ViewSpuImageReq_PageNum_DEFAULT int64

func (p *ViewSpuImageReq) GetPageNum() (v int64) {
	if !p.IsSetPageNum() {
		return ViewSpuImageReq_PageNum_DEFAULT
	}
	return *p.PageNum
}

var ViewSpuImageReq_PageSize_DEFAULT int64

func (p *ViewSpuImageReq) GetPageSize() (v int64) {
	if !p.IsSetPageSize() {
		return ViewSpuImageReq_PageSize_DEFAULT
	}
	return *p.PageSize
}
func (p *ViewSpuImageReq) SetSpuID(val int64) {
	p.SpuID = val
}
func (p *ViewSpuImageReq) SetPageNum(val *int64) {
	p.PageNum = val
}
func (p *ViewSpuImageReq) SetPageSize(val *int64) {
	p.PageSize = val
}

func (p *ViewSpuImageReq) IsSetPageNum() bool {
	return p.PageNum != nil
}

func (p *ViewSpuImageReq) IsSetPageSize() bool {
	return p.PageSize != nil
}

func (p *ViewSpuImageReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ViewSpuImageReq(%+v)", *p)
}

func (p *ViewSpuImageReq) DeepEqual(ano *ViewSpuImageReq) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.SpuID) {
		return false
	}
	if !p.Field2DeepEqual(ano.PageNum) {
		return false
	}
	if !p.Field3DeepEqual(ano.PageSize) {
		return false
	}
	return true
}

func (p *ViewSpuImageReq) Field1DeepEqual(src int64) bool {

	if p.SpuID != src {
		return false
	}
	return true
}
func (p *ViewSpuImageReq) Field2DeepEqual(src *int64) bool {

	if p.PageNum == src {
		return true
	} else if p.PageNum == nil || src == nil {
		return false
	}
	if *p.PageNum != *src {
		return false
	}
	return true
}
func (p *ViewSpuImageReq) Field3DeepEqual(src *int64) bool {

	if p.PageSize == src {
		return true
	} else if p.PageSize == nil || src == nil {
		return false
	}
	if *p.PageSize != *src {
		return false
	}
	return true
}

var fieldIDToName_ViewSpuImageReq = map[int16]string{
	1: "spuID",
	2: "pageNum",
	3: "pageSize",
}

type ViewSpuImageResp struct {
	Base   *model.BaseResp   `thrift:"base,1,required" frugal:"1,required,model.BaseResp" json:"base"`
	Images []*model.SpuImage `thrift:"images,2,required" frugal:"2,required,list<model.SpuImage>" json:"images"`
	Total  int64             `thrift:"total,3,required" frugal:"3,required,i64" json:"total"`
}

func NewViewSpuImageResp() *ViewSpuImageResp {
	return &ViewSpuImageResp{}
}

func (p *ViewSpuImageResp) InitDefault() {
}

var ViewSpuImageResp_Base_DEFAULT *model.BaseResp

func (p *ViewSpuImageResp) GetBase() (v *model.BaseResp) {
	if !p.IsSetBase() {
		return ViewSpuImageResp_Base_DEFAULT
	}
	return p.Base
}

func (p *ViewSpuImageResp) GetImages() (v []*model.SpuImage) {
	return p.Images
}

func (p *ViewSpuImageResp) GetTotal() (v int64) {
	return p.Total
}
func (p *ViewSpuImageResp) SetBase(val *model.BaseResp) {
	p.Base = val
}
func (p *ViewSpuImageResp) SetImages(val []*model.SpuImage) {
	p.Images = val
}
func (p *ViewSpuImageResp) SetTotal(val int64) {
	p.Total = val
}

func (p *ViewSpuImageResp) IsSetBase() bool {
	return p.Base != nil
}

func (p *ViewSpuImageResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ViewSpuImageResp(%+v)", *p)
}

func (p *ViewSpuImageResp) DeepEqual(ano *ViewSpuImageResp) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Base) {
		return false
	}
	if !p.Field2DeepEqual(ano.Images) {
		return false
	}
	if !p.Field3DeepEqual(ano.Total) {
		return false
	}
	return true
}

func (p *ViewSpuImageResp) Field1DeepEqual(src *model.BaseResp) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}
func (p *ViewSpuImageResp) Field2DeepEqual(src []*model.SpuImage) bool {

	if len(p.Images) != len(src) {
		return false
	}
	for i, v := range p.Images {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *ViewSpuImageResp) Field3DeepEqual(src int64) bool {

	if p.Total != src {
		return false
	}
	return true
}

var fieldIDToName_ViewSpuImageResp = map[int16]string{
	1: "base",
	2: "images",
	3: "total",
}

type DeleteSpuImageReq struct {
	SpuImageID int64 `thrift:"spuImageID,1,required" frugal:"1,required,i64" json:"spuImageID"`
}

func NewDeleteSpuImageReq() *DeleteSpuImageReq {
	return &DeleteSpuImageReq{}
}

func (p *DeleteSpuImageReq) InitDefault() {
}

func (p *DeleteSpuImageReq) GetSpuImageID() (v int64) {
	return p.SpuImageID
}
func (p *DeleteSpuImageReq) SetSpuImageID(val int64) {
	p.SpuImageID = val
}

func (p *DeleteSpuImageReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DeleteSpuImageReq(%+v)", *p)
}

func (p *DeleteSpuImageReq) DeepEqual(ano *DeleteSpuImageReq) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.SpuImageID) {
		return false
	}
	return true
}

func (p *DeleteSpuImageReq) Field1DeepEqual(src int64) bool {

	if p.SpuImageID != src {
		return false
	}
	return true
}

var fieldIDToName_DeleteSpuImageReq = map[int16]string{
	1: "spuImageID",
}

type DeleteSpuImageResp struct {
	Base *model.BaseResp `thrift:"base,1,required" frugal:"1,required,model.BaseResp" json:"base"`
}

func NewDeleteSpuImageResp() *DeleteSpuImageResp {
	return &DeleteSpuImageResp{}
}

func (p *DeleteSpuImageResp) InitDefault() {
}

var DeleteSpuImageResp_Base_DEFAULT *model.BaseResp

func (p *DeleteSpuImageResp) GetBase() (v *model.BaseResp) {
	if !p.IsSetBase() {
		return DeleteSpuImageResp_Base_DEFAULT
	}
	return p.Base
}
func (p *DeleteSpuImageResp) SetBase(val *model.BaseResp) {
	p.Base = val
}

func (p *DeleteSpuImageResp) IsSetBase() bool {
	return p.Base != nil
}

func (p *DeleteSpuImageResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DeleteSpuImageResp(%+v)", *p)
}

func (p *DeleteSpuImageResp) DeepEqual(ano *DeleteSpuImageResp) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Base) {
		return false
	}
	return true
}

func (p *DeleteSpuImageResp) Field1DeepEqual(src *model.BaseResp) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}

var fieldIDToName_DeleteSpuImageResp = map[int16]string{
	1: "base",
}

type CreateSkuReq struct {
	Name             string  `thrift:"name,1,required" frugal:"1,required,string" json:"name"`
	Stock            int64   `thrift:"stock,2,required" frugal:"2,required,i64" json:"stock"`
	Description      string  `thrift:"description,3,required" frugal:"3,required,string" json:"description"`
	StyleHeadDrawing []byte  `thrift:"styleHeadDrawing,4,required" frugal:"4,required,binary" json:"styleHeadDrawing"`
	Price            float64 `thrift:"price,5,required" frugal:"5,required,double" json:"price"`
	ForSale          int32   `thrift:"forSale,6,required" frugal:"6,required,i32" json:"forSale"`
	SpuID            int64   `thrift:"spuID,7,required" frugal:"7,required,i64" json:"spuID"`
	BufferCount      int64   `thrift:"bufferCount,8,required" frugal:"8,required,i64" json:"bufferCount"`
	Ext              string  `thrift:"ext,9,required" frugal:"9,required,string" json:"ext"`
}

func NewCreateSkuReq() *CreateSkuReq {
	return &CreateSkuReq{}
}

func (p *CreateSkuReq) InitDefault() {
}

func (p *CreateSkuReq) GetName() (v string) {
	return p.Name
}

func (p *CreateSkuReq) GetStock() (v int64) {
	return p.Stock
}

func (p *CreateSkuReq) GetDescription() (v string) {
	return p.Description
}

func (p *CreateSkuReq) GetStyleHeadDrawing() (v []byte) {
	return p.StyleHeadDrawing
}

func (p *CreateSkuReq) GetPrice() (v float64) {
	return p.Price
}

func (p *CreateSkuReq) GetForSale() (v int32) {
	return p.ForSale
}

func (p *CreateSkuReq) GetSpuID() (v int64) {
	return p.SpuID
}

func (p *CreateSkuReq) GetBufferCount() (v int64) {
	return p.BufferCount
}

func (p *CreateSkuReq) GetExt() (v string) {
	return p.Ext
}
func (p *CreateSkuReq) SetName(val string) {
	p.Name = val
}
func (p *CreateSkuReq) SetStock(val int64) {
	p.Stock = val
}
func (p *CreateSkuReq) SetDescription(val string) {
	p.Description = val
}
func (p *CreateSkuReq) SetStyleHeadDrawing(val []byte) {
	p.StyleHeadDrawing = val
}
func (p *CreateSkuReq) SetPrice(val float64) {
	p.Price = val
}
func (p *CreateSkuReq) SetForSale(val int32) {
	p.ForSale = val
}
func (p *CreateSkuReq) SetSpuID(val int64) {
	p.SpuID = val
}
func (p *CreateSkuReq) SetBufferCount(val int64) {
	p.BufferCount = val
}
func (p *CreateSkuReq) SetExt(val string) {
	p.Ext = val
}

func (p *CreateSkuReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreateSkuReq(%+v)", *p)
}

func (p *CreateSkuReq) DeepEqual(ano *CreateSkuReq) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Name) {
		return false
	}
	if !p.Field2DeepEqual(ano.Stock) {
		return false
	}
	if !p.Field3DeepEqual(ano.Description) {
		return false
	}
	if !p.Field4DeepEqual(ano.StyleHeadDrawing) {
		return false
	}
	if !p.Field5DeepEqual(ano.Price) {
		return false
	}
	if !p.Field6DeepEqual(ano.ForSale) {
		return false
	}
	if !p.Field7DeepEqual(ano.SpuID) {
		return false
	}
	if !p.Field8DeepEqual(ano.BufferCount) {
		return false
	}
	if !p.Field9DeepEqual(ano.Ext) {
		return false
	}
	return true
}

func (p *CreateSkuReq) Field1DeepEqual(src string) bool {

	if strings.Compare(p.Name, src) != 0 {
		return false
	}
	return true
}
func (p *CreateSkuReq) Field2DeepEqual(src int64) bool {

	if p.Stock != src {
		return false
	}
	return true
}
func (p *CreateSkuReq) Field3DeepEqual(src string) bool {

	if strings.Compare(p.Description, src) != 0 {
		return false
	}
	return true
}
func (p *CreateSkuReq) Field4DeepEqual(src []byte) bool {

	if bytes.Compare(p.StyleHeadDrawing, src) != 0 {
		return false
	}
	return true
}
func (p *CreateSkuReq) Field5DeepEqual(src float64) bool {

	if p.Price != src {
		return false
	}
	return true
}
func (p *CreateSkuReq) Field6DeepEqual(src int32) bool {

	if p.ForSale != src {
		return false
	}
	return true
}
func (p *CreateSkuReq) Field7DeepEqual(src int64) bool {

	if p.SpuID != src {
		return false
	}
	return true
}
func (p *CreateSkuReq) Field8DeepEqual(src int64) bool {

	if p.BufferCount != src {
		return false
	}
	return true
}
func (p *CreateSkuReq) Field9DeepEqual(src string) bool {

	if strings.Compare(p.Ext, src) != 0 {
		return false
	}
	return true
}

var fieldIDToName_CreateSkuReq = map[int16]string{
	1: "name",
	2: "stock",
	3: "description",
	4: "styleHeadDrawing",
	5: "price",
	6: "forSale",
	7: "spuID",
	8: "bufferCount",
	9: "ext",
}

type CreateSkuResp struct {
	Base  *model.BaseResp `thrift:"base,1,required" frugal:"1,required,model.BaseResp" json:"base"`
	SkuID int64           `thrift:"skuID,2,required" frugal:"2,required,i64" json:"skuID"`
}

func NewCreateSkuResp() *CreateSkuResp {
	return &CreateSkuResp{}
}

func (p *CreateSkuResp) InitDefault() {
}

var CreateSkuResp_Base_DEFAULT *model.BaseResp

func (p *CreateSkuResp) GetBase() (v *model.BaseResp) {
	if !p.IsSetBase() {
		return CreateSkuResp_Base_DEFAULT
	}
	return p.Base
}

func (p *CreateSkuResp) GetSkuID() (v int64) {
	return p.SkuID
}
func (p *CreateSkuResp) SetBase(val *model.BaseResp) {
	p.Base = val
}
func (p *CreateSkuResp) SetSkuID(val int64) {
	p.SkuID = val
}

func (p *CreateSkuResp) IsSetBase() bool {
	return p.Base != nil
}

func (p *CreateSkuResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreateSkuResp(%+v)", *p)
}

func (p *CreateSkuResp) DeepEqual(ano *CreateSkuResp) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Base) {
		return false
	}
	if !p.Field2DeepEqual(ano.SkuID) {
		return false
	}
	return true
}

func (p *CreateSkuResp) Field1DeepEqual(src *model.BaseResp) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}
func (p *CreateSkuResp) Field2DeepEqual(src int64) bool {

	if p.SkuID != src {
		return false
	}
	return true
}

var fieldIDToName_CreateSkuResp = map[int16]string{
	1: "base",
	2: "skuID",
}

type CreateSkuImageReq struct {
	Data        []byte `thrift:"data,1,required" frugal:"1,required,binary" json:"data"`
	SkuID       int64  `thrift:"skuID,2,required" frugal:"2,required,i64" json:"skuID"`
	BufferCount int64  `thrift:"bufferCount,3,required" frugal:"3,required,i64" json:"bufferCount"`
}

func NewCreateSkuImageReq() *CreateSkuImageReq {
	return &CreateSkuImageReq{}
}

func (p *CreateSkuImageReq) InitDefault() {
}

func (p *CreateSkuImageReq) GetData() (v []byte) {
	return p.Data
}

func (p *CreateSkuImageReq) GetSkuID() (v int64) {
	return p.SkuID
}

func (p *CreateSkuImageReq) GetBufferCount() (v int64) {
	return p.BufferCount
}
func (p *CreateSkuImageReq) SetData(val []byte) {
	p.Data = val
}
func (p *CreateSkuImageReq) SetSkuID(val int64) {
	p.SkuID = val
}
func (p *CreateSkuImageReq) SetBufferCount(val int64) {
	p.BufferCount = val
}

func (p *CreateSkuImageReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreateSkuImageReq(%+v)", *p)
}

func (p *CreateSkuImageReq) DeepEqual(ano *CreateSkuImageReq) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Data) {
		return false
	}
	if !p.Field2DeepEqual(ano.SkuID) {
		return false
	}
	if !p.Field3DeepEqual(ano.BufferCount) {
		return false
	}
	return true
}

func (p *CreateSkuImageReq) Field1DeepEqual(src []byte) bool {

	if bytes.Compare(p.Data, src) != 0 {
		return false
	}
	return true
}
func (p *CreateSkuImageReq) Field2DeepEqual(src int64) bool {

	if p.SkuID != src {
		return false
	}
	return true
}
func (p *CreateSkuImageReq) Field3DeepEqual(src int64) bool {

	if p.BufferCount != src {
		return false
	}
	return true
}

var fieldIDToName_CreateSkuImageReq = map[int16]string{
	1: "data",
	2: "skuID",
	3: "bufferCount",
}

type CreateSkuImageResp struct {
	Base    *model.BaseResp `thrift:"base,1,required" frugal:"1,required,model.BaseResp" json:"base"`
	ImageID int64           `thrift:"imageID,2,required" frugal:"2,required,i64" json:"imageID"`
}

func NewCreateSkuImageResp() *CreateSkuImageResp {
	return &CreateSkuImageResp{}
}

func (p *CreateSkuImageResp) InitDefault() {
}

var CreateSkuImageResp_Base_DEFAULT *model.BaseResp

func (p *CreateSkuImageResp) GetBase() (v *model.BaseResp) {
	if !p.IsSetBase() {
		return CreateSkuImageResp_Base_DEFAULT
	}
	return p.Base
}

func (p *CreateSkuImageResp) GetImageID() (v int64) {
	return p.ImageID
}
func (p *CreateSkuImageResp) SetBase(val *model.BaseResp) {
	p.Base = val
}
func (p *CreateSkuImageResp) SetImageID(val int64) {
	p.ImageID = val
}

func (p *CreateSkuImageResp) IsSetBase() bool {
	return p.Base != nil
}

func (p *CreateSkuImageResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreateSkuImageResp(%+v)", *p)
}

func (p *CreateSkuImageResp) DeepEqual(ano *CreateSkuImageResp) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Base) {
		return false
	}
	if !p.Field2DeepEqual(ano.ImageID) {
		return false
	}
	return true
}

func (p *CreateSkuImageResp) Field1DeepEqual(src *model.BaseResp) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}
func (p *CreateSkuImageResp) Field2DeepEqual(src int64) bool {

	if p.ImageID != src {
		return false
	}
	return true
}

var fieldIDToName_CreateSkuImageResp = map[int16]string{
	1: "base",
	2: "imageID",
}

type UpdateSkuReq struct {
	SkuID            int64    `thrift:"skuID,1,required" frugal:"1,required,i64" json:"skuID"`
	Stock            *int64   `thrift:"stock,2,optional" frugal:"2,optional,i64" json:"stock,omitempty"`
	Description      *string  `thrift:"description,3,optional" frugal:"3,optional,string" json:"description,omitempty"`
	StyleHeadDrawing []byte   `thrift:"styleHeadDrawing,4,optional" frugal:"4,optional,binary" json:"styleHeadDrawing,omitempty"`
	Price            *float64 `thrift:"price,5,optional" frugal:"5,optional,double" json:"price,omitempty"`
	ForSale          *int32   `thrift:"forSale,6,optional" frugal:"6,optional,i32" json:"forSale,omitempty"`
	BufferCount      *int64   `thrift:"bufferCount,7,optional" frugal:"7,optional,i64" json:"bufferCount,omitempty"`
	Ext              string   `thrift:"ext,8,required" frugal:"8,required,string" json:"ext"`
}

func NewUpdateSkuReq() *UpdateSkuReq {
	return &UpdateSkuReq{}
}

func (p *UpdateSkuReq) InitDefault() {
}

func (p *UpdateSkuReq) GetSkuID() (v int64) {
	return p.SkuID
}

var UpdateSkuReq_Stock_DEFAULT int64

func (p *UpdateSkuReq) GetStock() (v int64) {
	if !p.IsSetStock() {
		return UpdateSkuReq_Stock_DEFAULT
	}
	return *p.Stock
}

var UpdateSkuReq_Description_DEFAULT string

func (p *UpdateSkuReq) GetDescription() (v string) {
	if !p.IsSetDescription() {
		return UpdateSkuReq_Description_DEFAULT
	}
	return *p.Description
}

var UpdateSkuReq_StyleHeadDrawing_DEFAULT []byte

func (p *UpdateSkuReq) GetStyleHeadDrawing() (v []byte) {
	if !p.IsSetStyleHeadDrawing() {
		return UpdateSkuReq_StyleHeadDrawing_DEFAULT
	}
	return p.StyleHeadDrawing
}

var UpdateSkuReq_Price_DEFAULT float64

func (p *UpdateSkuReq) GetPrice() (v float64) {
	if !p.IsSetPrice() {
		return UpdateSkuReq_Price_DEFAULT
	}
	return *p.Price
}

var UpdateSkuReq_ForSale_DEFAULT int32

func (p *UpdateSkuReq) GetForSale() (v int32) {
	if !p.IsSetForSale() {
		return UpdateSkuReq_ForSale_DEFAULT
	}
	return *p.ForSale
}

var UpdateSkuReq_BufferCount_DEFAULT int64

func (p *UpdateSkuReq) GetBufferCount() (v int64) {
	if !p.IsSetBufferCount() {
		return UpdateSkuReq_BufferCount_DEFAULT
	}
	return *p.BufferCount
}

func (p *UpdateSkuReq) GetExt() (v string) {
	return p.Ext
}
func (p *UpdateSkuReq) SetSkuID(val int64) {
	p.SkuID = val
}
func (p *UpdateSkuReq) SetStock(val *int64) {
	p.Stock = val
}
func (p *UpdateSkuReq) SetDescription(val *string) {
	p.Description = val
}
func (p *UpdateSkuReq) SetStyleHeadDrawing(val []byte) {
	p.StyleHeadDrawing = val
}
func (p *UpdateSkuReq) SetPrice(val *float64) {
	p.Price = val
}
func (p *UpdateSkuReq) SetForSale(val *int32) {
	p.ForSale = val
}
func (p *UpdateSkuReq) SetBufferCount(val *int64) {
	p.BufferCount = val
}
func (p *UpdateSkuReq) SetExt(val string) {
	p.Ext = val
}

func (p *UpdateSkuReq) IsSetStock() bool {
	return p.Stock != nil
}

func (p *UpdateSkuReq) IsSetDescription() bool {
	return p.Description != nil
}

func (p *UpdateSkuReq) IsSetStyleHeadDrawing() bool {
	return p.StyleHeadDrawing != nil
}

func (p *UpdateSkuReq) IsSetPrice() bool {
	return p.Price != nil
}

func (p *UpdateSkuReq) IsSetForSale() bool {
	return p.ForSale != nil
}

func (p *UpdateSkuReq) IsSetBufferCount() bool {
	return p.BufferCount != nil
}

func (p *UpdateSkuReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UpdateSkuReq(%+v)", *p)
}

func (p *UpdateSkuReq) DeepEqual(ano *UpdateSkuReq) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.SkuID) {
		return false
	}
	if !p.Field2DeepEqual(ano.Stock) {
		return false
	}
	if !p.Field3DeepEqual(ano.Description) {
		return false
	}
	if !p.Field4DeepEqual(ano.StyleHeadDrawing) {
		return false
	}
	if !p.Field5DeepEqual(ano.Price) {
		return false
	}
	if !p.Field6DeepEqual(ano.ForSale) {
		return false
	}
	if !p.Field7DeepEqual(ano.BufferCount) {
		return false
	}
	if !p.Field8DeepEqual(ano.Ext) {
		return false
	}
	return true
}

func (p *UpdateSkuReq) Field1DeepEqual(src int64) bool {

	if p.SkuID != src {
		return false
	}
	return true
}
func (p *UpdateSkuReq) Field2DeepEqual(src *int64) bool {

	if p.Stock == src {
		return true
	} else if p.Stock == nil || src == nil {
		return false
	}
	if *p.Stock != *src {
		return false
	}
	return true
}
func (p *UpdateSkuReq) Field3DeepEqual(src *string) bool {

	if p.Description == src {
		return true
	} else if p.Description == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Description, *src) != 0 {
		return false
	}
	return true
}
func (p *UpdateSkuReq) Field4DeepEqual(src []byte) bool {

	if bytes.Compare(p.StyleHeadDrawing, src) != 0 {
		return false
	}
	return true
}
func (p *UpdateSkuReq) Field5DeepEqual(src *float64) bool {

	if p.Price == src {
		return true
	} else if p.Price == nil || src == nil {
		return false
	}
	if *p.Price != *src {
		return false
	}
	return true
}
func (p *UpdateSkuReq) Field6DeepEqual(src *int32) bool {

	if p.ForSale == src {
		return true
	} else if p.ForSale == nil || src == nil {
		return false
	}
	if *p.ForSale != *src {
		return false
	}
	return true
}
func (p *UpdateSkuReq) Field7DeepEqual(src *int64) bool {

	if p.BufferCount == src {
		return true
	} else if p.BufferCount == nil || src == nil {
		return false
	}
	if *p.BufferCount != *src {
		return false
	}
	return true
}
func (p *UpdateSkuReq) Field8DeepEqual(src string) bool {

	if strings.Compare(p.Ext, src) != 0 {
		return false
	}
	return true
}

var fieldIDToName_UpdateSkuReq = map[int16]string{
	1: "skuID",
	2: "stock",
	3: "description",
	4: "styleHeadDrawing",
	5: "price",
	6: "forSale",
	7: "bufferCount",
	8: "ext",
}

type UpdateSkuResp struct {
	Base *model.BaseResp `thrift:"base,1,required" frugal:"1,required,model.BaseResp" json:"base"`
}

func NewUpdateSkuResp() *UpdateSkuResp {
	return &UpdateSkuResp{}
}

func (p *UpdateSkuResp) InitDefault() {
}

var UpdateSkuResp_Base_DEFAULT *model.BaseResp

func (p *UpdateSkuResp) GetBase() (v *model.BaseResp) {
	if !p.IsSetBase() {
		return UpdateSkuResp_Base_DEFAULT
	}
	return p.Base
}
func (p *UpdateSkuResp) SetBase(val *model.BaseResp) {
	p.Base = val
}

func (p *UpdateSkuResp) IsSetBase() bool {
	return p.Base != nil
}

func (p *UpdateSkuResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UpdateSkuResp(%+v)", *p)
}

func (p *UpdateSkuResp) DeepEqual(ano *UpdateSkuResp) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Base) {
		return false
	}
	return true
}

func (p *UpdateSkuResp) Field1DeepEqual(src *model.BaseResp) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}

var fieldIDToName_UpdateSkuResp = map[int16]string{
	1: "base",
}

type UpdateSkuImageReq struct {
	Data        []byte `thrift:"data,1,required" frugal:"1,required,binary" json:"data"`
	ImageID     int64  `thrift:"imageID,2,required" frugal:"2,required,i64" json:"imageID"`
	BufferCount int64  `thrift:"bufferCount,3,required" frugal:"3,required,i64" json:"bufferCount"`
}

func NewUpdateSkuImageReq() *UpdateSkuImageReq {
	return &UpdateSkuImageReq{}
}

func (p *UpdateSkuImageReq) InitDefault() {
}

func (p *UpdateSkuImageReq) GetData() (v []byte) {
	return p.Data
}

func (p *UpdateSkuImageReq) GetImageID() (v int64) {
	return p.ImageID
}

func (p *UpdateSkuImageReq) GetBufferCount() (v int64) {
	return p.BufferCount
}
func (p *UpdateSkuImageReq) SetData(val []byte) {
	p.Data = val
}
func (p *UpdateSkuImageReq) SetImageID(val int64) {
	p.ImageID = val
}
func (p *UpdateSkuImageReq) SetBufferCount(val int64) {
	p.BufferCount = val
}

func (p *UpdateSkuImageReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UpdateSkuImageReq(%+v)", *p)
}

func (p *UpdateSkuImageReq) DeepEqual(ano *UpdateSkuImageReq) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Data) {
		return false
	}
	if !p.Field2DeepEqual(ano.ImageID) {
		return false
	}
	if !p.Field3DeepEqual(ano.BufferCount) {
		return false
	}
	return true
}

func (p *UpdateSkuImageReq) Field1DeepEqual(src []byte) bool {

	if bytes.Compare(p.Data, src) != 0 {
		return false
	}
	return true
}
func (p *UpdateSkuImageReq) Field2DeepEqual(src int64) bool {

	if p.ImageID != src {
		return false
	}
	return true
}
func (p *UpdateSkuImageReq) Field3DeepEqual(src int64) bool {

	if p.BufferCount != src {
		return false
	}
	return true
}

var fieldIDToName_UpdateSkuImageReq = map[int16]string{
	1: "data",
	2: "imageID",
	3: "bufferCount",
}

type UpdateSkuImageResp struct {
	Base *model.BaseResp `thrift:"base,1,required" frugal:"1,required,model.BaseResp" json:"base"`
}

func NewUpdateSkuImageResp() *UpdateSkuImageResp {
	return &UpdateSkuImageResp{}
}

func (p *UpdateSkuImageResp) InitDefault() {
}

var UpdateSkuImageResp_Base_DEFAULT *model.BaseResp

func (p *UpdateSkuImageResp) GetBase() (v *model.BaseResp) {
	if !p.IsSetBase() {
		return UpdateSkuImageResp_Base_DEFAULT
	}
	return p.Base
}
func (p *UpdateSkuImageResp) SetBase(val *model.BaseResp) {
	p.Base = val
}

func (p *UpdateSkuImageResp) IsSetBase() bool {
	return p.Base != nil
}

func (p *UpdateSkuImageResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UpdateSkuImageResp(%+v)", *p)
}

func (p *UpdateSkuImageResp) DeepEqual(ano *UpdateSkuImageResp) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Base) {
		return false
	}
	return true
}

func (p *UpdateSkuImageResp) Field1DeepEqual(src *model.BaseResp) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}

var fieldIDToName_UpdateSkuImageResp = map[int16]string{
	1: "base",
}

type DeleteSkuReq struct {
	SkuID int64 `thrift:"skuID,1,required" frugal:"1,required,i64" json:"skuID"`
}

func NewDeleteSkuReq() *DeleteSkuReq {
	return &DeleteSkuReq{}
}

func (p *DeleteSkuReq) InitDefault() {
}

func (p *DeleteSkuReq) GetSkuID() (v int64) {
	return p.SkuID
}
func (p *DeleteSkuReq) SetSkuID(val int64) {
	p.SkuID = val
}

func (p *DeleteSkuReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DeleteSkuReq(%+v)", *p)
}

func (p *DeleteSkuReq) DeepEqual(ano *DeleteSkuReq) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.SkuID) {
		return false
	}
	return true
}

func (p *DeleteSkuReq) Field1DeepEqual(src int64) bool {

	if p.SkuID != src {
		return false
	}
	return true
}

var fieldIDToName_DeleteSkuReq = map[int16]string{
	1: "skuID",
}

type DeleteSkuResp struct {
	Base *model.BaseResp `thrift:"base,1,required" frugal:"1,required,model.BaseResp" json:"base"`
}

func NewDeleteSkuResp() *DeleteSkuResp {
	return &DeleteSkuResp{}
}

func (p *DeleteSkuResp) InitDefault() {
}

var DeleteSkuResp_Base_DEFAULT *model.BaseResp

func (p *DeleteSkuResp) GetBase() (v *model.BaseResp) {
	if !p.IsSetBase() {
		return DeleteSkuResp_Base_DEFAULT
	}
	return p.Base
}
func (p *DeleteSkuResp) SetBase(val *model.BaseResp) {
	p.Base = val
}

func (p *DeleteSkuResp) IsSetBase() bool {
	return p.Base != nil
}

func (p *DeleteSkuResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DeleteSkuResp(%+v)", *p)
}

func (p *DeleteSkuResp) DeepEqual(ano *DeleteSkuResp) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Base) {
		return false
	}
	return true
}

func (p *DeleteSkuResp) Field1DeepEqual(src *model.BaseResp) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}

var fieldIDToName_DeleteSkuResp = map[int16]string{
	1: "base",
}

type DeleteSkuImageReq struct {
	SkuImageID int64 `thrift:"skuImageID,1,required" frugal:"1,required,i64" json:"skuImageID"`
}

func NewDeleteSkuImageReq() *DeleteSkuImageReq {
	return &DeleteSkuImageReq{}
}

func (p *DeleteSkuImageReq) InitDefault() {
}

func (p *DeleteSkuImageReq) GetSkuImageID() (v int64) {
	return p.SkuImageID
}
func (p *DeleteSkuImageReq) SetSkuImageID(val int64) {
	p.SkuImageID = val
}

func (p *DeleteSkuImageReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DeleteSkuImageReq(%+v)", *p)
}

func (p *DeleteSkuImageReq) DeepEqual(ano *DeleteSkuImageReq) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.SkuImageID) {
		return false
	}
	return true
}

func (p *DeleteSkuImageReq) Field1DeepEqual(src int64) bool {

	if p.SkuImageID != src {
		return false
	}
	return true
}

var fieldIDToName_DeleteSkuImageReq = map[int16]string{
	1: "skuImageID",
}

type DeleteSkuImageResp struct {
	Base *model.BaseResp `thrift:"base,1,required" frugal:"1,required,model.BaseResp" json:"base"`
}

func NewDeleteSkuImageResp() *DeleteSkuImageResp {
	return &DeleteSkuImageResp{}
}

func (p *DeleteSkuImageResp) InitDefault() {
}

var DeleteSkuImageResp_Base_DEFAULT *model.BaseResp

func (p *DeleteSkuImageResp) GetBase() (v *model.BaseResp) {
	if !p.IsSetBase() {
		return DeleteSkuImageResp_Base_DEFAULT
	}
	return p.Base
}
func (p *DeleteSkuImageResp) SetBase(val *model.BaseResp) {
	p.Base = val
}

func (p *DeleteSkuImageResp) IsSetBase() bool {
	return p.Base != nil
}

func (p *DeleteSkuImageResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DeleteSkuImageResp(%+v)", *p)
}

func (p *DeleteSkuImageResp) DeepEqual(ano *DeleteSkuImageResp) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Base) {
		return false
	}
	return true
}

func (p *DeleteSkuImageResp) Field1DeepEqual(src *model.BaseResp) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}

var fieldIDToName_DeleteSkuImageResp = map[int16]string{
	1: "base",
}

type ViewSkuImageReq struct {
	SkuID    int64  `thrift:"skuID,1,required" frugal:"1,required,i64" json:"skuID"`
	PageNum  *int64 `thrift:"pageNum,2,optional" frugal:"2,optional,i64" json:"pageNum,omitempty"`
	PageSize *int64 `thrift:"pageSize,3,optional" frugal:"3,optional,i64" json:"pageSize,omitempty"`
}

func NewViewSkuImageReq() *ViewSkuImageReq {
	return &ViewSkuImageReq{}
}

func (p *ViewSkuImageReq) InitDefault() {
}

func (p *ViewSkuImageReq) GetSkuID() (v int64) {
	return p.SkuID
}

var ViewSkuImageReq_PageNum_DEFAULT int64

func (p *ViewSkuImageReq) GetPageNum() (v int64) {
	if !p.IsSetPageNum() {
		return ViewSkuImageReq_PageNum_DEFAULT
	}
	return *p.PageNum
}

var ViewSkuImageReq_PageSize_DEFAULT int64

func (p *ViewSkuImageReq) GetPageSize() (v int64) {
	if !p.IsSetPageSize() {
		return ViewSkuImageReq_PageSize_DEFAULT
	}
	return *p.PageSize
}
func (p *ViewSkuImageReq) SetSkuID(val int64) {
	p.SkuID = val
}
func (p *ViewSkuImageReq) SetPageNum(val *int64) {
	p.PageNum = val
}
func (p *ViewSkuImageReq) SetPageSize(val *int64) {
	p.PageSize = val
}

func (p *ViewSkuImageReq) IsSetPageNum() bool {
	return p.PageNum != nil
}

func (p *ViewSkuImageReq) IsSetPageSize() bool {
	return p.PageSize != nil
}

func (p *ViewSkuImageReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ViewSkuImageReq(%+v)", *p)
}

func (p *ViewSkuImageReq) DeepEqual(ano *ViewSkuImageReq) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.SkuID) {
		return false
	}
	if !p.Field2DeepEqual(ano.PageNum) {
		return false
	}
	if !p.Field3DeepEqual(ano.PageSize) {
		return false
	}
	return true
}

func (p *ViewSkuImageReq) Field1DeepEqual(src int64) bool {

	if p.SkuID != src {
		return false
	}
	return true
}
func (p *ViewSkuImageReq) Field2DeepEqual(src *int64) bool {

	if p.PageNum == src {
		return true
	} else if p.PageNum == nil || src == nil {
		return false
	}
	if *p.PageNum != *src {
		return false
	}
	return true
}
func (p *ViewSkuImageReq) Field3DeepEqual(src *int64) bool {

	if p.PageSize == src {
		return true
	} else if p.PageSize == nil || src == nil {
		return false
	}
	if *p.PageSize != *src {
		return false
	}
	return true
}

var fieldIDToName_ViewSkuImageReq = map[int16]string{
	1: "skuID",
	2: "pageNum",
	3: "pageSize",
}

type ViewSkuImageResp struct {
	Base   *model.BaseResp   `thrift:"base,1,required" frugal:"1,required,model.BaseResp" json:"base"`
	Images []*model.SkuImage `thrift:"images,2,required" frugal:"2,required,list<model.SkuImage>" json:"images"`
	Total  int64             `thrift:"total,3,required" frugal:"3,required,i64" json:"total"`
}

func NewViewSkuImageResp() *ViewSkuImageResp {
	return &ViewSkuImageResp{}
}

func (p *ViewSkuImageResp) InitDefault() {
}

var ViewSkuImageResp_Base_DEFAULT *model.BaseResp

func (p *ViewSkuImageResp) GetBase() (v *model.BaseResp) {
	if !p.IsSetBase() {
		return ViewSkuImageResp_Base_DEFAULT
	}
	return p.Base
}

func (p *ViewSkuImageResp) GetImages() (v []*model.SkuImage) {
	return p.Images
}

func (p *ViewSkuImageResp) GetTotal() (v int64) {
	return p.Total
}
func (p *ViewSkuImageResp) SetBase(val *model.BaseResp) {
	p.Base = val
}
func (p *ViewSkuImageResp) SetImages(val []*model.SkuImage) {
	p.Images = val
}
func (p *ViewSkuImageResp) SetTotal(val int64) {
	p.Total = val
}

func (p *ViewSkuImageResp) IsSetBase() bool {
	return p.Base != nil
}

func (p *ViewSkuImageResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ViewSkuImageResp(%+v)", *p)
}

func (p *ViewSkuImageResp) DeepEqual(ano *ViewSkuImageResp) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Base) {
		return false
	}
	if !p.Field2DeepEqual(ano.Images) {
		return false
	}
	if !p.Field3DeepEqual(ano.Total) {
		return false
	}
	return true
}

func (p *ViewSkuImageResp) Field1DeepEqual(src *model.BaseResp) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}
func (p *ViewSkuImageResp) Field2DeepEqual(src []*model.SkuImage) bool {

	if len(p.Images) != len(src) {
		return false
	}
	for i, v := range p.Images {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *ViewSkuImageResp) Field3DeepEqual(src int64) bool {

	if p.Total != src {
		return false
	}
	return true
}

var fieldIDToName_ViewSkuImageResp = map[int16]string{
	1: "base",
	2: "images",
	3: "total",
}

type ViewSkuReq struct {
	SkuID    *int64 `thrift:"skuID,1,optional" frugal:"1,optional,i64" json:"skuID,omitempty"`
	SpuID    *int64 `thrift:"spuID,2,optional" frugal:"2,optional,i64" json:"spuID,omitempty"`
	PageNum  *int64 `thrift:"pageNum,3,optional" frugal:"3,optional,i64" json:"pageNum,omitempty"`
	PageSize *int64 `thrift:"pageSize,4,optional" frugal:"4,optional,i64" json:"pageSize,omitempty"`
}

func NewViewSkuReq() *ViewSkuReq {
	return &ViewSkuReq{}
}

func (p *ViewSkuReq) InitDefault() {
}

var ViewSkuReq_SkuID_DEFAULT int64

func (p *ViewSkuReq) GetSkuID() (v int64) {
	if !p.IsSetSkuID() {
		return ViewSkuReq_SkuID_DEFAULT
	}
	return *p.SkuID
}

var ViewSkuReq_SpuID_DEFAULT int64

func (p *ViewSkuReq) GetSpuID() (v int64) {
	if !p.IsSetSpuID() {
		return ViewSkuReq_SpuID_DEFAULT
	}
	return *p.SpuID
}

var ViewSkuReq_PageNum_DEFAULT int64

func (p *ViewSkuReq) GetPageNum() (v int64) {
	if !p.IsSetPageNum() {
		return ViewSkuReq_PageNum_DEFAULT
	}
	return *p.PageNum
}

var ViewSkuReq_PageSize_DEFAULT int64

func (p *ViewSkuReq) GetPageSize() (v int64) {
	if !p.IsSetPageSize() {
		return ViewSkuReq_PageSize_DEFAULT
	}
	return *p.PageSize
}
func (p *ViewSkuReq) SetSkuID(val *int64) {
	p.SkuID = val
}
func (p *ViewSkuReq) SetSpuID(val *int64) {
	p.SpuID = val
}
func (p *ViewSkuReq) SetPageNum(val *int64) {
	p.PageNum = val
}
func (p *ViewSkuReq) SetPageSize(val *int64) {
	p.PageSize = val
}

func (p *ViewSkuReq) IsSetSkuID() bool {
	return p.SkuID != nil
}

func (p *ViewSkuReq) IsSetSpuID() bool {
	return p.SpuID != nil
}

func (p *ViewSkuReq) IsSetPageNum() bool {
	return p.PageNum != nil
}

func (p *ViewSkuReq) IsSetPageSize() bool {
	return p.PageSize != nil
}

func (p *ViewSkuReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ViewSkuReq(%+v)", *p)
}

func (p *ViewSkuReq) DeepEqual(ano *ViewSkuReq) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.SkuID) {
		return false
	}
	if !p.Field2DeepEqual(ano.SpuID) {
		return false
	}
	if !p.Field3DeepEqual(ano.PageNum) {
		return false
	}
	if !p.Field4DeepEqual(ano.PageSize) {
		return false
	}
	return true
}

func (p *ViewSkuReq) Field1DeepEqual(src *int64) bool {

	if p.SkuID == src {
		return true
	} else if p.SkuID == nil || src == nil {
		return false
	}
	if *p.SkuID != *src {
		return false
	}
	return true
}
func (p *ViewSkuReq) Field2DeepEqual(src *int64) bool {

	if p.SpuID == src {
		return true
	} else if p.SpuID == nil || src == nil {
		return false
	}
	if *p.SpuID != *src {
		return false
	}
	return true
}
func (p *ViewSkuReq) Field3DeepEqual(src *int64) bool {

	if p.PageNum == src {
		return true
	} else if p.PageNum == nil || src == nil {
		return false
	}
	if *p.PageNum != *src {
		return false
	}
	return true
}
func (p *ViewSkuReq) Field4DeepEqual(src *int64) bool {

	if p.PageSize == src {
		return true
	} else if p.PageSize == nil || src == nil {
		return false
	}
	if *p.PageSize != *src {
		return false
	}
	return true
}

var fieldIDToName_ViewSkuReq = map[int16]string{
	1: "skuID",
	2: "spuID",
	3: "pageNum",
	4: "pageSize",
}

type ViewSkuResp struct {
	Base  *model.BaseResp `thrift:"base,1,required" frugal:"1,required,model.BaseResp" json:"base"`
	Skus  []*model.Sku    `thrift:"skus,2,required" frugal:"2,required,list<model.Sku>" json:"skus"`
	Total int64           `thrift:"total,3,required" frugal:"3,required,i64" json:"total"`
}

func NewViewSkuResp() *ViewSkuResp {
	return &ViewSkuResp{}
}

func (p *ViewSkuResp) InitDefault() {
}

var ViewSkuResp_Base_DEFAULT *model.BaseResp

func (p *ViewSkuResp) GetBase() (v *model.BaseResp) {
	if !p.IsSetBase() {
		return ViewSkuResp_Base_DEFAULT
	}
	return p.Base
}

func (p *ViewSkuResp) GetSkus() (v []*model.Sku) {
	return p.Skus
}

func (p *ViewSkuResp) GetTotal() (v int64) {
	return p.Total
}
func (p *ViewSkuResp) SetBase(val *model.BaseResp) {
	p.Base = val
}
func (p *ViewSkuResp) SetSkus(val []*model.Sku) {
	p.Skus = val
}
func (p *ViewSkuResp) SetTotal(val int64) {
	p.Total = val
}

func (p *ViewSkuResp) IsSetBase() bool {
	return p.Base != nil
}

func (p *ViewSkuResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ViewSkuResp(%+v)", *p)
}

func (p *ViewSkuResp) DeepEqual(ano *ViewSkuResp) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Base) {
		return false
	}
	if !p.Field2DeepEqual(ano.Skus) {
		return false
	}
	if !p.Field3DeepEqual(ano.Total) {
		return false
	}
	return true
}

func (p *ViewSkuResp) Field1DeepEqual(src *model.BaseResp) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}
func (p *ViewSkuResp) Field2DeepEqual(src []*model.Sku) bool {

	if len(p.Skus) != len(src) {
		return false
	}
	for i, v := range p.Skus {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *ViewSkuResp) Field3DeepEqual(src int64) bool {

	if p.Total != src {
		return false
	}
	return true
}

var fieldIDToName_ViewSkuResp = map[int16]string{
	1: "base",
	2: "skus",
	3: "total",
}

type UploadSkuAttrReq struct {
	SkuID     *int64 `thrift:"skuID,1,optional" frugal:"1,optional,i64" json:"skuID,omitempty"`
	SaleAttr  string `thrift:"saleAttr,2,required" frugal:"2,required,string" json:"saleAttr"`
	SaleValue string `thrift:"saleValue,3,required" frugal:"3,required,string" json:"saleValue"`
}

func NewUploadSkuAttrReq() *UploadSkuAttrReq {
	return &UploadSkuAttrReq{}
}

func (p *UploadSkuAttrReq) InitDefault() {
}

var UploadSkuAttrReq_SkuID_DEFAULT int64

func (p *UploadSkuAttrReq) GetSkuID() (v int64) {
	if !p.IsSetSkuID() {
		return UploadSkuAttrReq_SkuID_DEFAULT
	}
	return *p.SkuID
}

func (p *UploadSkuAttrReq) GetSaleAttr() (v string) {
	return p.SaleAttr
}

func (p *UploadSkuAttrReq) GetSaleValue() (v string) {
	return p.SaleValue
}
func (p *UploadSkuAttrReq) SetSkuID(val *int64) {
	p.SkuID = val
}
func (p *UploadSkuAttrReq) SetSaleAttr(val string) {
	p.SaleAttr = val
}
func (p *UploadSkuAttrReq) SetSaleValue(val string) {
	p.SaleValue = val
}

func (p *UploadSkuAttrReq) IsSetSkuID() bool {
	return p.SkuID != nil
}

func (p *UploadSkuAttrReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UploadSkuAttrReq(%+v)", *p)
}

func (p *UploadSkuAttrReq) DeepEqual(ano *UploadSkuAttrReq) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.SkuID) {
		return false
	}
	if !p.Field2DeepEqual(ano.SaleAttr) {
		return false
	}
	if !p.Field3DeepEqual(ano.SaleValue) {
		return false
	}
	return true
}

func (p *UploadSkuAttrReq) Field1DeepEqual(src *int64) bool {

	if p.SkuID == src {
		return true
	} else if p.SkuID == nil || src == nil {
		return false
	}
	if *p.SkuID != *src {
		return false
	}
	return true
}
func (p *UploadSkuAttrReq) Field2DeepEqual(src string) bool {

	if strings.Compare(p.SaleAttr, src) != 0 {
		return false
	}
	return true
}
func (p *UploadSkuAttrReq) Field3DeepEqual(src string) bool {

	if strings.Compare(p.SaleValue, src) != 0 {
		return false
	}
	return true
}

var fieldIDToName_UploadSkuAttrReq = map[int16]string{
	1: "skuID",
	2: "saleAttr",
	3: "saleValue",
}

type UploadSkuAttrResp struct {
	Base *model.BaseResp `thrift:"base,1,required" frugal:"1,required,model.BaseResp" json:"base"`
}

func NewUploadSkuAttrResp() *UploadSkuAttrResp {
	return &UploadSkuAttrResp{}
}

func (p *UploadSkuAttrResp) InitDefault() {
}

var UploadSkuAttrResp_Base_DEFAULT *model.BaseResp

func (p *UploadSkuAttrResp) GetBase() (v *model.BaseResp) {
	if !p.IsSetBase() {
		return UploadSkuAttrResp_Base_DEFAULT
	}
	return p.Base
}
func (p *UploadSkuAttrResp) SetBase(val *model.BaseResp) {
	p.Base = val
}

func (p *UploadSkuAttrResp) IsSetBase() bool {
	return p.Base != nil
}

func (p *UploadSkuAttrResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UploadSkuAttrResp(%+v)", *p)
}

func (p *UploadSkuAttrResp) DeepEqual(ano *UploadSkuAttrResp) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Base) {
		return false
	}
	return true
}

func (p *UploadSkuAttrResp) Field1DeepEqual(src *model.BaseResp) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}

var fieldIDToName_UploadSkuAttrResp = map[int16]string{
	1: "base",
}

type CreateCategoryReq struct {
	Name string `thrift:"name,1,required" frugal:"1,required,string" json:"name"`
}

func NewCreateCategoryReq() *CreateCategoryReq {
	return &CreateCategoryReq{}
}

func (p *CreateCategoryReq) InitDefault() {
}

func (p *CreateCategoryReq) GetName() (v string) {
	return p.Name
}
func (p *CreateCategoryReq) SetName(val string) {
	p.Name = val
}

func (p *CreateCategoryReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreateCategoryReq(%+v)", *p)
}

func (p *CreateCategoryReq) DeepEqual(ano *CreateCategoryReq) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Name) {
		return false
	}
	return true
}

func (p *CreateCategoryReq) Field1DeepEqual(src string) bool {

	if strings.Compare(p.Name, src) != 0 {
		return false
	}
	return true
}

var fieldIDToName_CreateCategoryReq = map[int16]string{
	1: "name",
}

type CreateCategoryResp struct {
	Base       *model.BaseResp `thrift:"base,1,required" frugal:"1,required,model.BaseResp" json:"base"`
	CategoryID int64           `thrift:"categoryID,2,required" frugal:"2,required,i64" json:"categoryID"`
}

func NewCreateCategoryResp() *CreateCategoryResp {
	return &CreateCategoryResp{}
}

func (p *CreateCategoryResp) InitDefault() {
}

var CreateCategoryResp_Base_DEFAULT *model.BaseResp

func (p *CreateCategoryResp) GetBase() (v *model.BaseResp) {
	if !p.IsSetBase() {
		return CreateCategoryResp_Base_DEFAULT
	}
	return p.Base
}

func (p *CreateCategoryResp) GetCategoryID() (v int64) {
	return p.CategoryID
}
func (p *CreateCategoryResp) SetBase(val *model.BaseResp) {
	p.Base = val
}
func (p *CreateCategoryResp) SetCategoryID(val int64) {
	p.CategoryID = val
}

func (p *CreateCategoryResp) IsSetBase() bool {
	return p.Base != nil
}

func (p *CreateCategoryResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreateCategoryResp(%+v)", *p)
}

func (p *CreateCategoryResp) DeepEqual(ano *CreateCategoryResp) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Base) {
		return false
	}
	if !p.Field2DeepEqual(ano.CategoryID) {
		return false
	}
	return true
}

func (p *CreateCategoryResp) Field1DeepEqual(src *model.BaseResp) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}
func (p *CreateCategoryResp) Field2DeepEqual(src int64) bool {

	if p.CategoryID != src {
		return false
	}
	return true
}

var fieldIDToName_CreateCategoryResp = map[int16]string{
	1: "base",
	2: "categoryID",
}

type DeleteCategoryReq struct {
	CategoryID int64 `thrift:"categoryID,1,required" frugal:"1,required,i64" json:"categoryID"`
}

func NewDeleteCategoryReq() *DeleteCategoryReq {
	return &DeleteCategoryReq{}
}

func (p *DeleteCategoryReq) InitDefault() {
}

func (p *DeleteCategoryReq) GetCategoryID() (v int64) {
	return p.CategoryID
}
func (p *DeleteCategoryReq) SetCategoryID(val int64) {
	p.CategoryID = val
}

func (p *DeleteCategoryReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DeleteCategoryReq(%+v)", *p)
}

func (p *DeleteCategoryReq) DeepEqual(ano *DeleteCategoryReq) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.CategoryID) {
		return false
	}
	return true
}

func (p *DeleteCategoryReq) Field1DeepEqual(src int64) bool {

	if p.CategoryID != src {
		return false
	}
	return true
}

var fieldIDToName_DeleteCategoryReq = map[int16]string{
	1: "categoryID",
}

type DeleteCategoryResp struct {
	Base *model.BaseResp `thrift:"base,1,required" frugal:"1,required,model.BaseResp" json:"base"`
}

func NewDeleteCategoryResp() *DeleteCategoryResp {
	return &DeleteCategoryResp{}
}

func (p *DeleteCategoryResp) InitDefault() {
}

var DeleteCategoryResp_Base_DEFAULT *model.BaseResp

func (p *DeleteCategoryResp) GetBase() (v *model.BaseResp) {
	if !p.IsSetBase() {
		return DeleteCategoryResp_Base_DEFAULT
	}
	return p.Base
}
func (p *DeleteCategoryResp) SetBase(val *model.BaseResp) {
	p.Base = val
}

func (p *DeleteCategoryResp) IsSetBase() bool {
	return p.Base != nil
}

func (p *DeleteCategoryResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DeleteCategoryResp(%+v)", *p)
}

func (p *DeleteCategoryResp) DeepEqual(ano *DeleteCategoryResp) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Base) {
		return false
	}
	return true
}

func (p *DeleteCategoryResp) Field1DeepEqual(src *model.BaseResp) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}

var fieldIDToName_DeleteCategoryResp = map[int16]string{
	1: "base",
}

type ViewCategoryReq struct {
	PageNum  int64 `thrift:"pageNum,1,required" frugal:"1,required,i64" json:"pageNum"`
	PageSize int64 `thrift:"pageSize,2,required" frugal:"2,required,i64" json:"pageSize"`
}

func NewViewCategoryReq() *ViewCategoryReq {
	return &ViewCategoryReq{}
}

func (p *ViewCategoryReq) InitDefault() {
}

func (p *ViewCategoryReq) GetPageNum() (v int64) {
	return p.PageNum
}

func (p *ViewCategoryReq) GetPageSize() (v int64) {
	return p.PageSize
}
func (p *ViewCategoryReq) SetPageNum(val int64) {
	p.PageNum = val
}
func (p *ViewCategoryReq) SetPageSize(val int64) {
	p.PageSize = val
}

func (p *ViewCategoryReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ViewCategoryReq(%+v)", *p)
}

func (p *ViewCategoryReq) DeepEqual(ano *ViewCategoryReq) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.PageNum) {
		return false
	}
	if !p.Field2DeepEqual(ano.PageSize) {
		return false
	}
	return true
}

func (p *ViewCategoryReq) Field1DeepEqual(src int64) bool {

	if p.PageNum != src {
		return false
	}
	return true
}
func (p *ViewCategoryReq) Field2DeepEqual(src int64) bool {

	if p.PageSize != src {
		return false
	}
	return true
}

var fieldIDToName_ViewCategoryReq = map[int16]string{
	1: "pageNum",
	2: "pageSize",
}

type ViewCategoryResp struct {
	Base         *model.BaseResp       `thrift:"base,1,required" frugal:"1,required,model.BaseResp" json:"base"`
	CategoryInfo []*model.CategoryInfo `thrift:"categoryInfo,2" frugal:"2,default,list<model.CategoryInfo>" json:"categoryInfo"`
}

func NewViewCategoryResp() *ViewCategoryResp {
	return &ViewCategoryResp{}
}

func (p *ViewCategoryResp) InitDefault() {
}

var ViewCategoryResp_Base_DEFAULT *model.BaseResp

func (p *ViewCategoryResp) GetBase() (v *model.BaseResp) {
	if !p.IsSetBase() {
		return ViewCategoryResp_Base_DEFAULT
	}
	return p.Base
}

func (p *ViewCategoryResp) GetCategoryInfo() (v []*model.CategoryInfo) {
	return p.CategoryInfo
}
func (p *ViewCategoryResp) SetBase(val *model.BaseResp) {
	p.Base = val
}
func (p *ViewCategoryResp) SetCategoryInfo(val []*model.CategoryInfo) {
	p.CategoryInfo = val
}

func (p *ViewCategoryResp) IsSetBase() bool {
	return p.Base != nil
}

func (p *ViewCategoryResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ViewCategoryResp(%+v)", *p)
}

func (p *ViewCategoryResp) DeepEqual(ano *ViewCategoryResp) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Base) {
		return false
	}
	if !p.Field2DeepEqual(ano.CategoryInfo) {
		return false
	}
	return true
}

func (p *ViewCategoryResp) Field1DeepEqual(src *model.BaseResp) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}
func (p *ViewCategoryResp) Field2DeepEqual(src []*model.CategoryInfo) bool {

	if len(p.CategoryInfo) != len(src) {
		return false
	}
	for i, v := range p.CategoryInfo {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}

var fieldIDToName_ViewCategoryResp = map[int16]string{
	1: "base",
	2: "categoryInfo",
}

type UpdateCategoryReq struct {
	CategoryID int64  `thrift:"categoryID,1,required" frugal:"1,required,i64" json:"categoryID"`
	Name       string `thrift:"name,2,required" frugal:"2,required,string" json:"name"`
}

func NewUpdateCategoryReq() *UpdateCategoryReq {
	return &UpdateCategoryReq{}
}

func (p *UpdateCategoryReq) InitDefault() {
}

func (p *UpdateCategoryReq) GetCategoryID() (v int64) {
	return p.CategoryID
}

func (p *UpdateCategoryReq) GetName() (v string) {
	return p.Name
}
func (p *UpdateCategoryReq) SetCategoryID(val int64) {
	p.CategoryID = val
}
func (p *UpdateCategoryReq) SetName(val string) {
	p.Name = val
}

func (p *UpdateCategoryReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UpdateCategoryReq(%+v)", *p)
}

func (p *UpdateCategoryReq) DeepEqual(ano *UpdateCategoryReq) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.CategoryID) {
		return false
	}
	if !p.Field2DeepEqual(ano.Name) {
		return false
	}
	return true
}

func (p *UpdateCategoryReq) Field1DeepEqual(src int64) bool {

	if p.CategoryID != src {
		return false
	}
	return true
}
func (p *UpdateCategoryReq) Field2DeepEqual(src string) bool {

	if strings.Compare(p.Name, src) != 0 {
		return false
	}
	return true
}

var fieldIDToName_UpdateCategoryReq = map[int16]string{
	1: "categoryID",
	2: "name",
}

type UpdateCategoryResp struct {
	Base *model.BaseResp `thrift:"base,1,required" frugal:"1,required,model.BaseResp" json:"base"`
}

func NewUpdateCategoryResp() *UpdateCategoryResp {
	return &UpdateCategoryResp{}
}

func (p *UpdateCategoryResp) InitDefault() {
}

var UpdateCategoryResp_Base_DEFAULT *model.BaseResp

func (p *UpdateCategoryResp) GetBase() (v *model.BaseResp) {
	if !p.IsSetBase() {
		return UpdateCategoryResp_Base_DEFAULT
	}
	return p.Base
}
func (p *UpdateCategoryResp) SetBase(val *model.BaseResp) {
	p.Base = val
}

func (p *UpdateCategoryResp) IsSetBase() bool {
	return p.Base != nil
}

func (p *UpdateCategoryResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UpdateCategoryResp(%+v)", *p)
}

func (p *UpdateCategoryResp) DeepEqual(ano *UpdateCategoryResp) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Base) {
		return false
	}
	return true
}

func (p *UpdateCategoryResp) Field1DeepEqual(src *model.BaseResp) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}

var fieldIDToName_UpdateCategoryResp = map[int16]string{
	1: "base",
}

type ListSkuInfoReq struct {
	SkuInfos []*model.SkuVersion `thrift:"skuInfos,1,required" frugal:"1,required,list<model.SkuVersion>" json:"skuInfos"`
	PageNum  int64               `thrift:"pageNum,2,required" frugal:"2,required,i64" json:"pageNum"`
	PageSize int64               `thrift:"pageSize,3,required" frugal:"3,required,i64" json:"pageSize"`
}

func NewListSkuInfoReq() *ListSkuInfoReq {
	return &ListSkuInfoReq{}
}

func (p *ListSkuInfoReq) InitDefault() {
}

func (p *ListSkuInfoReq) GetSkuInfos() (v []*model.SkuVersion) {
	return p.SkuInfos
}

func (p *ListSkuInfoReq) GetPageNum() (v int64) {
	return p.PageNum
}

func (p *ListSkuInfoReq) GetPageSize() (v int64) {
	return p.PageSize
}
func (p *ListSkuInfoReq) SetSkuInfos(val []*model.SkuVersion) {
	p.SkuInfos = val
}
func (p *ListSkuInfoReq) SetPageNum(val int64) {
	p.PageNum = val
}
func (p *ListSkuInfoReq) SetPageSize(val int64) {
	p.PageSize = val
}

func (p *ListSkuInfoReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ListSkuInfoReq(%+v)", *p)
}

func (p *ListSkuInfoReq) DeepEqual(ano *ListSkuInfoReq) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.SkuInfos) {
		return false
	}
	if !p.Field2DeepEqual(ano.PageNum) {
		return false
	}
	if !p.Field3DeepEqual(ano.PageSize) {
		return false
	}
	return true
}

func (p *ListSkuInfoReq) Field1DeepEqual(src []*model.SkuVersion) bool {

	if len(p.SkuInfos) != len(src) {
		return false
	}
	for i, v := range p.SkuInfos {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *ListSkuInfoReq) Field2DeepEqual(src int64) bool {

	if p.PageNum != src {
		return false
	}
	return true
}
func (p *ListSkuInfoReq) Field3DeepEqual(src int64) bool {

	if p.PageSize != src {
		return false
	}
	return true
}

var fieldIDToName_ListSkuInfoReq = map[int16]string{
	1: "skuInfos",
	2: "pageNum",
	3: "pageSize",
}

type ListSkuInfoResp struct {
	Base     *model.BaseResp  `thrift:"base,1,required" frugal:"1,required,model.BaseResp" json:"base"`
	SkuInfos []*model.SkuInfo `thrift:"skuInfos,2,required" frugal:"2,required,list<model.SkuInfo>" json:"skuInfos"`
	Total    int64            `thrift:"total,3,required" frugal:"3,required,i64" json:"total"`
}

func NewListSkuInfoResp() *ListSkuInfoResp {
	return &ListSkuInfoResp{}
}

func (p *ListSkuInfoResp) InitDefault() {
}

var ListSkuInfoResp_Base_DEFAULT *model.BaseResp

func (p *ListSkuInfoResp) GetBase() (v *model.BaseResp) {
	if !p.IsSetBase() {
		return ListSkuInfoResp_Base_DEFAULT
	}
	return p.Base
}

func (p *ListSkuInfoResp) GetSkuInfos() (v []*model.SkuInfo) {
	return p.SkuInfos
}

func (p *ListSkuInfoResp) GetTotal() (v int64) {
	return p.Total
}
func (p *ListSkuInfoResp) SetBase(val *model.BaseResp) {
	p.Base = val
}
func (p *ListSkuInfoResp) SetSkuInfos(val []*model.SkuInfo) {
	p.SkuInfos = val
}
func (p *ListSkuInfoResp) SetTotal(val int64) {
	p.Total = val
}

func (p *ListSkuInfoResp) IsSetBase() bool {
	return p.Base != nil
}

func (p *ListSkuInfoResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ListSkuInfoResp(%+v)", *p)
}

func (p *ListSkuInfoResp) DeepEqual(ano *ListSkuInfoResp) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Base) {
		return false
	}
	if !p.Field2DeepEqual(ano.SkuInfos) {
		return false
	}
	if !p.Field3DeepEqual(ano.Total) {
		return false
	}
	return true
}

func (p *ListSkuInfoResp) Field1DeepEqual(src *model.BaseResp) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}
func (p *ListSkuInfoResp) Field2DeepEqual(src []*model.SkuInfo) bool {

	if len(p.SkuInfos) != len(src) {
		return false
	}
	for i, v := range p.SkuInfos {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *ListSkuInfoResp) Field3DeepEqual(src int64) bool {

	if p.Total != src {
		return false
	}
	return true
}

var fieldIDToName_ListSkuInfoResp = map[int16]string{
	1: "base",
	2: "skuInfos",
	3: "total",
}

type ListSpuInfoReq struct {
	SpuIDs []int64 `thrift:"spuIDs,1,required" frugal:"1,required,list<i64>" json:"spuIDs"`
}

func NewListSpuInfoReq() *ListSpuInfoReq {
	return &ListSpuInfoReq{}
}

func (p *ListSpuInfoReq) InitDefault() {
}

func (p *ListSpuInfoReq) GetSpuIDs() (v []int64) {
	return p.SpuIDs
}
func (p *ListSpuInfoReq) SetSpuIDs(val []int64) {
	p.SpuIDs = val
}

func (p *ListSpuInfoReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ListSpuInfoReq(%+v)", *p)
}

func (p *ListSpuInfoReq) DeepEqual(ano *ListSpuInfoReq) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.SpuIDs) {
		return false
	}
	return true
}

func (p *ListSpuInfoReq) Field1DeepEqual(src []int64) bool {

	if len(p.SpuIDs) != len(src) {
		return false
	}
	for i, v := range p.SpuIDs {
		_src := src[i]
		if v != _src {
			return false
		}
	}
	return true
}

var fieldIDToName_ListSpuInfoReq = map[int16]string{
	1: "spuIDs",
}

type ListSpuInfoResp struct {
	Base *model.BaseResp `thrift:"base,1,required" frugal:"1,required,model.BaseResp" json:"base"`
	Spus []*model.Spu    `thrift:"spus,2,required" frugal:"2,required,list<model.Spu>" json:"spus"`
}

func NewListSpuInfoResp() *ListSpuInfoResp {
	return &ListSpuInfoResp{}
}

func (p *ListSpuInfoResp) InitDefault() {
}

var ListSpuInfoResp_Base_DEFAULT *model.BaseResp

func (p *ListSpuInfoResp) GetBase() (v *model.BaseResp) {
	if !p.IsSetBase() {
		return ListSpuInfoResp_Base_DEFAULT
	}
	return p.Base
}

func (p *ListSpuInfoResp) GetSpus() (v []*model.Spu) {
	return p.Spus
}
func (p *ListSpuInfoResp) SetBase(val *model.BaseResp) {
	p.Base = val
}
func (p *ListSpuInfoResp) SetSpus(val []*model.Spu) {
	p.Spus = val
}

func (p *ListSpuInfoResp) IsSetBase() bool {
	return p.Base != nil
}

func (p *ListSpuInfoResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ListSpuInfoResp(%+v)", *p)
}

func (p *ListSpuInfoResp) DeepEqual(ano *ListSpuInfoResp) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Base) {
		return false
	}
	if !p.Field2DeepEqual(ano.Spus) {
		return false
	}
	return true
}

func (p *ListSpuInfoResp) Field1DeepEqual(src *model.BaseResp) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}
func (p *ListSpuInfoResp) Field2DeepEqual(src []*model.Spu) bool {

	if len(p.Spus) != len(src) {
		return false
	}
	for i, v := range p.Spus {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}

var fieldIDToName_ListSpuInfoResp = map[int16]string{
	1: "base",
	2: "spus",
}

type DescSkuLockStockReq struct {
	Infos []*model.SkuBuyInfo `thrift:"infos,1,required" frugal:"1,required,list<model.SkuBuyInfo>" json:"infos"`
}

func NewDescSkuLockStockReq() *DescSkuLockStockReq {
	return &DescSkuLockStockReq{}
}

func (p *DescSkuLockStockReq) InitDefault() {
}

func (p *DescSkuLockStockReq) GetInfos() (v []*model.SkuBuyInfo) {
	return p.Infos
}
func (p *DescSkuLockStockReq) SetInfos(val []*model.SkuBuyInfo) {
	p.Infos = val
}

func (p *DescSkuLockStockReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DescSkuLockStockReq(%+v)", *p)
}

func (p *DescSkuLockStockReq) DeepEqual(ano *DescSkuLockStockReq) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Infos) {
		return false
	}
	return true
}

func (p *DescSkuLockStockReq) Field1DeepEqual(src []*model.SkuBuyInfo) bool {

	if len(p.Infos) != len(src) {
		return false
	}
	for i, v := range p.Infos {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}

var fieldIDToName_DescSkuLockStockReq = map[int16]string{
	1: "infos",
}

type DescSkuLockStockResp struct {
	Base *model.BaseResp `thrift:"base,1,required" frugal:"1,required,model.BaseResp" json:"base"`
}

func NewDescSkuLockStockResp() *DescSkuLockStockResp {
	return &DescSkuLockStockResp{}
}

func (p *DescSkuLockStockResp) InitDefault() {
}

var DescSkuLockStockResp_Base_DEFAULT *model.BaseResp

func (p *DescSkuLockStockResp) GetBase() (v *model.BaseResp) {
	if !p.IsSetBase() {
		return DescSkuLockStockResp_Base_DEFAULT
	}
	return p.Base
}
func (p *DescSkuLockStockResp) SetBase(val *model.BaseResp) {
	p.Base = val
}

func (p *DescSkuLockStockResp) IsSetBase() bool {
	return p.Base != nil
}

func (p *DescSkuLockStockResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DescSkuLockStockResp(%+v)", *p)
}

func (p *DescSkuLockStockResp) DeepEqual(ano *DescSkuLockStockResp) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Base) {
		return false
	}
	return true
}

func (p *DescSkuLockStockResp) Field1DeepEqual(src *model.BaseResp) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}

var fieldIDToName_DescSkuLockStockResp = map[int16]string{
	1: "base",
}

type IncrSkuLockStockReq struct {
	Infos []*model.SkuBuyInfo `thrift:"infos,1,required" frugal:"1,required,list<model.SkuBuyInfo>" json:"infos"`
}

func NewIncrSkuLockStockReq() *IncrSkuLockStockReq {
	return &IncrSkuLockStockReq{}
}

func (p *IncrSkuLockStockReq) InitDefault() {
}

func (p *IncrSkuLockStockReq) GetInfos() (v []*model.SkuBuyInfo) {
	return p.Infos
}
func (p *IncrSkuLockStockReq) SetInfos(val []*model.SkuBuyInfo) {
	p.Infos = val
}

func (p *IncrSkuLockStockReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("IncrSkuLockStockReq(%+v)", *p)
}

func (p *IncrSkuLockStockReq) DeepEqual(ano *IncrSkuLockStockReq) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Infos) {
		return false
	}
	return true
}

func (p *IncrSkuLockStockReq) Field1DeepEqual(src []*model.SkuBuyInfo) bool {

	if len(p.Infos) != len(src) {
		return false
	}
	for i, v := range p.Infos {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}

var fieldIDToName_IncrSkuLockStockReq = map[int16]string{
	1: "infos",
}

type IncrSkuLockStockResp struct {
	Base *model.BaseResp `thrift:"base,1,required" frugal:"1,required,model.BaseResp" json:"base"`
}

func NewIncrSkuLockStockResp() *IncrSkuLockStockResp {
	return &IncrSkuLockStockResp{}
}

func (p *IncrSkuLockStockResp) InitDefault() {
}

var IncrSkuLockStockResp_Base_DEFAULT *model.BaseResp

func (p *IncrSkuLockStockResp) GetBase() (v *model.BaseResp) {
	if !p.IsSetBase() {
		return IncrSkuLockStockResp_Base_DEFAULT
	}
	return p.Base
}
func (p *IncrSkuLockStockResp) SetBase(val *model.BaseResp) {
	p.Base = val
}

func (p *IncrSkuLockStockResp) IsSetBase() bool {
	return p.Base != nil
}

func (p *IncrSkuLockStockResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("IncrSkuLockStockResp(%+v)", *p)
}

func (p *IncrSkuLockStockResp) DeepEqual(ano *IncrSkuLockStockResp) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Base) {
		return false
	}
	return true
}

func (p *IncrSkuLockStockResp) Field1DeepEqual(src *model.BaseResp) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}

var fieldIDToName_IncrSkuLockStockResp = map[int16]string{
	1: "base",
}

type DescSkuStockReq struct {
	Infos []*model.SkuBuyInfo `thrift:"infos,1,required" frugal:"1,required,list<model.SkuBuyInfo>" json:"infos"`
}

func NewDescSkuStockReq() *DescSkuStockReq {
	return &DescSkuStockReq{}
}

func (p *DescSkuStockReq) InitDefault() {
}

func (p *DescSkuStockReq) GetInfos() (v []*model.SkuBuyInfo) {
	return p.Infos
}
func (p *DescSkuStockReq) SetInfos(val []*model.SkuBuyInfo) {
	p.Infos = val
}

func (p *DescSkuStockReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DescSkuStockReq(%+v)", *p)
}

func (p *DescSkuStockReq) DeepEqual(ano *DescSkuStockReq) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Infos) {
		return false
	}
	return true
}

func (p *DescSkuStockReq) Field1DeepEqual(src []*model.SkuBuyInfo) bool {

	if len(p.Infos) != len(src) {
		return false
	}
	for i, v := range p.Infos {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}

var fieldIDToName_DescSkuStockReq = map[int16]string{
	1: "infos",
}

type DescSkuStockResp struct {
	Base *model.BaseResp `thrift:"base,1,required" frugal:"1,required,model.BaseResp" json:"base"`
}

func NewDescSkuStockResp() *DescSkuStockResp {
	return &DescSkuStockResp{}
}

func (p *DescSkuStockResp) InitDefault() {
}

var DescSkuStockResp_Base_DEFAULT *model.BaseResp

func (p *DescSkuStockResp) GetBase() (v *model.BaseResp) {
	if !p.IsSetBase() {
		return DescSkuStockResp_Base_DEFAULT
	}
	return p.Base
}
func (p *DescSkuStockResp) SetBase(val *model.BaseResp) {
	p.Base = val
}

func (p *DescSkuStockResp) IsSetBase() bool {
	return p.Base != nil
}

func (p *DescSkuStockResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DescSkuStockResp(%+v)", *p)
}

func (p *DescSkuStockResp) DeepEqual(ano *DescSkuStockResp) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Base) {
		return false
	}
	return true
}

func (p *DescSkuStockResp) Field1DeepEqual(src *model.BaseResp) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}

var fieldIDToName_DescSkuStockResp = map[int16]string{
	1: "base",
}

type ViewHistoryPriceReq struct {
	HistoryID int64 `thrift:"historyID,1,required" frugal:"1,required,i64" json:"historyID"`
	SkuID     int64 `thrift:"skuID,2,required" frugal:"2,required,i64" json:"skuID"`
	PageSize  int64 `thrift:"pageSize,3,required" frugal:"3,required,i64" json:"pageSize"`
	PageNum   int64 `thrift:"pageNum,4,required" frugal:"4,required,i64" json:"pageNum"`
}

func NewViewHistoryPriceReq() *ViewHistoryPriceReq {
	return &ViewHistoryPriceReq{}
}

func (p *ViewHistoryPriceReq) InitDefault() {
}

func (p *ViewHistoryPriceReq) GetHistoryID() (v int64) {
	return p.HistoryID
}

func (p *ViewHistoryPriceReq) GetSkuID() (v int64) {
	return p.SkuID
}

func (p *ViewHistoryPriceReq) GetPageSize() (v int64) {
	return p.PageSize
}

func (p *ViewHistoryPriceReq) GetPageNum() (v int64) {
	return p.PageNum
}
func (p *ViewHistoryPriceReq) SetHistoryID(val int64) {
	p.HistoryID = val
}
func (p *ViewHistoryPriceReq) SetSkuID(val int64) {
	p.SkuID = val
}
func (p *ViewHistoryPriceReq) SetPageSize(val int64) {
	p.PageSize = val
}
func (p *ViewHistoryPriceReq) SetPageNum(val int64) {
	p.PageNum = val
}

func (p *ViewHistoryPriceReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ViewHistoryPriceReq(%+v)", *p)
}

func (p *ViewHistoryPriceReq) DeepEqual(ano *ViewHistoryPriceReq) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.HistoryID) {
		return false
	}
	if !p.Field2DeepEqual(ano.SkuID) {
		return false
	}
	if !p.Field3DeepEqual(ano.PageSize) {
		return false
	}
	if !p.Field4DeepEqual(ano.PageNum) {
		return false
	}
	return true
}

func (p *ViewHistoryPriceReq) Field1DeepEqual(src int64) bool {

	if p.HistoryID != src {
		return false
	}
	return true
}
func (p *ViewHistoryPriceReq) Field2DeepEqual(src int64) bool {

	if p.SkuID != src {
		return false
	}
	return true
}
func (p *ViewHistoryPriceReq) Field3DeepEqual(src int64) bool {

	if p.PageSize != src {
		return false
	}
	return true
}
func (p *ViewHistoryPriceReq) Field4DeepEqual(src int64) bool {

	if p.PageNum != src {
		return false
	}
	return true
}

var fieldIDToName_ViewHistoryPriceReq = map[int16]string{
	1: "historyID",
	2: "skuID",
	3: "pageSize",
	4: "pageNum",
}

type ViewHistoryPriceResp struct {
	Base    *model.BaseResp       `thrift:"base,1,required" frugal:"1,required,model.BaseResp" json:"base"`
	Records []*model.PriceHistory `thrift:"records,2,required" frugal:"2,required,list<model.PriceHistory>" json:"records"`
}

func NewViewHistoryPriceResp() *ViewHistoryPriceResp {
	return &ViewHistoryPriceResp{}
}

func (p *ViewHistoryPriceResp) InitDefault() {
}

var ViewHistoryPriceResp_Base_DEFAULT *model.BaseResp

func (p *ViewHistoryPriceResp) GetBase() (v *model.BaseResp) {
	if !p.IsSetBase() {
		return ViewHistoryPriceResp_Base_DEFAULT
	}
	return p.Base
}

func (p *ViewHistoryPriceResp) GetRecords() (v []*model.PriceHistory) {
	return p.Records
}
func (p *ViewHistoryPriceResp) SetBase(val *model.BaseResp) {
	p.Base = val
}
func (p *ViewHistoryPriceResp) SetRecords(val []*model.PriceHistory) {
	p.Records = val
}

func (p *ViewHistoryPriceResp) IsSetBase() bool {
	return p.Base != nil
}

func (p *ViewHistoryPriceResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ViewHistoryPriceResp(%+v)", *p)
}

func (p *ViewHistoryPriceResp) DeepEqual(ano *ViewHistoryPriceResp) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Base) {
		return false
	}
	if !p.Field2DeepEqual(ano.Records) {
		return false
	}
	return true
}

func (p *ViewHistoryPriceResp) Field1DeepEqual(src *model.BaseResp) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}
func (p *ViewHistoryPriceResp) Field2DeepEqual(src []*model.PriceHistory) bool {

	if len(p.Records) != len(src) {
		return false
	}
	for i, v := range p.Records {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}

var fieldIDToName_ViewHistoryPriceResp = map[int16]string{
	1: "base",
	2: "records",
}

type UploadImageReq struct {
}

func NewUploadImageReq() *UploadImageReq {
	return &UploadImageReq{}
}

func (p *UploadImageReq) InitDefault() {
}

func (p *UploadImageReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UploadImageReq(%+v)", *p)
}

func (p *UploadImageReq) DeepEqual(ano *UploadImageReq) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	return true
}

var fieldIDToName_UploadImageReq = map[int16]string{}

type UploadImageResp struct {
}

func NewUploadImageResp() *UploadImageResp {
	return &UploadImageResp{}
}

func (p *UploadImageResp) InitDefault() {
}

func (p *UploadImageResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UploadImageResp(%+v)", *p)
}

func (p *UploadImageResp) DeepEqual(ano *UploadImageResp) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	return true
}

var fieldIDToName_UploadImageResp = map[int16]string{}

type CommodityService interface {
	CreateCoupon(ctx context.Context, req *CreateCouponReq) (r *CreateCouponResp, err error)

	DeleteCoupon(ctx context.Context, req *DeleteCouponReq) (r *DeleteCouponResp, err error)

	CreateUserCoupon(ctx context.Context, req *CreateUserCouponReq) (r *CreateUserCouponResp, err error)

	ViewCoupon(ctx context.Context, req *ViewCouponReq) (r *ViewCouponResp, err error)

	ViewUserAllCoupon(ctx context.Context, req *ViewUserAllCouponReq) (r *ViewUserAllCouponResp, err error)

	UseUserCoupon(ctx context.Context, req *UseUserCouponReq) (r *UseUserCouponResp, err error)

	CreateSpu(stream CommodityService_CreateSpuServer) (err error)

	UpdateSpu(stream CommodityService_UpdateSpuServer) (err error)

	ViewSpu(ctx context.Context, req *ViewSpuReq) (r *ViewSpuResp, err error)

	DeleteSpu(ctx context.Context, req *DeleteSpuReq) (r *DeleteSpuResp, err error)

	ViewSpuImage(ctx context.Context, req *ViewSpuImageReq) (r *ViewSpuImageResp, err error)

	CreateSpuImage(stream CommodityService_CreateSpuImageServer) (err error)

	UpdateSpuImage(stream CommodityService_UpdateSpuImageServer) (err error)

	DeleteSpuImage(ctx context.Context, req *DeleteSpuImageReq) (r *DeleteSpuImageResp, err error)

	CreateSku(stream CommodityService_CreateSkuServer) (err error)

	UpdateSku(stream CommodityService_UpdateSkuServer) (err error)

	DeleteSku(ctx context.Context, req *DeleteSkuReq) (r *DeleteSkuResp, err error)

	ViewSkuImage(ctx context.Context, req *ViewSkuImageReq) (r *ViewSkuImageResp, err error)

	ViewSku(ctx context.Context, req *ViewSkuReq) (r *ViewSkuResp, err error)

	UploadSkuAttr(ctx context.Context, req *UploadSkuAttrReq) (r *UploadSkuAttrResp, err error)

	ListSkuInfo(ctx context.Context, req *ListSkuInfoReq) (r *ListSkuInfoResp, err error)

	ViewHistory(ctx context.Context, req *ViewHistoryPriceReq) (r *ViewHistoryPriceResp, err error)

	CreateSkuImage(stream CommodityService_CreateSkuImageServer) (err error)

	UpdateSkuImage(stream CommodityService_UpdateSkuImageServer) (err error)

	DeleteSkuImage(ctx context.Context, req *DeleteSkuImageReq) (r *DeleteSkuImageResp, err error)

	DescSkuLockStock(ctx context.Context, req *DescSkuLockStockReq) (r *DescSkuLockStockResp, err error)

	IncrSkuLockStock(ctx context.Context, req *IncrSkuLockStockReq) (r *IncrSkuLockStockResp, err error)

	DescSkuStock(ctx context.Context, req *DescSkuStockReq) (r *DescSkuStockResp, err error)

	ListSpuInfo(ctx context.Context, req *ListSpuInfoReq) (r *ListSpuInfoResp, err error)

	CreateCategory(ctx context.Context, req *CreateCategoryReq) (r *CreateCategoryResp, err error)

	DeleteCategory(ctx context.Context, req *DeleteCategoryReq) (r *DeleteCategoryResp, err error)

	ViewCategory(ctx context.Context, req *ViewCategoryReq) (r *ViewCategoryResp, err error)

	UpdateCategory(ctx context.Context, req *UpdateCategoryReq) (r *UpdateCategoryResp, err error)
}

type CommodityServiceCreateCouponArgs struct {
	Req *CreateCouponReq `thrift:"req,1" frugal:"1,default,CreateCouponReq" json:"req"`
}

func NewCommodityServiceCreateCouponArgs() *CommodityServiceCreateCouponArgs {
	return &CommodityServiceCreateCouponArgs{}
}

func (p *CommodityServiceCreateCouponArgs) InitDefault() {
}

var CommodityServiceCreateCouponArgs_Req_DEFAULT *CreateCouponReq

func (p *CommodityServiceCreateCouponArgs) GetReq() (v *CreateCouponReq) {
	if !p.IsSetReq() {
		return CommodityServiceCreateCouponArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *CommodityServiceCreateCouponArgs) SetReq(val *CreateCouponReq) {
	p.Req = val
}

func (p *CommodityServiceCreateCouponArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *CommodityServiceCreateCouponArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CommodityServiceCreateCouponArgs(%+v)", *p)
}

func (p *CommodityServiceCreateCouponArgs) DeepEqual(ano *CommodityServiceCreateCouponArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *CommodityServiceCreateCouponArgs) Field1DeepEqual(src *CreateCouponReq) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

var fieldIDToName_CommodityServiceCreateCouponArgs = map[int16]string{
	1: "req",
}

type CommodityServiceCreateCouponResult struct {
	Success *CreateCouponResp `thrift:"success,0,optional" frugal:"0,optional,CreateCouponResp" json:"success,omitempty"`
}

func NewCommodityServiceCreateCouponResult() *CommodityServiceCreateCouponResult {
	return &CommodityServiceCreateCouponResult{}
}

func (p *CommodityServiceCreateCouponResult) InitDefault() {
}

var CommodityServiceCreateCouponResult_Success_DEFAULT *CreateCouponResp

func (p *CommodityServiceCreateCouponResult) GetSuccess() (v *CreateCouponResp) {
	if !p.IsSetSuccess() {
		return CommodityServiceCreateCouponResult_Success_DEFAULT
	}
	return p.Success
}
func (p *CommodityServiceCreateCouponResult) SetSuccess(x interface{}) {
	p.Success = x.(*CreateCouponResp)
}

func (p *CommodityServiceCreateCouponResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CommodityServiceCreateCouponResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CommodityServiceCreateCouponResult(%+v)", *p)
}

func (p *CommodityServiceCreateCouponResult) DeepEqual(ano *CommodityServiceCreateCouponResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *CommodityServiceCreateCouponResult) Field0DeepEqual(src *CreateCouponResp) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

var fieldIDToName_CommodityServiceCreateCouponResult = map[int16]string{
	0: "success",
}

type CommodityServiceDeleteCouponArgs struct {
	Req *DeleteCouponReq `thrift:"req,1" frugal:"1,default,DeleteCouponReq" json:"req"`
}

func NewCommodityServiceDeleteCouponArgs() *CommodityServiceDeleteCouponArgs {
	return &CommodityServiceDeleteCouponArgs{}
}

func (p *CommodityServiceDeleteCouponArgs) InitDefault() {
}

var CommodityServiceDeleteCouponArgs_Req_DEFAULT *DeleteCouponReq

func (p *CommodityServiceDeleteCouponArgs) GetReq() (v *DeleteCouponReq) {
	if !p.IsSetReq() {
		return CommodityServiceDeleteCouponArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *CommodityServiceDeleteCouponArgs) SetReq(val *DeleteCouponReq) {
	p.Req = val
}

func (p *CommodityServiceDeleteCouponArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *CommodityServiceDeleteCouponArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CommodityServiceDeleteCouponArgs(%+v)", *p)
}

func (p *CommodityServiceDeleteCouponArgs) DeepEqual(ano *CommodityServiceDeleteCouponArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *CommodityServiceDeleteCouponArgs) Field1DeepEqual(src *DeleteCouponReq) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

var fieldIDToName_CommodityServiceDeleteCouponArgs = map[int16]string{
	1: "req",
}

type CommodityServiceDeleteCouponResult struct {
	Success *DeleteCouponResp `thrift:"success,0,optional" frugal:"0,optional,DeleteCouponResp" json:"success,omitempty"`
}

func NewCommodityServiceDeleteCouponResult() *CommodityServiceDeleteCouponResult {
	return &CommodityServiceDeleteCouponResult{}
}

func (p *CommodityServiceDeleteCouponResult) InitDefault() {
}

var CommodityServiceDeleteCouponResult_Success_DEFAULT *DeleteCouponResp

func (p *CommodityServiceDeleteCouponResult) GetSuccess() (v *DeleteCouponResp) {
	if !p.IsSetSuccess() {
		return CommodityServiceDeleteCouponResult_Success_DEFAULT
	}
	return p.Success
}
func (p *CommodityServiceDeleteCouponResult) SetSuccess(x interface{}) {
	p.Success = x.(*DeleteCouponResp)
}

func (p *CommodityServiceDeleteCouponResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CommodityServiceDeleteCouponResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CommodityServiceDeleteCouponResult(%+v)", *p)
}

func (p *CommodityServiceDeleteCouponResult) DeepEqual(ano *CommodityServiceDeleteCouponResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *CommodityServiceDeleteCouponResult) Field0DeepEqual(src *DeleteCouponResp) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

var fieldIDToName_CommodityServiceDeleteCouponResult = map[int16]string{
	0: "success",
}

type CommodityServiceCreateUserCouponArgs struct {
	Req *CreateUserCouponReq `thrift:"req,1" frugal:"1,default,CreateUserCouponReq" json:"req"`
}

func NewCommodityServiceCreateUserCouponArgs() *CommodityServiceCreateUserCouponArgs {
	return &CommodityServiceCreateUserCouponArgs{}
}

func (p *CommodityServiceCreateUserCouponArgs) InitDefault() {
}

var CommodityServiceCreateUserCouponArgs_Req_DEFAULT *CreateUserCouponReq

func (p *CommodityServiceCreateUserCouponArgs) GetReq() (v *CreateUserCouponReq) {
	if !p.IsSetReq() {
		return CommodityServiceCreateUserCouponArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *CommodityServiceCreateUserCouponArgs) SetReq(val *CreateUserCouponReq) {
	p.Req = val
}

func (p *CommodityServiceCreateUserCouponArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *CommodityServiceCreateUserCouponArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CommodityServiceCreateUserCouponArgs(%+v)", *p)
}

func (p *CommodityServiceCreateUserCouponArgs) DeepEqual(ano *CommodityServiceCreateUserCouponArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *CommodityServiceCreateUserCouponArgs) Field1DeepEqual(src *CreateUserCouponReq) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

var fieldIDToName_CommodityServiceCreateUserCouponArgs = map[int16]string{
	1: "req",
}

type CommodityServiceCreateUserCouponResult struct {
	Success *CreateUserCouponResp `thrift:"success,0,optional" frugal:"0,optional,CreateUserCouponResp" json:"success,omitempty"`
}

func NewCommodityServiceCreateUserCouponResult() *CommodityServiceCreateUserCouponResult {
	return &CommodityServiceCreateUserCouponResult{}
}

func (p *CommodityServiceCreateUserCouponResult) InitDefault() {
}

var CommodityServiceCreateUserCouponResult_Success_DEFAULT *CreateUserCouponResp

func (p *CommodityServiceCreateUserCouponResult) GetSuccess() (v *CreateUserCouponResp) {
	if !p.IsSetSuccess() {
		return CommodityServiceCreateUserCouponResult_Success_DEFAULT
	}
	return p.Success
}
func (p *CommodityServiceCreateUserCouponResult) SetSuccess(x interface{}) {
	p.Success = x.(*CreateUserCouponResp)
}

func (p *CommodityServiceCreateUserCouponResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CommodityServiceCreateUserCouponResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CommodityServiceCreateUserCouponResult(%+v)", *p)
}

func (p *CommodityServiceCreateUserCouponResult) DeepEqual(ano *CommodityServiceCreateUserCouponResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *CommodityServiceCreateUserCouponResult) Field0DeepEqual(src *CreateUserCouponResp) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

var fieldIDToName_CommodityServiceCreateUserCouponResult = map[int16]string{
	0: "success",
}

type CommodityServiceViewCouponArgs struct {
	Req *ViewCouponReq `thrift:"req,1" frugal:"1,default,ViewCouponReq" json:"req"`
}

func NewCommodityServiceViewCouponArgs() *CommodityServiceViewCouponArgs {
	return &CommodityServiceViewCouponArgs{}
}

func (p *CommodityServiceViewCouponArgs) InitDefault() {
}

var CommodityServiceViewCouponArgs_Req_DEFAULT *ViewCouponReq

func (p *CommodityServiceViewCouponArgs) GetReq() (v *ViewCouponReq) {
	if !p.IsSetReq() {
		return CommodityServiceViewCouponArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *CommodityServiceViewCouponArgs) SetReq(val *ViewCouponReq) {
	p.Req = val
}

func (p *CommodityServiceViewCouponArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *CommodityServiceViewCouponArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CommodityServiceViewCouponArgs(%+v)", *p)
}

func (p *CommodityServiceViewCouponArgs) DeepEqual(ano *CommodityServiceViewCouponArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *CommodityServiceViewCouponArgs) Field1DeepEqual(src *ViewCouponReq) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

var fieldIDToName_CommodityServiceViewCouponArgs = map[int16]string{
	1: "req",
}

type CommodityServiceViewCouponResult struct {
	Success *ViewCouponResp `thrift:"success,0,optional" frugal:"0,optional,ViewCouponResp" json:"success,omitempty"`
}

func NewCommodityServiceViewCouponResult() *CommodityServiceViewCouponResult {
	return &CommodityServiceViewCouponResult{}
}

func (p *CommodityServiceViewCouponResult) InitDefault() {
}

var CommodityServiceViewCouponResult_Success_DEFAULT *ViewCouponResp

func (p *CommodityServiceViewCouponResult) GetSuccess() (v *ViewCouponResp) {
	if !p.IsSetSuccess() {
		return CommodityServiceViewCouponResult_Success_DEFAULT
	}
	return p.Success
}
func (p *CommodityServiceViewCouponResult) SetSuccess(x interface{}) {
	p.Success = x.(*ViewCouponResp)
}

func (p *CommodityServiceViewCouponResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CommodityServiceViewCouponResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CommodityServiceViewCouponResult(%+v)", *p)
}

func (p *CommodityServiceViewCouponResult) DeepEqual(ano *CommodityServiceViewCouponResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *CommodityServiceViewCouponResult) Field0DeepEqual(src *ViewCouponResp) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

var fieldIDToName_CommodityServiceViewCouponResult = map[int16]string{
	0: "success",
}

type CommodityServiceViewUserAllCouponArgs struct {
	Req *ViewUserAllCouponReq `thrift:"req,1" frugal:"1,default,ViewUserAllCouponReq" json:"req"`
}

func NewCommodityServiceViewUserAllCouponArgs() *CommodityServiceViewUserAllCouponArgs {
	return &CommodityServiceViewUserAllCouponArgs{}
}

func (p *CommodityServiceViewUserAllCouponArgs) InitDefault() {
}

var CommodityServiceViewUserAllCouponArgs_Req_DEFAULT *ViewUserAllCouponReq

func (p *CommodityServiceViewUserAllCouponArgs) GetReq() (v *ViewUserAllCouponReq) {
	if !p.IsSetReq() {
		return CommodityServiceViewUserAllCouponArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *CommodityServiceViewUserAllCouponArgs) SetReq(val *ViewUserAllCouponReq) {
	p.Req = val
}

func (p *CommodityServiceViewUserAllCouponArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *CommodityServiceViewUserAllCouponArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CommodityServiceViewUserAllCouponArgs(%+v)", *p)
}

func (p *CommodityServiceViewUserAllCouponArgs) DeepEqual(ano *CommodityServiceViewUserAllCouponArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *CommodityServiceViewUserAllCouponArgs) Field1DeepEqual(src *ViewUserAllCouponReq) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

var fieldIDToName_CommodityServiceViewUserAllCouponArgs = map[int16]string{
	1: "req",
}

type CommodityServiceViewUserAllCouponResult struct {
	Success *ViewUserAllCouponResp `thrift:"success,0,optional" frugal:"0,optional,ViewUserAllCouponResp" json:"success,omitempty"`
}

func NewCommodityServiceViewUserAllCouponResult() *CommodityServiceViewUserAllCouponResult {
	return &CommodityServiceViewUserAllCouponResult{}
}

func (p *CommodityServiceViewUserAllCouponResult) InitDefault() {
}

var CommodityServiceViewUserAllCouponResult_Success_DEFAULT *ViewUserAllCouponResp

func (p *CommodityServiceViewUserAllCouponResult) GetSuccess() (v *ViewUserAllCouponResp) {
	if !p.IsSetSuccess() {
		return CommodityServiceViewUserAllCouponResult_Success_DEFAULT
	}
	return p.Success
}
func (p *CommodityServiceViewUserAllCouponResult) SetSuccess(x interface{}) {
	p.Success = x.(*ViewUserAllCouponResp)
}

func (p *CommodityServiceViewUserAllCouponResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CommodityServiceViewUserAllCouponResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CommodityServiceViewUserAllCouponResult(%+v)", *p)
}

func (p *CommodityServiceViewUserAllCouponResult) DeepEqual(ano *CommodityServiceViewUserAllCouponResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *CommodityServiceViewUserAllCouponResult) Field0DeepEqual(src *ViewUserAllCouponResp) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

var fieldIDToName_CommodityServiceViewUserAllCouponResult = map[int16]string{
	0: "success",
}

type CommodityServiceUseUserCouponArgs struct {
	Req *UseUserCouponReq `thrift:"req,1" frugal:"1,default,UseUserCouponReq" json:"req"`
}

func NewCommodityServiceUseUserCouponArgs() *CommodityServiceUseUserCouponArgs {
	return &CommodityServiceUseUserCouponArgs{}
}

func (p *CommodityServiceUseUserCouponArgs) InitDefault() {
}

var CommodityServiceUseUserCouponArgs_Req_DEFAULT *UseUserCouponReq

func (p *CommodityServiceUseUserCouponArgs) GetReq() (v *UseUserCouponReq) {
	if !p.IsSetReq() {
		return CommodityServiceUseUserCouponArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *CommodityServiceUseUserCouponArgs) SetReq(val *UseUserCouponReq) {
	p.Req = val
}

func (p *CommodityServiceUseUserCouponArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *CommodityServiceUseUserCouponArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CommodityServiceUseUserCouponArgs(%+v)", *p)
}

func (p *CommodityServiceUseUserCouponArgs) DeepEqual(ano *CommodityServiceUseUserCouponArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *CommodityServiceUseUserCouponArgs) Field1DeepEqual(src *UseUserCouponReq) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

var fieldIDToName_CommodityServiceUseUserCouponArgs = map[int16]string{
	1: "req",
}

type CommodityServiceUseUserCouponResult struct {
	Success *UseUserCouponResp `thrift:"success,0,optional" frugal:"0,optional,UseUserCouponResp" json:"success,omitempty"`
}

func NewCommodityServiceUseUserCouponResult() *CommodityServiceUseUserCouponResult {
	return &CommodityServiceUseUserCouponResult{}
}

func (p *CommodityServiceUseUserCouponResult) InitDefault() {
}

var CommodityServiceUseUserCouponResult_Success_DEFAULT *UseUserCouponResp

func (p *CommodityServiceUseUserCouponResult) GetSuccess() (v *UseUserCouponResp) {
	if !p.IsSetSuccess() {
		return CommodityServiceUseUserCouponResult_Success_DEFAULT
	}
	return p.Success
}
func (p *CommodityServiceUseUserCouponResult) SetSuccess(x interface{}) {
	p.Success = x.(*UseUserCouponResp)
}

func (p *CommodityServiceUseUserCouponResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CommodityServiceUseUserCouponResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CommodityServiceUseUserCouponResult(%+v)", *p)
}

func (p *CommodityServiceUseUserCouponResult) DeepEqual(ano *CommodityServiceUseUserCouponResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *CommodityServiceUseUserCouponResult) Field0DeepEqual(src *UseUserCouponResp) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

var fieldIDToName_CommodityServiceUseUserCouponResult = map[int16]string{
	0: "success",
}

type CommodityServiceCreateSpuArgs struct {
	Req *CreateSpuReq `thrift:"req,1" frugal:"1,default,CreateSpuReq" json:"req"`
}

func NewCommodityServiceCreateSpuArgs() *CommodityServiceCreateSpuArgs {
	return &CommodityServiceCreateSpuArgs{}
}

func (p *CommodityServiceCreateSpuArgs) InitDefault() {
}

var CommodityServiceCreateSpuArgs_Req_DEFAULT *CreateSpuReq

func (p *CommodityServiceCreateSpuArgs) GetReq() (v *CreateSpuReq) {
	if !p.IsSetReq() {
		return CommodityServiceCreateSpuArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *CommodityServiceCreateSpuArgs) SetReq(val *CreateSpuReq) {
	p.Req = val
}

func (p *CommodityServiceCreateSpuArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *CommodityServiceCreateSpuArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CommodityServiceCreateSpuArgs(%+v)", *p)
}

func (p *CommodityServiceCreateSpuArgs) DeepEqual(ano *CommodityServiceCreateSpuArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *CommodityServiceCreateSpuArgs) Field1DeepEqual(src *CreateSpuReq) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

var fieldIDToName_CommodityServiceCreateSpuArgs = map[int16]string{
	1: "req",
}

type CommodityServiceCreateSpuResult struct {
	Success *CreateSpuResp `thrift:"success,0,optional" frugal:"0,optional,CreateSpuResp" json:"success,omitempty"`
}

func NewCommodityServiceCreateSpuResult() *CommodityServiceCreateSpuResult {
	return &CommodityServiceCreateSpuResult{}
}

func (p *CommodityServiceCreateSpuResult) InitDefault() {
}

var CommodityServiceCreateSpuResult_Success_DEFAULT *CreateSpuResp

func (p *CommodityServiceCreateSpuResult) GetSuccess() (v *CreateSpuResp) {
	if !p.IsSetSuccess() {
		return CommodityServiceCreateSpuResult_Success_DEFAULT
	}
	return p.Success
}
func (p *CommodityServiceCreateSpuResult) SetSuccess(x interface{}) {
	p.Success = x.(*CreateSpuResp)
}

func (p *CommodityServiceCreateSpuResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CommodityServiceCreateSpuResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CommodityServiceCreateSpuResult(%+v)", *p)
}

func (p *CommodityServiceCreateSpuResult) DeepEqual(ano *CommodityServiceCreateSpuResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *CommodityServiceCreateSpuResult) Field0DeepEqual(src *CreateSpuResp) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

var fieldIDToName_CommodityServiceCreateSpuResult = map[int16]string{
	0: "success",
}

type CommodityService_CreateSpuServer interface {
	streaming.Stream

	Recv() (*CreateSpuReq, error)

	SendAndClose(*CreateSpuResp) error
}

type CommodityServiceUpdateSpuArgs struct {
	Req *UpdateSpuReq `thrift:"req,1" frugal:"1,default,UpdateSpuReq" json:"req"`
}

func NewCommodityServiceUpdateSpuArgs() *CommodityServiceUpdateSpuArgs {
	return &CommodityServiceUpdateSpuArgs{}
}

func (p *CommodityServiceUpdateSpuArgs) InitDefault() {
}

var CommodityServiceUpdateSpuArgs_Req_DEFAULT *UpdateSpuReq

func (p *CommodityServiceUpdateSpuArgs) GetReq() (v *UpdateSpuReq) {
	if !p.IsSetReq() {
		return CommodityServiceUpdateSpuArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *CommodityServiceUpdateSpuArgs) SetReq(val *UpdateSpuReq) {
	p.Req = val
}

func (p *CommodityServiceUpdateSpuArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *CommodityServiceUpdateSpuArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CommodityServiceUpdateSpuArgs(%+v)", *p)
}

func (p *CommodityServiceUpdateSpuArgs) DeepEqual(ano *CommodityServiceUpdateSpuArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *CommodityServiceUpdateSpuArgs) Field1DeepEqual(src *UpdateSpuReq) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

var fieldIDToName_CommodityServiceUpdateSpuArgs = map[int16]string{
	1: "req",
}

type CommodityServiceUpdateSpuResult struct {
	Success *UpdateSpuResp `thrift:"success,0,optional" frugal:"0,optional,UpdateSpuResp" json:"success,omitempty"`
}

func NewCommodityServiceUpdateSpuResult() *CommodityServiceUpdateSpuResult {
	return &CommodityServiceUpdateSpuResult{}
}

func (p *CommodityServiceUpdateSpuResult) InitDefault() {
}

var CommodityServiceUpdateSpuResult_Success_DEFAULT *UpdateSpuResp

func (p *CommodityServiceUpdateSpuResult) GetSuccess() (v *UpdateSpuResp) {
	if !p.IsSetSuccess() {
		return CommodityServiceUpdateSpuResult_Success_DEFAULT
	}
	return p.Success
}
func (p *CommodityServiceUpdateSpuResult) SetSuccess(x interface{}) {
	p.Success = x.(*UpdateSpuResp)
}

func (p *CommodityServiceUpdateSpuResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CommodityServiceUpdateSpuResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CommodityServiceUpdateSpuResult(%+v)", *p)
}

func (p *CommodityServiceUpdateSpuResult) DeepEqual(ano *CommodityServiceUpdateSpuResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *CommodityServiceUpdateSpuResult) Field0DeepEqual(src *UpdateSpuResp) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

var fieldIDToName_CommodityServiceUpdateSpuResult = map[int16]string{
	0: "success",
}

type CommodityService_UpdateSpuServer interface {
	streaming.Stream

	Recv() (*UpdateSpuReq, error)

	SendAndClose(*UpdateSpuResp) error
}

type CommodityServiceViewSpuArgs struct {
	Req *ViewSpuReq `thrift:"req,1" frugal:"1,default,ViewSpuReq" json:"req"`
}

func NewCommodityServiceViewSpuArgs() *CommodityServiceViewSpuArgs {
	return &CommodityServiceViewSpuArgs{}
}

func (p *CommodityServiceViewSpuArgs) InitDefault() {
}

var CommodityServiceViewSpuArgs_Req_DEFAULT *ViewSpuReq

func (p *CommodityServiceViewSpuArgs) GetReq() (v *ViewSpuReq) {
	if !p.IsSetReq() {
		return CommodityServiceViewSpuArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *CommodityServiceViewSpuArgs) SetReq(val *ViewSpuReq) {
	p.Req = val
}

func (p *CommodityServiceViewSpuArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *CommodityServiceViewSpuArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CommodityServiceViewSpuArgs(%+v)", *p)
}

func (p *CommodityServiceViewSpuArgs) DeepEqual(ano *CommodityServiceViewSpuArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *CommodityServiceViewSpuArgs) Field1DeepEqual(src *ViewSpuReq) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

var fieldIDToName_CommodityServiceViewSpuArgs = map[int16]string{
	1: "req",
}

type CommodityServiceViewSpuResult struct {
	Success *ViewSpuResp `thrift:"success,0,optional" frugal:"0,optional,ViewSpuResp" json:"success,omitempty"`
}

func NewCommodityServiceViewSpuResult() *CommodityServiceViewSpuResult {
	return &CommodityServiceViewSpuResult{}
}

func (p *CommodityServiceViewSpuResult) InitDefault() {
}

var CommodityServiceViewSpuResult_Success_DEFAULT *ViewSpuResp

func (p *CommodityServiceViewSpuResult) GetSuccess() (v *ViewSpuResp) {
	if !p.IsSetSuccess() {
		return CommodityServiceViewSpuResult_Success_DEFAULT
	}
	return p.Success
}
func (p *CommodityServiceViewSpuResult) SetSuccess(x interface{}) {
	p.Success = x.(*ViewSpuResp)
}

func (p *CommodityServiceViewSpuResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CommodityServiceViewSpuResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CommodityServiceViewSpuResult(%+v)", *p)
}

func (p *CommodityServiceViewSpuResult) DeepEqual(ano *CommodityServiceViewSpuResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *CommodityServiceViewSpuResult) Field0DeepEqual(src *ViewSpuResp) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

var fieldIDToName_CommodityServiceViewSpuResult = map[int16]string{
	0: "success",
}

type CommodityServiceDeleteSpuArgs struct {
	Req *DeleteSpuReq `thrift:"req,1" frugal:"1,default,DeleteSpuReq" json:"req"`
}

func NewCommodityServiceDeleteSpuArgs() *CommodityServiceDeleteSpuArgs {
	return &CommodityServiceDeleteSpuArgs{}
}

func (p *CommodityServiceDeleteSpuArgs) InitDefault() {
}

var CommodityServiceDeleteSpuArgs_Req_DEFAULT *DeleteSpuReq

func (p *CommodityServiceDeleteSpuArgs) GetReq() (v *DeleteSpuReq) {
	if !p.IsSetReq() {
		return CommodityServiceDeleteSpuArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *CommodityServiceDeleteSpuArgs) SetReq(val *DeleteSpuReq) {
	p.Req = val
}

func (p *CommodityServiceDeleteSpuArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *CommodityServiceDeleteSpuArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CommodityServiceDeleteSpuArgs(%+v)", *p)
}

func (p *CommodityServiceDeleteSpuArgs) DeepEqual(ano *CommodityServiceDeleteSpuArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *CommodityServiceDeleteSpuArgs) Field1DeepEqual(src *DeleteSpuReq) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

var fieldIDToName_CommodityServiceDeleteSpuArgs = map[int16]string{
	1: "req",
}

type CommodityServiceDeleteSpuResult struct {
	Success *DeleteSpuResp `thrift:"success,0,optional" frugal:"0,optional,DeleteSpuResp" json:"success,omitempty"`
}

func NewCommodityServiceDeleteSpuResult() *CommodityServiceDeleteSpuResult {
	return &CommodityServiceDeleteSpuResult{}
}

func (p *CommodityServiceDeleteSpuResult) InitDefault() {
}

var CommodityServiceDeleteSpuResult_Success_DEFAULT *DeleteSpuResp

func (p *CommodityServiceDeleteSpuResult) GetSuccess() (v *DeleteSpuResp) {
	if !p.IsSetSuccess() {
		return CommodityServiceDeleteSpuResult_Success_DEFAULT
	}
	return p.Success
}
func (p *CommodityServiceDeleteSpuResult) SetSuccess(x interface{}) {
	p.Success = x.(*DeleteSpuResp)
}

func (p *CommodityServiceDeleteSpuResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CommodityServiceDeleteSpuResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CommodityServiceDeleteSpuResult(%+v)", *p)
}

func (p *CommodityServiceDeleteSpuResult) DeepEqual(ano *CommodityServiceDeleteSpuResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *CommodityServiceDeleteSpuResult) Field0DeepEqual(src *DeleteSpuResp) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

var fieldIDToName_CommodityServiceDeleteSpuResult = map[int16]string{
	0: "success",
}

type CommodityServiceViewSpuImageArgs struct {
	Req *ViewSpuImageReq `thrift:"req,1" frugal:"1,default,ViewSpuImageReq" json:"req"`
}

func NewCommodityServiceViewSpuImageArgs() *CommodityServiceViewSpuImageArgs {
	return &CommodityServiceViewSpuImageArgs{}
}

func (p *CommodityServiceViewSpuImageArgs) InitDefault() {
}

var CommodityServiceViewSpuImageArgs_Req_DEFAULT *ViewSpuImageReq

func (p *CommodityServiceViewSpuImageArgs) GetReq() (v *ViewSpuImageReq) {
	if !p.IsSetReq() {
		return CommodityServiceViewSpuImageArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *CommodityServiceViewSpuImageArgs) SetReq(val *ViewSpuImageReq) {
	p.Req = val
}

func (p *CommodityServiceViewSpuImageArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *CommodityServiceViewSpuImageArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CommodityServiceViewSpuImageArgs(%+v)", *p)
}

func (p *CommodityServiceViewSpuImageArgs) DeepEqual(ano *CommodityServiceViewSpuImageArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *CommodityServiceViewSpuImageArgs) Field1DeepEqual(src *ViewSpuImageReq) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

var fieldIDToName_CommodityServiceViewSpuImageArgs = map[int16]string{
	1: "req",
}

type CommodityServiceViewSpuImageResult struct {
	Success *ViewSpuImageResp `thrift:"success,0,optional" frugal:"0,optional,ViewSpuImageResp" json:"success,omitempty"`
}

func NewCommodityServiceViewSpuImageResult() *CommodityServiceViewSpuImageResult {
	return &CommodityServiceViewSpuImageResult{}
}

func (p *CommodityServiceViewSpuImageResult) InitDefault() {
}

var CommodityServiceViewSpuImageResult_Success_DEFAULT *ViewSpuImageResp

func (p *CommodityServiceViewSpuImageResult) GetSuccess() (v *ViewSpuImageResp) {
	if !p.IsSetSuccess() {
		return CommodityServiceViewSpuImageResult_Success_DEFAULT
	}
	return p.Success
}
func (p *CommodityServiceViewSpuImageResult) SetSuccess(x interface{}) {
	p.Success = x.(*ViewSpuImageResp)
}

func (p *CommodityServiceViewSpuImageResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CommodityServiceViewSpuImageResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CommodityServiceViewSpuImageResult(%+v)", *p)
}

func (p *CommodityServiceViewSpuImageResult) DeepEqual(ano *CommodityServiceViewSpuImageResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *CommodityServiceViewSpuImageResult) Field0DeepEqual(src *ViewSpuImageResp) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

var fieldIDToName_CommodityServiceViewSpuImageResult = map[int16]string{
	0: "success",
}

type CommodityServiceCreateSpuImageArgs struct {
	Req *CreateSpuImageReq `thrift:"req,1" frugal:"1,default,CreateSpuImageReq" json:"req"`
}

func NewCommodityServiceCreateSpuImageArgs() *CommodityServiceCreateSpuImageArgs {
	return &CommodityServiceCreateSpuImageArgs{}
}

func (p *CommodityServiceCreateSpuImageArgs) InitDefault() {
}

var CommodityServiceCreateSpuImageArgs_Req_DEFAULT *CreateSpuImageReq

func (p *CommodityServiceCreateSpuImageArgs) GetReq() (v *CreateSpuImageReq) {
	if !p.IsSetReq() {
		return CommodityServiceCreateSpuImageArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *CommodityServiceCreateSpuImageArgs) SetReq(val *CreateSpuImageReq) {
	p.Req = val
}

func (p *CommodityServiceCreateSpuImageArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *CommodityServiceCreateSpuImageArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CommodityServiceCreateSpuImageArgs(%+v)", *p)
}

func (p *CommodityServiceCreateSpuImageArgs) DeepEqual(ano *CommodityServiceCreateSpuImageArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *CommodityServiceCreateSpuImageArgs) Field1DeepEqual(src *CreateSpuImageReq) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

var fieldIDToName_CommodityServiceCreateSpuImageArgs = map[int16]string{
	1: "req",
}

type CommodityServiceCreateSpuImageResult struct {
	Success *CreateSpuImageResp `thrift:"success,0,optional" frugal:"0,optional,CreateSpuImageResp" json:"success,omitempty"`
}

func NewCommodityServiceCreateSpuImageResult() *CommodityServiceCreateSpuImageResult {
	return &CommodityServiceCreateSpuImageResult{}
}

func (p *CommodityServiceCreateSpuImageResult) InitDefault() {
}

var CommodityServiceCreateSpuImageResult_Success_DEFAULT *CreateSpuImageResp

func (p *CommodityServiceCreateSpuImageResult) GetSuccess() (v *CreateSpuImageResp) {
	if !p.IsSetSuccess() {
		return CommodityServiceCreateSpuImageResult_Success_DEFAULT
	}
	return p.Success
}
func (p *CommodityServiceCreateSpuImageResult) SetSuccess(x interface{}) {
	p.Success = x.(*CreateSpuImageResp)
}

func (p *CommodityServiceCreateSpuImageResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CommodityServiceCreateSpuImageResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CommodityServiceCreateSpuImageResult(%+v)", *p)
}

func (p *CommodityServiceCreateSpuImageResult) DeepEqual(ano *CommodityServiceCreateSpuImageResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *CommodityServiceCreateSpuImageResult) Field0DeepEqual(src *CreateSpuImageResp) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

var fieldIDToName_CommodityServiceCreateSpuImageResult = map[int16]string{
	0: "success",
}

type CommodityService_CreateSpuImageServer interface {
	streaming.Stream

	Recv() (*CreateSpuImageReq, error)

	SendAndClose(*CreateSpuImageResp) error
}

type CommodityServiceUpdateSpuImageArgs struct {
	Req *UpdateSpuImageReq `thrift:"req,1" frugal:"1,default,UpdateSpuImageReq" json:"req"`
}

func NewCommodityServiceUpdateSpuImageArgs() *CommodityServiceUpdateSpuImageArgs {
	return &CommodityServiceUpdateSpuImageArgs{}
}

func (p *CommodityServiceUpdateSpuImageArgs) InitDefault() {
}

var CommodityServiceUpdateSpuImageArgs_Req_DEFAULT *UpdateSpuImageReq

func (p *CommodityServiceUpdateSpuImageArgs) GetReq() (v *UpdateSpuImageReq) {
	if !p.IsSetReq() {
		return CommodityServiceUpdateSpuImageArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *CommodityServiceUpdateSpuImageArgs) SetReq(val *UpdateSpuImageReq) {
	p.Req = val
}

func (p *CommodityServiceUpdateSpuImageArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *CommodityServiceUpdateSpuImageArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CommodityServiceUpdateSpuImageArgs(%+v)", *p)
}

func (p *CommodityServiceUpdateSpuImageArgs) DeepEqual(ano *CommodityServiceUpdateSpuImageArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *CommodityServiceUpdateSpuImageArgs) Field1DeepEqual(src *UpdateSpuImageReq) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

var fieldIDToName_CommodityServiceUpdateSpuImageArgs = map[int16]string{
	1: "req",
}

type CommodityServiceUpdateSpuImageResult struct {
	Success *UpdateSpuImageResp `thrift:"success,0,optional" frugal:"0,optional,UpdateSpuImageResp" json:"success,omitempty"`
}

func NewCommodityServiceUpdateSpuImageResult() *CommodityServiceUpdateSpuImageResult {
	return &CommodityServiceUpdateSpuImageResult{}
}

func (p *CommodityServiceUpdateSpuImageResult) InitDefault() {
}

var CommodityServiceUpdateSpuImageResult_Success_DEFAULT *UpdateSpuImageResp

func (p *CommodityServiceUpdateSpuImageResult) GetSuccess() (v *UpdateSpuImageResp) {
	if !p.IsSetSuccess() {
		return CommodityServiceUpdateSpuImageResult_Success_DEFAULT
	}
	return p.Success
}
func (p *CommodityServiceUpdateSpuImageResult) SetSuccess(x interface{}) {
	p.Success = x.(*UpdateSpuImageResp)
}

func (p *CommodityServiceUpdateSpuImageResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CommodityServiceUpdateSpuImageResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CommodityServiceUpdateSpuImageResult(%+v)", *p)
}

func (p *CommodityServiceUpdateSpuImageResult) DeepEqual(ano *CommodityServiceUpdateSpuImageResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *CommodityServiceUpdateSpuImageResult) Field0DeepEqual(src *UpdateSpuImageResp) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

var fieldIDToName_CommodityServiceUpdateSpuImageResult = map[int16]string{
	0: "success",
}

type CommodityService_UpdateSpuImageServer interface {
	streaming.Stream

	Recv() (*UpdateSpuImageReq, error)

	SendAndClose(*UpdateSpuImageResp) error
}

type CommodityServiceDeleteSpuImageArgs struct {
	Req *DeleteSpuImageReq `thrift:"req,1" frugal:"1,default,DeleteSpuImageReq" json:"req"`
}

func NewCommodityServiceDeleteSpuImageArgs() *CommodityServiceDeleteSpuImageArgs {
	return &CommodityServiceDeleteSpuImageArgs{}
}

func (p *CommodityServiceDeleteSpuImageArgs) InitDefault() {
}

var CommodityServiceDeleteSpuImageArgs_Req_DEFAULT *DeleteSpuImageReq

func (p *CommodityServiceDeleteSpuImageArgs) GetReq() (v *DeleteSpuImageReq) {
	if !p.IsSetReq() {
		return CommodityServiceDeleteSpuImageArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *CommodityServiceDeleteSpuImageArgs) SetReq(val *DeleteSpuImageReq) {
	p.Req = val
}

func (p *CommodityServiceDeleteSpuImageArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *CommodityServiceDeleteSpuImageArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CommodityServiceDeleteSpuImageArgs(%+v)", *p)
}

func (p *CommodityServiceDeleteSpuImageArgs) DeepEqual(ano *CommodityServiceDeleteSpuImageArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *CommodityServiceDeleteSpuImageArgs) Field1DeepEqual(src *DeleteSpuImageReq) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

var fieldIDToName_CommodityServiceDeleteSpuImageArgs = map[int16]string{
	1: "req",
}

type CommodityServiceDeleteSpuImageResult struct {
	Success *DeleteSpuImageResp `thrift:"success,0,optional" frugal:"0,optional,DeleteSpuImageResp" json:"success,omitempty"`
}

func NewCommodityServiceDeleteSpuImageResult() *CommodityServiceDeleteSpuImageResult {
	return &CommodityServiceDeleteSpuImageResult{}
}

func (p *CommodityServiceDeleteSpuImageResult) InitDefault() {
}

var CommodityServiceDeleteSpuImageResult_Success_DEFAULT *DeleteSpuImageResp

func (p *CommodityServiceDeleteSpuImageResult) GetSuccess() (v *DeleteSpuImageResp) {
	if !p.IsSetSuccess() {
		return CommodityServiceDeleteSpuImageResult_Success_DEFAULT
	}
	return p.Success
}
func (p *CommodityServiceDeleteSpuImageResult) SetSuccess(x interface{}) {
	p.Success = x.(*DeleteSpuImageResp)
}

func (p *CommodityServiceDeleteSpuImageResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CommodityServiceDeleteSpuImageResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CommodityServiceDeleteSpuImageResult(%+v)", *p)
}

func (p *CommodityServiceDeleteSpuImageResult) DeepEqual(ano *CommodityServiceDeleteSpuImageResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *CommodityServiceDeleteSpuImageResult) Field0DeepEqual(src *DeleteSpuImageResp) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

var fieldIDToName_CommodityServiceDeleteSpuImageResult = map[int16]string{
	0: "success",
}

type CommodityServiceCreateSkuArgs struct {
	Req *CreateSkuReq `thrift:"req,1" frugal:"1,default,CreateSkuReq" json:"req"`
}

func NewCommodityServiceCreateSkuArgs() *CommodityServiceCreateSkuArgs {
	return &CommodityServiceCreateSkuArgs{}
}

func (p *CommodityServiceCreateSkuArgs) InitDefault() {
}

var CommodityServiceCreateSkuArgs_Req_DEFAULT *CreateSkuReq

func (p *CommodityServiceCreateSkuArgs) GetReq() (v *CreateSkuReq) {
	if !p.IsSetReq() {
		return CommodityServiceCreateSkuArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *CommodityServiceCreateSkuArgs) SetReq(val *CreateSkuReq) {
	p.Req = val
}

func (p *CommodityServiceCreateSkuArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *CommodityServiceCreateSkuArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CommodityServiceCreateSkuArgs(%+v)", *p)
}

func (p *CommodityServiceCreateSkuArgs) DeepEqual(ano *CommodityServiceCreateSkuArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *CommodityServiceCreateSkuArgs) Field1DeepEqual(src *CreateSkuReq) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

var fieldIDToName_CommodityServiceCreateSkuArgs = map[int16]string{
	1: "req",
}

type CommodityServiceCreateSkuResult struct {
	Success *CreateSkuResp `thrift:"success,0,optional" frugal:"0,optional,CreateSkuResp" json:"success,omitempty"`
}

func NewCommodityServiceCreateSkuResult() *CommodityServiceCreateSkuResult {
	return &CommodityServiceCreateSkuResult{}
}

func (p *CommodityServiceCreateSkuResult) InitDefault() {
}

var CommodityServiceCreateSkuResult_Success_DEFAULT *CreateSkuResp

func (p *CommodityServiceCreateSkuResult) GetSuccess() (v *CreateSkuResp) {
	if !p.IsSetSuccess() {
		return CommodityServiceCreateSkuResult_Success_DEFAULT
	}
	return p.Success
}
func (p *CommodityServiceCreateSkuResult) SetSuccess(x interface{}) {
	p.Success = x.(*CreateSkuResp)
}

func (p *CommodityServiceCreateSkuResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CommodityServiceCreateSkuResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CommodityServiceCreateSkuResult(%+v)", *p)
}

func (p *CommodityServiceCreateSkuResult) DeepEqual(ano *CommodityServiceCreateSkuResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *CommodityServiceCreateSkuResult) Field0DeepEqual(src *CreateSkuResp) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

var fieldIDToName_CommodityServiceCreateSkuResult = map[int16]string{
	0: "success",
}

type CommodityService_CreateSkuServer interface {
	streaming.Stream

	Recv() (*CreateSkuReq, error)

	SendAndClose(*CreateSkuResp) error
}

type CommodityServiceUpdateSkuArgs struct {
	Req *UpdateSkuReq `thrift:"req,1" frugal:"1,default,UpdateSkuReq" json:"req"`
}

func NewCommodityServiceUpdateSkuArgs() *CommodityServiceUpdateSkuArgs {
	return &CommodityServiceUpdateSkuArgs{}
}

func (p *CommodityServiceUpdateSkuArgs) InitDefault() {
}

var CommodityServiceUpdateSkuArgs_Req_DEFAULT *UpdateSkuReq

func (p *CommodityServiceUpdateSkuArgs) GetReq() (v *UpdateSkuReq) {
	if !p.IsSetReq() {
		return CommodityServiceUpdateSkuArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *CommodityServiceUpdateSkuArgs) SetReq(val *UpdateSkuReq) {
	p.Req = val
}

func (p *CommodityServiceUpdateSkuArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *CommodityServiceUpdateSkuArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CommodityServiceUpdateSkuArgs(%+v)", *p)
}

func (p *CommodityServiceUpdateSkuArgs) DeepEqual(ano *CommodityServiceUpdateSkuArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *CommodityServiceUpdateSkuArgs) Field1DeepEqual(src *UpdateSkuReq) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

var fieldIDToName_CommodityServiceUpdateSkuArgs = map[int16]string{
	1: "req",
}

type CommodityServiceUpdateSkuResult struct {
	Success *UpdateSkuResp `thrift:"success,0,optional" frugal:"0,optional,UpdateSkuResp" json:"success,omitempty"`
}

func NewCommodityServiceUpdateSkuResult() *CommodityServiceUpdateSkuResult {
	return &CommodityServiceUpdateSkuResult{}
}

func (p *CommodityServiceUpdateSkuResult) InitDefault() {
}

var CommodityServiceUpdateSkuResult_Success_DEFAULT *UpdateSkuResp

func (p *CommodityServiceUpdateSkuResult) GetSuccess() (v *UpdateSkuResp) {
	if !p.IsSetSuccess() {
		return CommodityServiceUpdateSkuResult_Success_DEFAULT
	}
	return p.Success
}
func (p *CommodityServiceUpdateSkuResult) SetSuccess(x interface{}) {
	p.Success = x.(*UpdateSkuResp)
}

func (p *CommodityServiceUpdateSkuResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CommodityServiceUpdateSkuResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CommodityServiceUpdateSkuResult(%+v)", *p)
}

func (p *CommodityServiceUpdateSkuResult) DeepEqual(ano *CommodityServiceUpdateSkuResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *CommodityServiceUpdateSkuResult) Field0DeepEqual(src *UpdateSkuResp) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

var fieldIDToName_CommodityServiceUpdateSkuResult = map[int16]string{
	0: "success",
}

type CommodityService_UpdateSkuServer interface {
	streaming.Stream

	Recv() (*UpdateSkuReq, error)

	SendAndClose(*UpdateSkuResp) error
}

type CommodityServiceDeleteSkuArgs struct {
	Req *DeleteSkuReq `thrift:"req,1" frugal:"1,default,DeleteSkuReq" json:"req"`
}

func NewCommodityServiceDeleteSkuArgs() *CommodityServiceDeleteSkuArgs {
	return &CommodityServiceDeleteSkuArgs{}
}

func (p *CommodityServiceDeleteSkuArgs) InitDefault() {
}

var CommodityServiceDeleteSkuArgs_Req_DEFAULT *DeleteSkuReq

func (p *CommodityServiceDeleteSkuArgs) GetReq() (v *DeleteSkuReq) {
	if !p.IsSetReq() {
		return CommodityServiceDeleteSkuArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *CommodityServiceDeleteSkuArgs) SetReq(val *DeleteSkuReq) {
	p.Req = val
}

func (p *CommodityServiceDeleteSkuArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *CommodityServiceDeleteSkuArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CommodityServiceDeleteSkuArgs(%+v)", *p)
}

func (p *CommodityServiceDeleteSkuArgs) DeepEqual(ano *CommodityServiceDeleteSkuArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *CommodityServiceDeleteSkuArgs) Field1DeepEqual(src *DeleteSkuReq) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

var fieldIDToName_CommodityServiceDeleteSkuArgs = map[int16]string{
	1: "req",
}

type CommodityServiceDeleteSkuResult struct {
	Success *DeleteSkuResp `thrift:"success,0,optional" frugal:"0,optional,DeleteSkuResp" json:"success,omitempty"`
}

func NewCommodityServiceDeleteSkuResult() *CommodityServiceDeleteSkuResult {
	return &CommodityServiceDeleteSkuResult{}
}

func (p *CommodityServiceDeleteSkuResult) InitDefault() {
}

var CommodityServiceDeleteSkuResult_Success_DEFAULT *DeleteSkuResp

func (p *CommodityServiceDeleteSkuResult) GetSuccess() (v *DeleteSkuResp) {
	if !p.IsSetSuccess() {
		return CommodityServiceDeleteSkuResult_Success_DEFAULT
	}
	return p.Success
}
func (p *CommodityServiceDeleteSkuResult) SetSuccess(x interface{}) {
	p.Success = x.(*DeleteSkuResp)
}

func (p *CommodityServiceDeleteSkuResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CommodityServiceDeleteSkuResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CommodityServiceDeleteSkuResult(%+v)", *p)
}

func (p *CommodityServiceDeleteSkuResult) DeepEqual(ano *CommodityServiceDeleteSkuResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *CommodityServiceDeleteSkuResult) Field0DeepEqual(src *DeleteSkuResp) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

var fieldIDToName_CommodityServiceDeleteSkuResult = map[int16]string{
	0: "success",
}

type CommodityServiceViewSkuImageArgs struct {
	Req *ViewSkuImageReq `thrift:"req,1" frugal:"1,default,ViewSkuImageReq" json:"req"`
}

func NewCommodityServiceViewSkuImageArgs() *CommodityServiceViewSkuImageArgs {
	return &CommodityServiceViewSkuImageArgs{}
}

func (p *CommodityServiceViewSkuImageArgs) InitDefault() {
}

var CommodityServiceViewSkuImageArgs_Req_DEFAULT *ViewSkuImageReq

func (p *CommodityServiceViewSkuImageArgs) GetReq() (v *ViewSkuImageReq) {
	if !p.IsSetReq() {
		return CommodityServiceViewSkuImageArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *CommodityServiceViewSkuImageArgs) SetReq(val *ViewSkuImageReq) {
	p.Req = val
}

func (p *CommodityServiceViewSkuImageArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *CommodityServiceViewSkuImageArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CommodityServiceViewSkuImageArgs(%+v)", *p)
}

func (p *CommodityServiceViewSkuImageArgs) DeepEqual(ano *CommodityServiceViewSkuImageArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *CommodityServiceViewSkuImageArgs) Field1DeepEqual(src *ViewSkuImageReq) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

var fieldIDToName_CommodityServiceViewSkuImageArgs = map[int16]string{
	1: "req",
}

type CommodityServiceViewSkuImageResult struct {
	Success *ViewSkuImageResp `thrift:"success,0,optional" frugal:"0,optional,ViewSkuImageResp" json:"success,omitempty"`
}

func NewCommodityServiceViewSkuImageResult() *CommodityServiceViewSkuImageResult {
	return &CommodityServiceViewSkuImageResult{}
}

func (p *CommodityServiceViewSkuImageResult) InitDefault() {
}

var CommodityServiceViewSkuImageResult_Success_DEFAULT *ViewSkuImageResp

func (p *CommodityServiceViewSkuImageResult) GetSuccess() (v *ViewSkuImageResp) {
	if !p.IsSetSuccess() {
		return CommodityServiceViewSkuImageResult_Success_DEFAULT
	}
	return p.Success
}
func (p *CommodityServiceViewSkuImageResult) SetSuccess(x interface{}) {
	p.Success = x.(*ViewSkuImageResp)
}

func (p *CommodityServiceViewSkuImageResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CommodityServiceViewSkuImageResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CommodityServiceViewSkuImageResult(%+v)", *p)
}

func (p *CommodityServiceViewSkuImageResult) DeepEqual(ano *CommodityServiceViewSkuImageResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *CommodityServiceViewSkuImageResult) Field0DeepEqual(src *ViewSkuImageResp) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

var fieldIDToName_CommodityServiceViewSkuImageResult = map[int16]string{
	0: "success",
}

type CommodityServiceViewSkuArgs struct {
	Req *ViewSkuReq `thrift:"req,1" frugal:"1,default,ViewSkuReq" json:"req"`
}

func NewCommodityServiceViewSkuArgs() *CommodityServiceViewSkuArgs {
	return &CommodityServiceViewSkuArgs{}
}

func (p *CommodityServiceViewSkuArgs) InitDefault() {
}

var CommodityServiceViewSkuArgs_Req_DEFAULT *ViewSkuReq

func (p *CommodityServiceViewSkuArgs) GetReq() (v *ViewSkuReq) {
	if !p.IsSetReq() {
		return CommodityServiceViewSkuArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *CommodityServiceViewSkuArgs) SetReq(val *ViewSkuReq) {
	p.Req = val
}

func (p *CommodityServiceViewSkuArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *CommodityServiceViewSkuArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CommodityServiceViewSkuArgs(%+v)", *p)
}

func (p *CommodityServiceViewSkuArgs) DeepEqual(ano *CommodityServiceViewSkuArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *CommodityServiceViewSkuArgs) Field1DeepEqual(src *ViewSkuReq) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

var fieldIDToName_CommodityServiceViewSkuArgs = map[int16]string{
	1: "req",
}

type CommodityServiceViewSkuResult struct {
	Success *ViewSkuResp `thrift:"success,0,optional" frugal:"0,optional,ViewSkuResp" json:"success,omitempty"`
}

func NewCommodityServiceViewSkuResult() *CommodityServiceViewSkuResult {
	return &CommodityServiceViewSkuResult{}
}

func (p *CommodityServiceViewSkuResult) InitDefault() {
}

var CommodityServiceViewSkuResult_Success_DEFAULT *ViewSkuResp

func (p *CommodityServiceViewSkuResult) GetSuccess() (v *ViewSkuResp) {
	if !p.IsSetSuccess() {
		return CommodityServiceViewSkuResult_Success_DEFAULT
	}
	return p.Success
}
func (p *CommodityServiceViewSkuResult) SetSuccess(x interface{}) {
	p.Success = x.(*ViewSkuResp)
}

func (p *CommodityServiceViewSkuResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CommodityServiceViewSkuResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CommodityServiceViewSkuResult(%+v)", *p)
}

func (p *CommodityServiceViewSkuResult) DeepEqual(ano *CommodityServiceViewSkuResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *CommodityServiceViewSkuResult) Field0DeepEqual(src *ViewSkuResp) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

var fieldIDToName_CommodityServiceViewSkuResult = map[int16]string{
	0: "success",
}

type CommodityServiceUploadSkuAttrArgs struct {
	Req *UploadSkuAttrReq `thrift:"req,1" frugal:"1,default,UploadSkuAttrReq" json:"req"`
}

func NewCommodityServiceUploadSkuAttrArgs() *CommodityServiceUploadSkuAttrArgs {
	return &CommodityServiceUploadSkuAttrArgs{}
}

func (p *CommodityServiceUploadSkuAttrArgs) InitDefault() {
}

var CommodityServiceUploadSkuAttrArgs_Req_DEFAULT *UploadSkuAttrReq

func (p *CommodityServiceUploadSkuAttrArgs) GetReq() (v *UploadSkuAttrReq) {
	if !p.IsSetReq() {
		return CommodityServiceUploadSkuAttrArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *CommodityServiceUploadSkuAttrArgs) SetReq(val *UploadSkuAttrReq) {
	p.Req = val
}

func (p *CommodityServiceUploadSkuAttrArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *CommodityServiceUploadSkuAttrArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CommodityServiceUploadSkuAttrArgs(%+v)", *p)
}

func (p *CommodityServiceUploadSkuAttrArgs) DeepEqual(ano *CommodityServiceUploadSkuAttrArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *CommodityServiceUploadSkuAttrArgs) Field1DeepEqual(src *UploadSkuAttrReq) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

var fieldIDToName_CommodityServiceUploadSkuAttrArgs = map[int16]string{
	1: "req",
}

type CommodityServiceUploadSkuAttrResult struct {
	Success *UploadSkuAttrResp `thrift:"success,0,optional" frugal:"0,optional,UploadSkuAttrResp" json:"success,omitempty"`
}

func NewCommodityServiceUploadSkuAttrResult() *CommodityServiceUploadSkuAttrResult {
	return &CommodityServiceUploadSkuAttrResult{}
}

func (p *CommodityServiceUploadSkuAttrResult) InitDefault() {
}

var CommodityServiceUploadSkuAttrResult_Success_DEFAULT *UploadSkuAttrResp

func (p *CommodityServiceUploadSkuAttrResult) GetSuccess() (v *UploadSkuAttrResp) {
	if !p.IsSetSuccess() {
		return CommodityServiceUploadSkuAttrResult_Success_DEFAULT
	}
	return p.Success
}
func (p *CommodityServiceUploadSkuAttrResult) SetSuccess(x interface{}) {
	p.Success = x.(*UploadSkuAttrResp)
}

func (p *CommodityServiceUploadSkuAttrResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CommodityServiceUploadSkuAttrResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CommodityServiceUploadSkuAttrResult(%+v)", *p)
}

func (p *CommodityServiceUploadSkuAttrResult) DeepEqual(ano *CommodityServiceUploadSkuAttrResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *CommodityServiceUploadSkuAttrResult) Field0DeepEqual(src *UploadSkuAttrResp) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

var fieldIDToName_CommodityServiceUploadSkuAttrResult = map[int16]string{
	0: "success",
}

type CommodityServiceListSkuInfoArgs struct {
	Req *ListSkuInfoReq `thrift:"req,1" frugal:"1,default,ListSkuInfoReq" json:"req"`
}

func NewCommodityServiceListSkuInfoArgs() *CommodityServiceListSkuInfoArgs {
	return &CommodityServiceListSkuInfoArgs{}
}

func (p *CommodityServiceListSkuInfoArgs) InitDefault() {
}

var CommodityServiceListSkuInfoArgs_Req_DEFAULT *ListSkuInfoReq

func (p *CommodityServiceListSkuInfoArgs) GetReq() (v *ListSkuInfoReq) {
	if !p.IsSetReq() {
		return CommodityServiceListSkuInfoArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *CommodityServiceListSkuInfoArgs) SetReq(val *ListSkuInfoReq) {
	p.Req = val
}

func (p *CommodityServiceListSkuInfoArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *CommodityServiceListSkuInfoArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CommodityServiceListSkuInfoArgs(%+v)", *p)
}

func (p *CommodityServiceListSkuInfoArgs) DeepEqual(ano *CommodityServiceListSkuInfoArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *CommodityServiceListSkuInfoArgs) Field1DeepEqual(src *ListSkuInfoReq) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

var fieldIDToName_CommodityServiceListSkuInfoArgs = map[int16]string{
	1: "req",
}

type CommodityServiceListSkuInfoResult struct {
	Success *ListSkuInfoResp `thrift:"success,0,optional" frugal:"0,optional,ListSkuInfoResp" json:"success,omitempty"`
}

func NewCommodityServiceListSkuInfoResult() *CommodityServiceListSkuInfoResult {
	return &CommodityServiceListSkuInfoResult{}
}

func (p *CommodityServiceListSkuInfoResult) InitDefault() {
}

var CommodityServiceListSkuInfoResult_Success_DEFAULT *ListSkuInfoResp

func (p *CommodityServiceListSkuInfoResult) GetSuccess() (v *ListSkuInfoResp) {
	if !p.IsSetSuccess() {
		return CommodityServiceListSkuInfoResult_Success_DEFAULT
	}
	return p.Success
}
func (p *CommodityServiceListSkuInfoResult) SetSuccess(x interface{}) {
	p.Success = x.(*ListSkuInfoResp)
}

func (p *CommodityServiceListSkuInfoResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CommodityServiceListSkuInfoResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CommodityServiceListSkuInfoResult(%+v)", *p)
}

func (p *CommodityServiceListSkuInfoResult) DeepEqual(ano *CommodityServiceListSkuInfoResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *CommodityServiceListSkuInfoResult) Field0DeepEqual(src *ListSkuInfoResp) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

var fieldIDToName_CommodityServiceListSkuInfoResult = map[int16]string{
	0: "success",
}

type CommodityServiceViewHistoryArgs struct {
	Req *ViewHistoryPriceReq `thrift:"req,1" frugal:"1,default,ViewHistoryPriceReq" json:"req"`
}

func NewCommodityServiceViewHistoryArgs() *CommodityServiceViewHistoryArgs {
	return &CommodityServiceViewHistoryArgs{}
}

func (p *CommodityServiceViewHistoryArgs) InitDefault() {
}

var CommodityServiceViewHistoryArgs_Req_DEFAULT *ViewHistoryPriceReq

func (p *CommodityServiceViewHistoryArgs) GetReq() (v *ViewHistoryPriceReq) {
	if !p.IsSetReq() {
		return CommodityServiceViewHistoryArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *CommodityServiceViewHistoryArgs) SetReq(val *ViewHistoryPriceReq) {
	p.Req = val
}

func (p *CommodityServiceViewHistoryArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *CommodityServiceViewHistoryArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CommodityServiceViewHistoryArgs(%+v)", *p)
}

func (p *CommodityServiceViewHistoryArgs) DeepEqual(ano *CommodityServiceViewHistoryArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *CommodityServiceViewHistoryArgs) Field1DeepEqual(src *ViewHistoryPriceReq) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

var fieldIDToName_CommodityServiceViewHistoryArgs = map[int16]string{
	1: "req",
}

type CommodityServiceViewHistoryResult struct {
	Success *ViewHistoryPriceResp `thrift:"success,0,optional" frugal:"0,optional,ViewHistoryPriceResp" json:"success,omitempty"`
}

func NewCommodityServiceViewHistoryResult() *CommodityServiceViewHistoryResult {
	return &CommodityServiceViewHistoryResult{}
}

func (p *CommodityServiceViewHistoryResult) InitDefault() {
}

var CommodityServiceViewHistoryResult_Success_DEFAULT *ViewHistoryPriceResp

func (p *CommodityServiceViewHistoryResult) GetSuccess() (v *ViewHistoryPriceResp) {
	if !p.IsSetSuccess() {
		return CommodityServiceViewHistoryResult_Success_DEFAULT
	}
	return p.Success
}
func (p *CommodityServiceViewHistoryResult) SetSuccess(x interface{}) {
	p.Success = x.(*ViewHistoryPriceResp)
}

func (p *CommodityServiceViewHistoryResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CommodityServiceViewHistoryResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CommodityServiceViewHistoryResult(%+v)", *p)
}

func (p *CommodityServiceViewHistoryResult) DeepEqual(ano *CommodityServiceViewHistoryResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *CommodityServiceViewHistoryResult) Field0DeepEqual(src *ViewHistoryPriceResp) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

var fieldIDToName_CommodityServiceViewHistoryResult = map[int16]string{
	0: "success",
}

type CommodityServiceCreateSkuImageArgs struct {
	Req *CreateSkuImageReq `thrift:"req,1" frugal:"1,default,CreateSkuImageReq" json:"req"`
}

func NewCommodityServiceCreateSkuImageArgs() *CommodityServiceCreateSkuImageArgs {
	return &CommodityServiceCreateSkuImageArgs{}
}

func (p *CommodityServiceCreateSkuImageArgs) InitDefault() {
}

var CommodityServiceCreateSkuImageArgs_Req_DEFAULT *CreateSkuImageReq

func (p *CommodityServiceCreateSkuImageArgs) GetReq() (v *CreateSkuImageReq) {
	if !p.IsSetReq() {
		return CommodityServiceCreateSkuImageArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *CommodityServiceCreateSkuImageArgs) SetReq(val *CreateSkuImageReq) {
	p.Req = val
}

func (p *CommodityServiceCreateSkuImageArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *CommodityServiceCreateSkuImageArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CommodityServiceCreateSkuImageArgs(%+v)", *p)
}

func (p *CommodityServiceCreateSkuImageArgs) DeepEqual(ano *CommodityServiceCreateSkuImageArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *CommodityServiceCreateSkuImageArgs) Field1DeepEqual(src *CreateSkuImageReq) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

var fieldIDToName_CommodityServiceCreateSkuImageArgs = map[int16]string{
	1: "req",
}

type CommodityServiceCreateSkuImageResult struct {
	Success *CreateSkuImageResp `thrift:"success,0,optional" frugal:"0,optional,CreateSkuImageResp" json:"success,omitempty"`
}

func NewCommodityServiceCreateSkuImageResult() *CommodityServiceCreateSkuImageResult {
	return &CommodityServiceCreateSkuImageResult{}
}

func (p *CommodityServiceCreateSkuImageResult) InitDefault() {
}

var CommodityServiceCreateSkuImageResult_Success_DEFAULT *CreateSkuImageResp

func (p *CommodityServiceCreateSkuImageResult) GetSuccess() (v *CreateSkuImageResp) {
	if !p.IsSetSuccess() {
		return CommodityServiceCreateSkuImageResult_Success_DEFAULT
	}
	return p.Success
}
func (p *CommodityServiceCreateSkuImageResult) SetSuccess(x interface{}) {
	p.Success = x.(*CreateSkuImageResp)
}

func (p *CommodityServiceCreateSkuImageResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CommodityServiceCreateSkuImageResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CommodityServiceCreateSkuImageResult(%+v)", *p)
}

func (p *CommodityServiceCreateSkuImageResult) DeepEqual(ano *CommodityServiceCreateSkuImageResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *CommodityServiceCreateSkuImageResult) Field0DeepEqual(src *CreateSkuImageResp) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

var fieldIDToName_CommodityServiceCreateSkuImageResult = map[int16]string{
	0: "success",
}

type CommodityService_CreateSkuImageServer interface {
	streaming.Stream

	Recv() (*CreateSkuImageReq, error)

	SendAndClose(*CreateSkuImageResp) error
}

type CommodityServiceUpdateSkuImageArgs struct {
	Req *UpdateSkuImageReq `thrift:"req,1" frugal:"1,default,UpdateSkuImageReq" json:"req"`
}

func NewCommodityServiceUpdateSkuImageArgs() *CommodityServiceUpdateSkuImageArgs {
	return &CommodityServiceUpdateSkuImageArgs{}
}

func (p *CommodityServiceUpdateSkuImageArgs) InitDefault() {
}

var CommodityServiceUpdateSkuImageArgs_Req_DEFAULT *UpdateSkuImageReq

func (p *CommodityServiceUpdateSkuImageArgs) GetReq() (v *UpdateSkuImageReq) {
	if !p.IsSetReq() {
		return CommodityServiceUpdateSkuImageArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *CommodityServiceUpdateSkuImageArgs) SetReq(val *UpdateSkuImageReq) {
	p.Req = val
}

func (p *CommodityServiceUpdateSkuImageArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *CommodityServiceUpdateSkuImageArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CommodityServiceUpdateSkuImageArgs(%+v)", *p)
}

func (p *CommodityServiceUpdateSkuImageArgs) DeepEqual(ano *CommodityServiceUpdateSkuImageArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *CommodityServiceUpdateSkuImageArgs) Field1DeepEqual(src *UpdateSkuImageReq) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

var fieldIDToName_CommodityServiceUpdateSkuImageArgs = map[int16]string{
	1: "req",
}

type CommodityServiceUpdateSkuImageResult struct {
	Success *UpdateSkuImageResp `thrift:"success,0,optional" frugal:"0,optional,UpdateSkuImageResp" json:"success,omitempty"`
}

func NewCommodityServiceUpdateSkuImageResult() *CommodityServiceUpdateSkuImageResult {
	return &CommodityServiceUpdateSkuImageResult{}
}

func (p *CommodityServiceUpdateSkuImageResult) InitDefault() {
}

var CommodityServiceUpdateSkuImageResult_Success_DEFAULT *UpdateSkuImageResp

func (p *CommodityServiceUpdateSkuImageResult) GetSuccess() (v *UpdateSkuImageResp) {
	if !p.IsSetSuccess() {
		return CommodityServiceUpdateSkuImageResult_Success_DEFAULT
	}
	return p.Success
}
func (p *CommodityServiceUpdateSkuImageResult) SetSuccess(x interface{}) {
	p.Success = x.(*UpdateSkuImageResp)
}

func (p *CommodityServiceUpdateSkuImageResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CommodityServiceUpdateSkuImageResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CommodityServiceUpdateSkuImageResult(%+v)", *p)
}

func (p *CommodityServiceUpdateSkuImageResult) DeepEqual(ano *CommodityServiceUpdateSkuImageResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *CommodityServiceUpdateSkuImageResult) Field0DeepEqual(src *UpdateSkuImageResp) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

var fieldIDToName_CommodityServiceUpdateSkuImageResult = map[int16]string{
	0: "success",
}

type CommodityService_UpdateSkuImageServer interface {
	streaming.Stream

	Recv() (*UpdateSkuImageReq, error)

	SendAndClose(*UpdateSkuImageResp) error
}

type CommodityServiceDeleteSkuImageArgs struct {
	Req *DeleteSkuImageReq `thrift:"req,1" frugal:"1,default,DeleteSkuImageReq" json:"req"`
}

func NewCommodityServiceDeleteSkuImageArgs() *CommodityServiceDeleteSkuImageArgs {
	return &CommodityServiceDeleteSkuImageArgs{}
}

func (p *CommodityServiceDeleteSkuImageArgs) InitDefault() {
}

var CommodityServiceDeleteSkuImageArgs_Req_DEFAULT *DeleteSkuImageReq

func (p *CommodityServiceDeleteSkuImageArgs) GetReq() (v *DeleteSkuImageReq) {
	if !p.IsSetReq() {
		return CommodityServiceDeleteSkuImageArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *CommodityServiceDeleteSkuImageArgs) SetReq(val *DeleteSkuImageReq) {
	p.Req = val
}

func (p *CommodityServiceDeleteSkuImageArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *CommodityServiceDeleteSkuImageArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CommodityServiceDeleteSkuImageArgs(%+v)", *p)
}

func (p *CommodityServiceDeleteSkuImageArgs) DeepEqual(ano *CommodityServiceDeleteSkuImageArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *CommodityServiceDeleteSkuImageArgs) Field1DeepEqual(src *DeleteSkuImageReq) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

var fieldIDToName_CommodityServiceDeleteSkuImageArgs = map[int16]string{
	1: "req",
}

type CommodityServiceDeleteSkuImageResult struct {
	Success *DeleteSkuImageResp `thrift:"success,0,optional" frugal:"0,optional,DeleteSkuImageResp" json:"success,omitempty"`
}

func NewCommodityServiceDeleteSkuImageResult() *CommodityServiceDeleteSkuImageResult {
	return &CommodityServiceDeleteSkuImageResult{}
}

func (p *CommodityServiceDeleteSkuImageResult) InitDefault() {
}

var CommodityServiceDeleteSkuImageResult_Success_DEFAULT *DeleteSkuImageResp

func (p *CommodityServiceDeleteSkuImageResult) GetSuccess() (v *DeleteSkuImageResp) {
	if !p.IsSetSuccess() {
		return CommodityServiceDeleteSkuImageResult_Success_DEFAULT
	}
	return p.Success
}
func (p *CommodityServiceDeleteSkuImageResult) SetSuccess(x interface{}) {
	p.Success = x.(*DeleteSkuImageResp)
}

func (p *CommodityServiceDeleteSkuImageResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CommodityServiceDeleteSkuImageResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CommodityServiceDeleteSkuImageResult(%+v)", *p)
}

func (p *CommodityServiceDeleteSkuImageResult) DeepEqual(ano *CommodityServiceDeleteSkuImageResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *CommodityServiceDeleteSkuImageResult) Field0DeepEqual(src *DeleteSkuImageResp) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

var fieldIDToName_CommodityServiceDeleteSkuImageResult = map[int16]string{
	0: "success",
}

type CommodityServiceDescSkuLockStockArgs struct {
	Req *DescSkuLockStockReq `thrift:"req,1" frugal:"1,default,DescSkuLockStockReq" json:"req"`
}

func NewCommodityServiceDescSkuLockStockArgs() *CommodityServiceDescSkuLockStockArgs {
	return &CommodityServiceDescSkuLockStockArgs{}
}

func (p *CommodityServiceDescSkuLockStockArgs) InitDefault() {
}

var CommodityServiceDescSkuLockStockArgs_Req_DEFAULT *DescSkuLockStockReq

func (p *CommodityServiceDescSkuLockStockArgs) GetReq() (v *DescSkuLockStockReq) {
	if !p.IsSetReq() {
		return CommodityServiceDescSkuLockStockArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *CommodityServiceDescSkuLockStockArgs) SetReq(val *DescSkuLockStockReq) {
	p.Req = val
}

func (p *CommodityServiceDescSkuLockStockArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *CommodityServiceDescSkuLockStockArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CommodityServiceDescSkuLockStockArgs(%+v)", *p)
}

func (p *CommodityServiceDescSkuLockStockArgs) DeepEqual(ano *CommodityServiceDescSkuLockStockArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *CommodityServiceDescSkuLockStockArgs) Field1DeepEqual(src *DescSkuLockStockReq) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

var fieldIDToName_CommodityServiceDescSkuLockStockArgs = map[int16]string{
	1: "req",
}

type CommodityServiceDescSkuLockStockResult struct {
	Success *DescSkuLockStockResp `thrift:"success,0,optional" frugal:"0,optional,DescSkuLockStockResp" json:"success,omitempty"`
}

func NewCommodityServiceDescSkuLockStockResult() *CommodityServiceDescSkuLockStockResult {
	return &CommodityServiceDescSkuLockStockResult{}
}

func (p *CommodityServiceDescSkuLockStockResult) InitDefault() {
}

var CommodityServiceDescSkuLockStockResult_Success_DEFAULT *DescSkuLockStockResp

func (p *CommodityServiceDescSkuLockStockResult) GetSuccess() (v *DescSkuLockStockResp) {
	if !p.IsSetSuccess() {
		return CommodityServiceDescSkuLockStockResult_Success_DEFAULT
	}
	return p.Success
}
func (p *CommodityServiceDescSkuLockStockResult) SetSuccess(x interface{}) {
	p.Success = x.(*DescSkuLockStockResp)
}

func (p *CommodityServiceDescSkuLockStockResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CommodityServiceDescSkuLockStockResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CommodityServiceDescSkuLockStockResult(%+v)", *p)
}

func (p *CommodityServiceDescSkuLockStockResult) DeepEqual(ano *CommodityServiceDescSkuLockStockResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *CommodityServiceDescSkuLockStockResult) Field0DeepEqual(src *DescSkuLockStockResp) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

var fieldIDToName_CommodityServiceDescSkuLockStockResult = map[int16]string{
	0: "success",
}

type CommodityServiceIncrSkuLockStockArgs struct {
	Req *IncrSkuLockStockReq `thrift:"req,1" frugal:"1,default,IncrSkuLockStockReq" json:"req"`
}

func NewCommodityServiceIncrSkuLockStockArgs() *CommodityServiceIncrSkuLockStockArgs {
	return &CommodityServiceIncrSkuLockStockArgs{}
}

func (p *CommodityServiceIncrSkuLockStockArgs) InitDefault() {
}

var CommodityServiceIncrSkuLockStockArgs_Req_DEFAULT *IncrSkuLockStockReq

func (p *CommodityServiceIncrSkuLockStockArgs) GetReq() (v *IncrSkuLockStockReq) {
	if !p.IsSetReq() {
		return CommodityServiceIncrSkuLockStockArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *CommodityServiceIncrSkuLockStockArgs) SetReq(val *IncrSkuLockStockReq) {
	p.Req = val
}

func (p *CommodityServiceIncrSkuLockStockArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *CommodityServiceIncrSkuLockStockArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CommodityServiceIncrSkuLockStockArgs(%+v)", *p)
}

func (p *CommodityServiceIncrSkuLockStockArgs) DeepEqual(ano *CommodityServiceIncrSkuLockStockArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *CommodityServiceIncrSkuLockStockArgs) Field1DeepEqual(src *IncrSkuLockStockReq) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

var fieldIDToName_CommodityServiceIncrSkuLockStockArgs = map[int16]string{
	1: "req",
}

type CommodityServiceIncrSkuLockStockResult struct {
	Success *IncrSkuLockStockResp `thrift:"success,0,optional" frugal:"0,optional,IncrSkuLockStockResp" json:"success,omitempty"`
}

func NewCommodityServiceIncrSkuLockStockResult() *CommodityServiceIncrSkuLockStockResult {
	return &CommodityServiceIncrSkuLockStockResult{}
}

func (p *CommodityServiceIncrSkuLockStockResult) InitDefault() {
}

var CommodityServiceIncrSkuLockStockResult_Success_DEFAULT *IncrSkuLockStockResp

func (p *CommodityServiceIncrSkuLockStockResult) GetSuccess() (v *IncrSkuLockStockResp) {
	if !p.IsSetSuccess() {
		return CommodityServiceIncrSkuLockStockResult_Success_DEFAULT
	}
	return p.Success
}
func (p *CommodityServiceIncrSkuLockStockResult) SetSuccess(x interface{}) {
	p.Success = x.(*IncrSkuLockStockResp)
}

func (p *CommodityServiceIncrSkuLockStockResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CommodityServiceIncrSkuLockStockResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CommodityServiceIncrSkuLockStockResult(%+v)", *p)
}

func (p *CommodityServiceIncrSkuLockStockResult) DeepEqual(ano *CommodityServiceIncrSkuLockStockResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *CommodityServiceIncrSkuLockStockResult) Field0DeepEqual(src *IncrSkuLockStockResp) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

var fieldIDToName_CommodityServiceIncrSkuLockStockResult = map[int16]string{
	0: "success",
}

type CommodityServiceDescSkuStockArgs struct {
	Req *DescSkuStockReq `thrift:"req,1" frugal:"1,default,DescSkuStockReq" json:"req"`
}

func NewCommodityServiceDescSkuStockArgs() *CommodityServiceDescSkuStockArgs {
	return &CommodityServiceDescSkuStockArgs{}
}

func (p *CommodityServiceDescSkuStockArgs) InitDefault() {
}

var CommodityServiceDescSkuStockArgs_Req_DEFAULT *DescSkuStockReq

func (p *CommodityServiceDescSkuStockArgs) GetReq() (v *DescSkuStockReq) {
	if !p.IsSetReq() {
		return CommodityServiceDescSkuStockArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *CommodityServiceDescSkuStockArgs) SetReq(val *DescSkuStockReq) {
	p.Req = val
}

func (p *CommodityServiceDescSkuStockArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *CommodityServiceDescSkuStockArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CommodityServiceDescSkuStockArgs(%+v)", *p)
}

func (p *CommodityServiceDescSkuStockArgs) DeepEqual(ano *CommodityServiceDescSkuStockArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *CommodityServiceDescSkuStockArgs) Field1DeepEqual(src *DescSkuStockReq) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

var fieldIDToName_CommodityServiceDescSkuStockArgs = map[int16]string{
	1: "req",
}

type CommodityServiceDescSkuStockResult struct {
	Success *DescSkuStockResp `thrift:"success,0,optional" frugal:"0,optional,DescSkuStockResp" json:"success,omitempty"`
}

func NewCommodityServiceDescSkuStockResult() *CommodityServiceDescSkuStockResult {
	return &CommodityServiceDescSkuStockResult{}
}

func (p *CommodityServiceDescSkuStockResult) InitDefault() {
}

var CommodityServiceDescSkuStockResult_Success_DEFAULT *DescSkuStockResp

func (p *CommodityServiceDescSkuStockResult) GetSuccess() (v *DescSkuStockResp) {
	if !p.IsSetSuccess() {
		return CommodityServiceDescSkuStockResult_Success_DEFAULT
	}
	return p.Success
}
func (p *CommodityServiceDescSkuStockResult) SetSuccess(x interface{}) {
	p.Success = x.(*DescSkuStockResp)
}

func (p *CommodityServiceDescSkuStockResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CommodityServiceDescSkuStockResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CommodityServiceDescSkuStockResult(%+v)", *p)
}

func (p *CommodityServiceDescSkuStockResult) DeepEqual(ano *CommodityServiceDescSkuStockResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *CommodityServiceDescSkuStockResult) Field0DeepEqual(src *DescSkuStockResp) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

var fieldIDToName_CommodityServiceDescSkuStockResult = map[int16]string{
	0: "success",
}

type CommodityServiceListSpuInfoArgs struct {
	Req *ListSpuInfoReq `thrift:"req,1" frugal:"1,default,ListSpuInfoReq" json:"req"`
}

func NewCommodityServiceListSpuInfoArgs() *CommodityServiceListSpuInfoArgs {
	return &CommodityServiceListSpuInfoArgs{}
}

func (p *CommodityServiceListSpuInfoArgs) InitDefault() {
}

var CommodityServiceListSpuInfoArgs_Req_DEFAULT *ListSpuInfoReq

func (p *CommodityServiceListSpuInfoArgs) GetReq() (v *ListSpuInfoReq) {
	if !p.IsSetReq() {
		return CommodityServiceListSpuInfoArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *CommodityServiceListSpuInfoArgs) SetReq(val *ListSpuInfoReq) {
	p.Req = val
}

func (p *CommodityServiceListSpuInfoArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *CommodityServiceListSpuInfoArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CommodityServiceListSpuInfoArgs(%+v)", *p)
}

func (p *CommodityServiceListSpuInfoArgs) DeepEqual(ano *CommodityServiceListSpuInfoArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *CommodityServiceListSpuInfoArgs) Field1DeepEqual(src *ListSpuInfoReq) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

var fieldIDToName_CommodityServiceListSpuInfoArgs = map[int16]string{
	1: "req",
}

type CommodityServiceListSpuInfoResult struct {
	Success *ListSpuInfoResp `thrift:"success,0,optional" frugal:"0,optional,ListSpuInfoResp" json:"success,omitempty"`
}

func NewCommodityServiceListSpuInfoResult() *CommodityServiceListSpuInfoResult {
	return &CommodityServiceListSpuInfoResult{}
}

func (p *CommodityServiceListSpuInfoResult) InitDefault() {
}

var CommodityServiceListSpuInfoResult_Success_DEFAULT *ListSpuInfoResp

func (p *CommodityServiceListSpuInfoResult) GetSuccess() (v *ListSpuInfoResp) {
	if !p.IsSetSuccess() {
		return CommodityServiceListSpuInfoResult_Success_DEFAULT
	}
	return p.Success
}
func (p *CommodityServiceListSpuInfoResult) SetSuccess(x interface{}) {
	p.Success = x.(*ListSpuInfoResp)
}

func (p *CommodityServiceListSpuInfoResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CommodityServiceListSpuInfoResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CommodityServiceListSpuInfoResult(%+v)", *p)
}

func (p *CommodityServiceListSpuInfoResult) DeepEqual(ano *CommodityServiceListSpuInfoResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *CommodityServiceListSpuInfoResult) Field0DeepEqual(src *ListSpuInfoResp) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

var fieldIDToName_CommodityServiceListSpuInfoResult = map[int16]string{
	0: "success",
}

type CommodityServiceCreateCategoryArgs struct {
	Req *CreateCategoryReq `thrift:"req,1" frugal:"1,default,CreateCategoryReq" json:"req"`
}

func NewCommodityServiceCreateCategoryArgs() *CommodityServiceCreateCategoryArgs {
	return &CommodityServiceCreateCategoryArgs{}
}

func (p *CommodityServiceCreateCategoryArgs) InitDefault() {
}

var CommodityServiceCreateCategoryArgs_Req_DEFAULT *CreateCategoryReq

func (p *CommodityServiceCreateCategoryArgs) GetReq() (v *CreateCategoryReq) {
	if !p.IsSetReq() {
		return CommodityServiceCreateCategoryArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *CommodityServiceCreateCategoryArgs) SetReq(val *CreateCategoryReq) {
	p.Req = val
}

func (p *CommodityServiceCreateCategoryArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *CommodityServiceCreateCategoryArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CommodityServiceCreateCategoryArgs(%+v)", *p)
}

func (p *CommodityServiceCreateCategoryArgs) DeepEqual(ano *CommodityServiceCreateCategoryArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *CommodityServiceCreateCategoryArgs) Field1DeepEqual(src *CreateCategoryReq) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

var fieldIDToName_CommodityServiceCreateCategoryArgs = map[int16]string{
	1: "req",
}

type CommodityServiceCreateCategoryResult struct {
	Success *CreateCategoryResp `thrift:"success,0,optional" frugal:"0,optional,CreateCategoryResp" json:"success,omitempty"`
}

func NewCommodityServiceCreateCategoryResult() *CommodityServiceCreateCategoryResult {
	return &CommodityServiceCreateCategoryResult{}
}

func (p *CommodityServiceCreateCategoryResult) InitDefault() {
}

var CommodityServiceCreateCategoryResult_Success_DEFAULT *CreateCategoryResp

func (p *CommodityServiceCreateCategoryResult) GetSuccess() (v *CreateCategoryResp) {
	if !p.IsSetSuccess() {
		return CommodityServiceCreateCategoryResult_Success_DEFAULT
	}
	return p.Success
}
func (p *CommodityServiceCreateCategoryResult) SetSuccess(x interface{}) {
	p.Success = x.(*CreateCategoryResp)
}

func (p *CommodityServiceCreateCategoryResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CommodityServiceCreateCategoryResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CommodityServiceCreateCategoryResult(%+v)", *p)
}

func (p *CommodityServiceCreateCategoryResult) DeepEqual(ano *CommodityServiceCreateCategoryResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *CommodityServiceCreateCategoryResult) Field0DeepEqual(src *CreateCategoryResp) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

var fieldIDToName_CommodityServiceCreateCategoryResult = map[int16]string{
	0: "success",
}

type CommodityServiceDeleteCategoryArgs struct {
	Req *DeleteCategoryReq `thrift:"req,1" frugal:"1,default,DeleteCategoryReq" json:"req"`
}

func NewCommodityServiceDeleteCategoryArgs() *CommodityServiceDeleteCategoryArgs {
	return &CommodityServiceDeleteCategoryArgs{}
}

func (p *CommodityServiceDeleteCategoryArgs) InitDefault() {
}

var CommodityServiceDeleteCategoryArgs_Req_DEFAULT *DeleteCategoryReq

func (p *CommodityServiceDeleteCategoryArgs) GetReq() (v *DeleteCategoryReq) {
	if !p.IsSetReq() {
		return CommodityServiceDeleteCategoryArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *CommodityServiceDeleteCategoryArgs) SetReq(val *DeleteCategoryReq) {
	p.Req = val
}

func (p *CommodityServiceDeleteCategoryArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *CommodityServiceDeleteCategoryArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CommodityServiceDeleteCategoryArgs(%+v)", *p)
}

func (p *CommodityServiceDeleteCategoryArgs) DeepEqual(ano *CommodityServiceDeleteCategoryArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *CommodityServiceDeleteCategoryArgs) Field1DeepEqual(src *DeleteCategoryReq) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

var fieldIDToName_CommodityServiceDeleteCategoryArgs = map[int16]string{
	1: "req",
}

type CommodityServiceDeleteCategoryResult struct {
	Success *DeleteCategoryResp `thrift:"success,0,optional" frugal:"0,optional,DeleteCategoryResp" json:"success,omitempty"`
}

func NewCommodityServiceDeleteCategoryResult() *CommodityServiceDeleteCategoryResult {
	return &CommodityServiceDeleteCategoryResult{}
}

func (p *CommodityServiceDeleteCategoryResult) InitDefault() {
}

var CommodityServiceDeleteCategoryResult_Success_DEFAULT *DeleteCategoryResp

func (p *CommodityServiceDeleteCategoryResult) GetSuccess() (v *DeleteCategoryResp) {
	if !p.IsSetSuccess() {
		return CommodityServiceDeleteCategoryResult_Success_DEFAULT
	}
	return p.Success
}
func (p *CommodityServiceDeleteCategoryResult) SetSuccess(x interface{}) {
	p.Success = x.(*DeleteCategoryResp)
}

func (p *CommodityServiceDeleteCategoryResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CommodityServiceDeleteCategoryResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CommodityServiceDeleteCategoryResult(%+v)", *p)
}

func (p *CommodityServiceDeleteCategoryResult) DeepEqual(ano *CommodityServiceDeleteCategoryResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *CommodityServiceDeleteCategoryResult) Field0DeepEqual(src *DeleteCategoryResp) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

var fieldIDToName_CommodityServiceDeleteCategoryResult = map[int16]string{
	0: "success",
}

type CommodityServiceViewCategoryArgs struct {
	Req *ViewCategoryReq `thrift:"req,1" frugal:"1,default,ViewCategoryReq" json:"req"`
}

func NewCommodityServiceViewCategoryArgs() *CommodityServiceViewCategoryArgs {
	return &CommodityServiceViewCategoryArgs{}
}

func (p *CommodityServiceViewCategoryArgs) InitDefault() {
}

var CommodityServiceViewCategoryArgs_Req_DEFAULT *ViewCategoryReq

func (p *CommodityServiceViewCategoryArgs) GetReq() (v *ViewCategoryReq) {
	if !p.IsSetReq() {
		return CommodityServiceViewCategoryArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *CommodityServiceViewCategoryArgs) SetReq(val *ViewCategoryReq) {
	p.Req = val
}

func (p *CommodityServiceViewCategoryArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *CommodityServiceViewCategoryArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CommodityServiceViewCategoryArgs(%+v)", *p)
}

func (p *CommodityServiceViewCategoryArgs) DeepEqual(ano *CommodityServiceViewCategoryArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *CommodityServiceViewCategoryArgs) Field1DeepEqual(src *ViewCategoryReq) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

var fieldIDToName_CommodityServiceViewCategoryArgs = map[int16]string{
	1: "req",
}

type CommodityServiceViewCategoryResult struct {
	Success *ViewCategoryResp `thrift:"success,0,optional" frugal:"0,optional,ViewCategoryResp" json:"success,omitempty"`
}

func NewCommodityServiceViewCategoryResult() *CommodityServiceViewCategoryResult {
	return &CommodityServiceViewCategoryResult{}
}

func (p *CommodityServiceViewCategoryResult) InitDefault() {
}

var CommodityServiceViewCategoryResult_Success_DEFAULT *ViewCategoryResp

func (p *CommodityServiceViewCategoryResult) GetSuccess() (v *ViewCategoryResp) {
	if !p.IsSetSuccess() {
		return CommodityServiceViewCategoryResult_Success_DEFAULT
	}
	return p.Success
}
func (p *CommodityServiceViewCategoryResult) SetSuccess(x interface{}) {
	p.Success = x.(*ViewCategoryResp)
}

func (p *CommodityServiceViewCategoryResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CommodityServiceViewCategoryResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CommodityServiceViewCategoryResult(%+v)", *p)
}

func (p *CommodityServiceViewCategoryResult) DeepEqual(ano *CommodityServiceViewCategoryResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *CommodityServiceViewCategoryResult) Field0DeepEqual(src *ViewCategoryResp) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

var fieldIDToName_CommodityServiceViewCategoryResult = map[int16]string{
	0: "success",
}

type CommodityServiceUpdateCategoryArgs struct {
	Req *UpdateCategoryReq `thrift:"req,1" frugal:"1,default,UpdateCategoryReq" json:"req"`
}

func NewCommodityServiceUpdateCategoryArgs() *CommodityServiceUpdateCategoryArgs {
	return &CommodityServiceUpdateCategoryArgs{}
}

func (p *CommodityServiceUpdateCategoryArgs) InitDefault() {
}

var CommodityServiceUpdateCategoryArgs_Req_DEFAULT *UpdateCategoryReq

func (p *CommodityServiceUpdateCategoryArgs) GetReq() (v *UpdateCategoryReq) {
	if !p.IsSetReq() {
		return CommodityServiceUpdateCategoryArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *CommodityServiceUpdateCategoryArgs) SetReq(val *UpdateCategoryReq) {
	p.Req = val
}

func (p *CommodityServiceUpdateCategoryArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *CommodityServiceUpdateCategoryArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CommodityServiceUpdateCategoryArgs(%+v)", *p)
}

func (p *CommodityServiceUpdateCategoryArgs) DeepEqual(ano *CommodityServiceUpdateCategoryArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *CommodityServiceUpdateCategoryArgs) Field1DeepEqual(src *UpdateCategoryReq) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

var fieldIDToName_CommodityServiceUpdateCategoryArgs = map[int16]string{
	1: "req",
}

type CommodityServiceUpdateCategoryResult struct {
	Success *UpdateCategoryResp `thrift:"success,0,optional" frugal:"0,optional,UpdateCategoryResp" json:"success,omitempty"`
}

func NewCommodityServiceUpdateCategoryResult() *CommodityServiceUpdateCategoryResult {
	return &CommodityServiceUpdateCategoryResult{}
}

func (p *CommodityServiceUpdateCategoryResult) InitDefault() {
}

var CommodityServiceUpdateCategoryResult_Success_DEFAULT *UpdateCategoryResp

func (p *CommodityServiceUpdateCategoryResult) GetSuccess() (v *UpdateCategoryResp) {
	if !p.IsSetSuccess() {
		return CommodityServiceUpdateCategoryResult_Success_DEFAULT
	}
	return p.Success
}
func (p *CommodityServiceUpdateCategoryResult) SetSuccess(x interface{}) {
	p.Success = x.(*UpdateCategoryResp)
}

func (p *CommodityServiceUpdateCategoryResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CommodityServiceUpdateCategoryResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CommodityServiceUpdateCategoryResult(%+v)", *p)
}

func (p *CommodityServiceUpdateCategoryResult) DeepEqual(ano *CommodityServiceUpdateCategoryResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *CommodityServiceUpdateCategoryResult) Field0DeepEqual(src *UpdateCategoryResp) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

var fieldIDToName_CommodityServiceUpdateCategoryResult = map[int16]string{
	0: "success",
}
