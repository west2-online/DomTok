/*
Copyright 2024 The west2-online Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by hertz generator.

package cart

import (
	"context"
	"fmt"

	"github.com/samber/lo"

	kmodel "github.com/west2-online/DomTok/kitex_gen/model"

	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"

	api "github.com/west2-online/DomTok/app/gateway/model/api/cart"
	"github.com/west2-online/DomTok/app/gateway/pack"
	"github.com/west2-online/DomTok/app/gateway/rpc"
	"github.com/west2-online/DomTok/kitex_gen/cart"
	"github.com/west2-online/DomTok/pkg/errno"
)

// AddGoodsIntoCart .
// @router /api/v1/api/add [POST]
func AddGoodsIntoCart(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api.AddGoodsIntoCartRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		pack.RespError(c, errno.ParamVerifyError.WithError(err))
		return
	}

	err = rpc.AddGoodsIntoCartRPC(ctx, &cart.AddGoodsIntoCartRequest{
		SkuId:     req.SkuID,
		ShopId:    req.ShopID,
		Count:     req.Count,
		VersionId: req.VersionID,
	})
	if err != nil {
		pack.RespError(c, err)
		return
	}
	pack.RespSuccess(c)
}

// ShowCartGoodsList .
// @router /api/v1/api/show [GET]
func ShowCartGoodsList(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api.ShowCartGoodsListRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		pack.RespError(c, errno.ParamVerifyError.WithError(err))
		return
	}

	resp := new(api.ShowCartGoodsListResponse)
	cartGoods, err := rpc.ShowCartGoodsRPC(ctx, &cart.ShowCartGoodsListRequest{
		PageNum: req.PageNum,
	})
	if err != nil {
		pack.RespError(c, err)
		return
	}
	resp.GoodsList = pack.BuildCartGoodsList(cartGoods)
	pack.RespList(c, resp.GoodsList)
}

// UpdateCartGoods .
// @router /api/v1/api/update [PUT]
func UpdateCartGoods(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api.UpdateCartGoodsRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(api.UpdateCartGoodsResponse)

	c.JSON(consts.StatusOK, resp)
}

// DeleteAllCartGoods .
// @router /api/v1/cart/empty [GET]
func DeleteAllCartGoods(ctx context.Context, c *app.RequestContext) {
	var err error
	var req cart.DeleteAllCartGoodsRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		pack.RespError(c, errno.ParamVerifyError.WithError(err))
		return
	}

	err = rpc.DeleteAllCartGoodsRPC(ctx, &cart.DeleteAllCartGoodsRequest{})
	if err != nil {
		pack.RespError(c, err)
		return
	}
	pack.RespSuccess(c)
}

// PurChaseCartGoods .
// @router /api/v1/cart/purchase [POST]
func PurChaseCartGoods(ctx context.Context, c *app.RequestContext) {
	var err error
	var req cart.PurChaseCartGoodsRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	rpcCartGoods := lo.Map(req.CartGoods, func(item *kmodel.CartGoods, index int) *kmodel.CartGoods {
		fmt.Println(*item)
		return &kmodel.CartGoods{
			MerchantId:       item.MerchantId,
			GoodsId:          item.GoodsId,
			SkuId:            item.SkuId,
			PurchaseQuantity: item.PurchaseQuantity,
			GoodsVersion:     item.GoodsVersion,
		}
	})
	orderId, err := rpc.PurchaseCartGoodsRPC(ctx, &cart.PurChaseCartGoodsRequest{
		CartGoods: rpcCartGoods,
	})
	if err != nil {
		pack.RespError(c, err)
		return
	}
	pack.RespData(c, orderId)
}
